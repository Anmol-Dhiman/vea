/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export interface MerkleProofExposedInterface extends utils.Interface {
  functions: {
    "validateProof(bytes32[],bytes32,bytes32)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "validateProof"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "validateProof",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "validateProof", data: BytesLike): Result;

  events: {};
}

export interface MerkleProofExposed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleProofExposedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    validateProof(
      proof: PromiseOrValue<BytesLike>[],
      leaf: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  validateProof(
    proof: PromiseOrValue<BytesLike>[],
    leaf: PromiseOrValue<BytesLike>,
    merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    validateProof(
      proof: PromiseOrValue<BytesLike>[],
      leaf: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    validateProof(
      proof: PromiseOrValue<BytesLike>[],
      leaf: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    validateProof(
      proof: PromiseOrValue<BytesLike>[],
      leaf: PromiseOrValue<BytesLike>,
      merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
