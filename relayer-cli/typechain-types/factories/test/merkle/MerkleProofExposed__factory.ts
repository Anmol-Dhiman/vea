/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MerkleProofExposed, MerkleProofExposedInterface } from "../../../test/merkle/MerkleProofExposed";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    name: "validateProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610204806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a294241714610030575b600080fd5b61004361003e3660046100ea565b610057565b604051901515815260200160405180910390f35b600061006484848461006c565b949350505050565b6000805b84518110156100cc57600085828151811061008d5761008d6101b8565b60200260200101519050848111156100b3578460005280602052604060002094506100c3565b8060005284602052604060002094505b50600101610070565b505014919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156100ff57600080fd5b833567ffffffffffffffff8082111561011757600080fd5b818601915086601f83011261012b57600080fd5b813560208282111561013f5761013f6100d4565b8160051b604051601f19603f83011681018181108682111715610164576101646100d4565b60405292835281830193508481018201928a84111561018257600080fd5b948201945b838610156101a057853585529482019493820193610187565b9a918901359950506040909701359695505050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220e359513f1617f8433d02e591a693f840e136f070b723ca17e64ed8c504f4c2ca64736f6c63430008120033";

type MerkleProofExposedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MerkleProofExposedConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MerkleProofExposed__factory extends ContractFactory {
  constructor(...args: MerkleProofExposedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MerkleProofExposed> {
    return super.deploy(overrides || {}) as Promise<MerkleProofExposed>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleProofExposed {
    return super.attach(address) as MerkleProofExposed;
  }
  override connect(signer: Signer): MerkleProofExposed__factory {
    return super.connect(signer) as MerkleProofExposed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofExposedInterface {
    return new utils.Interface(_abi) as MerkleProofExposedInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MerkleProofExposed {
    return new Contract(address, _abi, signerOrProvider) as MerkleProofExposed;
  }
}
