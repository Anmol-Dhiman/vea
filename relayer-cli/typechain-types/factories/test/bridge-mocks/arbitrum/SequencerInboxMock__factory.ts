/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BigNumberish, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SequencerInboxMock,
  SequencerInboxMockInterface,
} from "../../../../test/bridge-mocks/arbitrum/SequencerInboxMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delaySeconds",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "delaySeconds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTimeVariation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161010c38038061010c83398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60ae8061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063b752a7d1146037578063ebea461d146052575b600080fd5b603f60005481565b6040519081526020015b60405180910390f35b60008054819081604080519485526020850193909352918301526060820152608001604956fea26469706673582212205fadc0b521c74df3b94d6b38d70558c5bf5ed3e7d86c29f8ba96ab4e22f470b264736f6c63430008120033";

type SequencerInboxMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SequencerInboxMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class SequencerInboxMock__factory extends ContractFactory {
  constructor(...args: SequencerInboxMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delaySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SequencerInboxMock> {
    return super.deploy(_delaySeconds, overrides || {}) as Promise<SequencerInboxMock>;
  }
  override getDeployTransaction(
    _delaySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_delaySeconds, overrides || {});
  }
  override attach(address: string): SequencerInboxMock {
    return super.attach(address) as SequencerInboxMock;
  }
  override connect(signer: Signer): SequencerInboxMock__factory {
    return super.connect(signer) as SequencerInboxMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SequencerInboxMockInterface {
    return new utils.Interface(_abi) as SequencerInboxMockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SequencerInboxMock {
    return new Contract(address, _abi, signerOrProvider) as SequencerInboxMock;
  }
}
