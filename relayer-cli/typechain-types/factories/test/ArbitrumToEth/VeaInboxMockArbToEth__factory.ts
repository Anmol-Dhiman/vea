/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BigNumberish, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VeaInboxMockArbToEth,
  VeaInboxMockArbToEthInterface,
} from "../../../test/ArbitrumToEth/VeaInboxMockArbToEth";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IArbSys",
        name: "_arbSys",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_epochPeriod",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_veaOutbox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "_nodeData",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_snapshot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_epoch",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "_count",
        type: "uint64",
      },
    ],
    name: "SnapshotSaved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_epochSent",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_ticketId",
        type: "bytes32",
      },
    ],
    name: "SnapshotSent",
    type: "event",
  },
  {
    inputs: [],
    name: "arbSys",
    outputs: [
      {
        internalType: "contract IArbSys",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "epochAt",
    outputs: [
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "epochFinalized",
    outputs: [
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "epochNow",
    outputs: [
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "epochPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "saveSnapshot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_fnSelector",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_epochSnapshot",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "stateRoot",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "timestampClaimed",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "timestampVerification",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "blocknumberVerification",
            type: "uint32",
          },
          {
            internalType: "enum Party",
            name: "honest",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "challenger",
            type: "address",
          },
        ],
        internalType: "struct Claim",
        name: "_claim",
        type: "tuple",
      },
    ],
    name: "sendSnapshot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "snapshots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "veaOutboxArbToEth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610c3f380380610c3f83398101604081905261002f91610064565b6080919091526001600160a01b0390811660a0521660c0526100a7565b6001600160a01b038116811461006157600080fd5b50565b60008060006060848603121561007957600080fd5b83516100848161004c565b60208501516040860151919450925061009c8161004c565b809150509250925092565b60805160a05160c051610b396101066000396000818160e501526105fa0152600081816101720152610627015260008181610199015281816101f5015281816102280152818161025e0152818161028e01526105250152610b396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063519205351161007157806351920535146101505780635f85896c1461015a578063744b49bf1461016d578063b5b7a18414610194578063c705e412146101bb578063d6565a2d146101ce57600080fd5b806306661abd146100ae5780631057d40f146100e0578063222ae7861461011f5780633ac3b6b6146101355780634a439cfe1461013d575b600080fd5b6041546100c29067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6101077f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d7565b6101276101ee565b6040519081526020016100d7565b61012761021f565b61012761014b366004610704565b610257565b610158610289565b005b6100c261016836600461074f565b6103ad565b6101077f000000000000000000000000000000000000000000000000000000000000000081565b6101277f000000000000000000000000000000000000000000000000000000000000000081565b6101586101c9366004610830565b61051e565b6101276101dc366004610704565b60006020819052908152604090205481565b600061021a7f00000000000000000000000000000000000000000000000000000000000000004261087f565b905090565b6000600161024d7f00000000000000000000000000000000000000000000000000000000000000004261087f565b61021a91906108a1565b60006102837f00000000000000000000000000000000000000000000000000000000000000008361087f565b92915050565b6000807f000000000000000000000000000000000000000000000000000000000000000042816102bb576102bb610869565b604154919004925060009067ffffffffffffffff165b801561030a57806001166001036102fe57600182604081106102f5576102f56108c2565b0154925061030a565b6001918201911c6102d1565b60011c5b801561034c5760019182019181811690036103445761034160018360408110610339576103396108c2565b0154846106d3565b92505b60011c61030e565b505060008281526020818152604091829020839055604154825184815291820185905267ffffffffffffffff168183015290517f592424eb1d6135501bd20833f15fd127c29d08eed4f03872f6f75182126b1e489181900360600190a15050565b60415460009067ffffffffffffffff9081169081106104045760405162461bcd60e51b815260206004820152600e60248201526d24b73137bc1034b990333ab6361760911b60448201526064015b60405180910390fd5b60405160009082908790610420908890339089906020016108fc565b60408051601f198184030181529082905261043f939291602001610932565b60408051601f1981840301815291905280516020808301919091206000908152908120919250600184015b600181166000036104a35761048b60018360408110610339576103396108c2565b92506001918201911c677fffffffffffffff1661046a565b5081600182604081106104b8576104b86108c2565b0155506041805467ffffffffffffffff19166001850167ffffffffffffffff161790556040517f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0369061050b9084906109ad565b60405180910390a1509095945050505050565b600061054a7f00000000000000000000000000000000000000000000000000000000000000004261087f565b9050808311156105935760405162461bcd60e51b815260206004820152601460248201527322b837b1b41034b7103a343290333aba3ab9329760611b60448201526064016103fb565b6000838152602081905260408082205490516105b59186918690602401610a0c565b60408051601f198184030181529181526020820180516001600160e01b0316630f0adca560e01b179052516349460b4d60e11b81529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063928c169a90610651907f0000000000000000000000000000000000000000000000000000000000000000908690600401610abe565b6020604051808303816000875af1158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190610aea565b60405181815290915085907f6fdd49f435101fc7b6ebdec7c8972932a926d18f6cb78a8891dfe950743b6b829060200160405180910390a25050505050565b6000818310156106f157826000528160205260406000209050610283565b5060009081526020919091526040902090565b60006020828403121561071657600080fd5b5035919050565b80356001600160a01b038116811461073457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561076457600080fd5b61076d8461071d565b925060208401356001600160e01b03198116811461078a57600080fd5b9150604084013567ffffffffffffffff808211156107a757600080fd5b818601915086601f8301126107bb57600080fd5b8135818111156107cd576107cd610739565b604051601f8201601f19908116603f011681019083821181831017156107f5576107f5610739565b8160405282815289602084870101111561080e57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008082840361010081121561084557600080fd5b8335925060e0601f198201121561085b57600080fd5b506020830190509250929050565b634e487b7160e01b600052601260045260246000fd5b60008261089c57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561028357634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b838110156108f35781810151838201526020016108db565b50506000910152565b63ffffffff60e01b84168152826004820152600082516109238160248501602087016108d8565b91909101602401949350505050565b67ffffffffffffffff60c01b8460c01b1681526bffffffffffffffffffffffff198360601b1660088201526000825161097281601c8501602087016108d8565b91909101601c01949350505050565b600081518084526109998160208601602086016108d8565b601f01601f19169290920160200192915050565b6020815260006109c06020830184610981565b9392505050565b803563ffffffff8116811461073457600080fd5b80356003811061073457600080fd5b60038110610a0857634e487b7160e01b600052602160045260246000fd5b9052565b8381526020808201849052823560408301526101208201906001600160a01b0390610a3890850161071d565b166060830152610a4a604084016109c7565b63ffffffff808216608085015280610a64606087016109c7565b1660a085015280610a77608087016109c7565b1660c08501525050610a8b60a084016109db565b610a9860e08401826109ea565b50610aa560c0840161071d565b6001600160a01b03811661010084015250949350505050565b6001600160a01b0383168152604060208201819052600090610ae290830184610981565b949350505050565b600060208284031215610afc57600080fd5b505191905056fea26469706673582212207ef19c4bf21d8f6d08d06ff19720f3a6d926c3705ed117ad6dfe4d5050e8c7af64736f6c63430008120033";

type VeaInboxMockArbToEthConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: VeaInboxMockArbToEthConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class VeaInboxMockArbToEth__factory extends ContractFactory {
  constructor(...args: VeaInboxMockArbToEthConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _arbSys: PromiseOrValue<string>,
    _epochPeriod: PromiseOrValue<BigNumberish>,
    _veaOutbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VeaInboxMockArbToEth> {
    return super.deploy(_arbSys, _epochPeriod, _veaOutbox, overrides || {}) as Promise<VeaInboxMockArbToEth>;
  }
  override getDeployTransaction(
    _arbSys: PromiseOrValue<string>,
    _epochPeriod: PromiseOrValue<BigNumberish>,
    _veaOutbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_arbSys, _epochPeriod, _veaOutbox, overrides || {});
  }
  override attach(address: string): VeaInboxMockArbToEth {
    return super.attach(address) as VeaInboxMockArbToEth;
  }
  override connect(signer: Signer): VeaInboxMockArbToEth__factory {
    return super.connect(signer) as VeaInboxMockArbToEth__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VeaInboxMockArbToEthInterface {
    return new utils.Interface(_abi) as VeaInboxMockArbToEthInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VeaInboxMockArbToEth {
    return new Contract(address, _abi, signerOrProvider) as VeaInboxMockArbToEth;
  }
}
