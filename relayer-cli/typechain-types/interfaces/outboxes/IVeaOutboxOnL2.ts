/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export interface IVeaOutboxOnL2Interface extends utils.Interface {
  functions: {
    "resolveDisputedClaim(uint256,bytes32)": FunctionFragment;
    "sendMessage(bytes32[],uint64,address,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "resolveDisputedClaim" | "sendMessage"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "resolveDisputedClaim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "resolveDisputedClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;

  events: {};
}

export interface IVeaOutboxOnL2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVeaOutboxOnL2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    resolveDisputedClaim(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _proof: PromiseOrValue<BytesLike>[],
      _msgId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  resolveDisputedClaim(
    _epoch: PromiseOrValue<BigNumberish>,
    _stateRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _proof: PromiseOrValue<BytesLike>[],
    _msgId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    resolveDisputedClaim(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      _proof: PromiseOrValue<BytesLike>[],
      _msgId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    resolveDisputedClaim(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _proof: PromiseOrValue<BytesLike>[],
      _msgId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    resolveDisputedClaim(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _proof: PromiseOrValue<BytesLike>[],
      _msgId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
