{
  "address": "0x9cF5c011e2A4CB7797413f311A35AcB021071c35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minChallengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutEpochs",
          "type": "uint256"
        },
        {
          "internalType": "contract IAMB",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_routerArbToGnosis",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sequencerDelayLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMissingBlocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_routerChainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "VerificationStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newSequencerDelayLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerDelayLimitUpdateReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amb",
      "outputs": [
        {
          "internalType": "contract IAMB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "censorshipTestStatus",
      "outputs": [
        {
          "internalType": "enum VeaOutboxArbToGnosis.CensorshipTestStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochNow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "hashClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hashedClaim",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMissingBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minChallengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerArbToGnosis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerDelayLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "startVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeoutEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampDelayUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSequencerDelayLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerDelayLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "verifySnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestampClaimed",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "timestampVerification",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumberVerification",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x63ff133667d56fb584e0a722bc3874702a2e75cc14fdca2bfef4a8058f7e3241",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0x9cF5c011e2A4CB7797413f311A35AcB021071c35",
    "transactionIndex": 0,
    "gasUsed": "2306024",
    "logsBloom": "0x
    "blockHash": "0xe7bf551e42e516eb1d9c99a53628bf266be748d1fba2f720c272016fd175615a",
    "transactionHash": "0x63ff133667d56fb584e0a722bc3874702a2e75cc14fdca2bfef4a8058f7e3241",
    "logs": [],
    "blockNumber": 4697829,
    "cumulativeGasUsed": "2306024",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "200000000000000000",
    7200,
    10800,
    1000000,
    "0x99Ca51a3534785ED619f46A79C7Ad65Fa8d85e7a",
    "0x7Ee8Ad48EfA4765257a49486421A4CF11389E480",
    86400,
    1000000,
    5,
    "0x8d74e5e4DA11629537C4575cB0f33b4F0Dfa42EB"
  ],
  "numDeployments": 3,
  "solcInputHash": "6b0b750c6eee9aa0a5e450d1f0bbb2d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minChallengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutEpochs\",\"type\":\"uint256\"},{\"internalType\":\"contract IAMB\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerArbToGnosis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerDelayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMissingBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_routerChainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"VerificationStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSequencerDelayLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerDelayLimitUpdateReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"censorshipTestStatus\",\"outputs\":[{\"internalType\":\"enum VeaOutboxArbToGnosis.CensorshipTestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"epochAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"hashClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedClaim\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMissingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minChallengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerArbToGnosis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerDelayLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"startVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeoutEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampDelayUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSequencerDelayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSequencerDelayLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"verifySnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestampVerification\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumberVerification\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vea Outbox From Arbitrum to Gnosis. Note: This contract is deployed on Gnosis.\",\"events\":{\"Challenged(uint256,address)\":{\"details\":\"This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\",\"params\":{\"_challenger\":\"The address of the challenger.\",\"_epoch\":\"The epoch associated with the challenged claim.\"}},\"Claimed(address,uint256,bytes32)\":{\"details\":\"Watchers check this event to challenge fraud.\",\"params\":{\"_claimer\":\"The address of the claimer.\",\"_epoch\":\"The epoch associated with the claim.\",\"_stateRoot\":\"The state root of the claim.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"_msgId\":\"The msgId of the message that was relayed.\"}},\"VerificationStarted(uint256)\":{\"details\":\"This event indicates that the censorship test started and all challengers are ready even in the worst case scenario of a malicious sequencer.\",\"params\":{\"_epoch\":\"The epoch that started verification.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"_epoch\":\"The epoch that was verified.\"}},\"sequencerDelayLimitUpdateReceived(uint256)\":{\"details\":\"This event indicates the sequencer limit updated.\",\"params\":{\"_newSequencerDelayLimit\":\"The new sequencer delay limit.\"}}},\"kind\":\"dev\",\"methods\":{\"censorshipTestStatus((bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Gets the status of the censorship test for claim.\",\"params\":{\"_claim\":\"The claim to test.\"},\"returns\":{\"status\":\"True if the claim passed the censorship test.\"}},\"challenge(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor. Note: epochPeriod must match the VeaInboxArbToGnosis contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\",\"params\":{\"_amb\":\"The address of the AMB contract on Gnosis.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_maxMissingBlocks\":\"The maximum number of blocks that can be missing in a challenge period.\",\"_minChallengePeriod\":\"The minimum time window to challenge a claim.\",\"_routerArbToGnosis\":\"The address of the router on Ethereum that routes from Arbitrum to Gnosis.\",\"_routerChainId\":\"The chain id of the routerArbToGnosis.\",\"_sequencerDelayLimit\":\"The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.\",\"_timeoutEpochs\":\"The epochs before the bridge is considered shutdown.\",\"_weth\":\"The address of the WETH contract on Gnosis.\"}},\"epochAt(uint256)\":{\"details\":\"Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\",\"returns\":{\"epoch\":\"The hash of the claim.\"}},\"epochNow()\":{\"details\":\"Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\",\"returns\":{\"epoch\":\"The hash of the claim.\"}},\"hashClaim((bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Hashes the claim.\",\"params\":{\"_claim\":\"The claim to hash.\"},\"returns\":{\"hashedClaim\":\"The hash of the claim.\"}},\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch to verify.\",\"_stateRoot\":\"The true state root for the epoch.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"_message\":\"The message encoded in the vea inbox as abi.encodeWithSelector(fnSelector, msg.sender, param1, param2, ...)\",\"_msgId\":\"The zero based index of the message in the inbox.\",\"_proof\":\"The merkle proof to prove the message inclusion in the inbox state root.\",\"_to\":\"The address of the contract on Gnosis to call.\"}},\"startVerification(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Start verification for claim for 'epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch of the claim to challenge.\"}},\"updateSequencerDelayLimit(uint256,uint256)\":{\"details\":\"Set the sequencerDelayLimit by receiving a message from the AMB.\",\"params\":{\"_newSequencerDelayLimit\":\"The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\",\"_timestamp\":\"The timestamp of the message.\"}},\"verifySnapshot(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint32,uint8,address))\":{\"notice\":\"Note: Access restricted to AMB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol\":\"VeaOutboxArbToGnosis\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../canonical/gnosis-chain/IAMB.sol\\\";\\nimport \\\"../interfaces/outboxes/IVeaOutboxOnL1.sol\\\";\\nimport \\\"../interfaces/updaters/ISequencerDelayUpdatable.sol\\\";\\nimport \\\"../interfaces/tokens/gnosis/IWETH.sol\\\";\\n\\n/// @dev Vea Outbox From Arbitrum to Gnosis.\\n/// Note: This contract is deployed on Gnosis.\\ncontract VeaOutboxArbToGnosis is IVeaOutboxOnL1, ISequencerDelayUpdatable {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    IAMB public immutable amb; // The address of the AMB contract on Gnosis.\\n    address public immutable routerArbToGnosis; // The address of the router from Arbitrum to Gnosis on ethereum.\\n\\n    IWETH public immutable weth; // The address of the WETH contract on Gnosis.\\n    uint256 public immutable deposit; // The deposit in wei required to submit a claim or challenge\\n    uint256 internal immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 internal immutable depositPlusReward; // 2 * deposit - burn\\n\\n    uint256 internal constant SLOT_TIME = 5; // Gnosis 5 second slot time\\n\\n    uint256 internal immutable routerChainId; // Router chain id for authentication of messages from the AMB.\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable minChallengePeriod; // Minimum time window to challenge a claim, even with a malicious sequencer.\\n\\n    uint256 public immutable timeoutEpochs; // The number of epochs without forward progress before the bridge is considered shutdown.\\n    uint256 public immutable maxMissingBlocks; // The maximum number of blocks that can be missing in a challenge period.\\n\\n    bytes32 public stateRoot; // merkle root of the outbox state\\n    uint256 public latestVerifiedEpoch; // The latest epoch that has been verified.\\n\\n    mapping(uint256 => bytes32) public claimHashes; // epoch => claim\\n    mapping(uint256 => bytes32) public relayed; // msgId/256 => packed replay bitmap, preferred over a simple boolean mapping to save 15k gas per message\\n\\n    uint256 public sequencerDelayLimit; // This is MaxTimeVariation.delaySeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can backdate L2 txns relative to the L1 clock.\\n    uint256 public timestampDelayUpdated; // The timestamp of the last sequencer delay update.\\n\\n    enum CensorshipTestStatus {\\n        Failed,\\n        Passed,\\n        NotStarted,\\n        InProgress\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Watchers check this event to challenge fraud.\\n    /// @param _claimer The address of the claimer.\\n    /// @param _epoch The epoch associated with the claim.\\n    /// @param _stateRoot The state root of the claim.\\n    event Claimed(address indexed _claimer, uint256 _epoch, bytes32 _stateRoot);\\n\\n\\n    /// @dev This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\\n    /// @param _epoch The epoch associated with the challenged claim.\\n    /// @param _challenger The address of the challenger.\\n    event Challenged(uint256 _epoch, address indexed _challenger);\\n\\n    /// @dev This event indicates that a message has been relayed.\\n    /// @param _msgId The msgId of the message that was relayed.\\n    event MessageRelayed(uint64 _msgId);\\n\\n    /// @dev This event indicates that the censorship test started and all challengers are ready even in the worst case scenario of a malicious sequencer.\\n    /// @param _epoch The epoch that started verification.\\n    event VerificationStarted(uint256 _epoch);\\n\\n    /// @dev This events indicates that verification has succeeded. The messages are ready to be relayed.\\n    /// @param _epoch The epoch that was verified.\\n    event Verified(uint256 _epoch);\\n\\n    /// @dev This event indicates the sequencer limit updated.\\n    /// @param _newSequencerDelayLimit The new sequencer delay limit.\\n    event sequencerDelayLimitUpdateReceived(uint256 _newSequencerDelayLimit);\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier OnlyBridgeRunning() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod - latestVerifiedEpoch <= timeoutEpochs, \\\"Bridge Shutdown.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod - latestVerifiedEpoch > timeoutEpochs, \\\"Bridge Running.\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @dev Constructor.\\n    /// Note: epochPeriod must match the VeaInboxArbToGnosis contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\\n    /// @param _deposit The deposit amount to submit a claim in wei.\\n    /// @param _epochPeriod The duration of each epoch.\\n    /// @param _minChallengePeriod The minimum time window to challenge a claim.\\n    /// @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n    /// @param _amb The address of the AMB contract on Gnosis.\\n    /// @param _routerArbToGnosis The address of the router on Ethereum that routes from Arbitrum to Gnosis.\\n    /// @param _sequencerDelayLimit The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.\\n    /// @param _maxMissingBlocks The maximum number of blocks that can be missing in a challenge period.\\n    /// @param _routerChainId The chain id of the routerArbToGnosis.\\n    /// @param _weth The address of the WETH contract on Gnosis.\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _minChallengePeriod,\\n        uint256 _timeoutEpochs,\\n        IAMB _amb,\\n        address _routerArbToGnosis,\\n        uint256 _sequencerDelayLimit,\\n        uint256 _maxMissingBlocks,\\n        uint256 _routerChainId,\\n        IWETH _weth\\n    ) {\\n        deposit = _deposit;\\n        // epochPeriod must match the VeaInboxArbToGnosis contract deployment epochPeriod value.\\n        epochPeriod = _epochPeriod;\\n        timeoutEpochs = _timeoutEpochs;\\n        minChallengePeriod = _minChallengePeriod;\\n        amb = _amb;\\n        routerArbToGnosis = _routerArbToGnosis;\\n        // This value is on another chain, so we can't read it, we trust the deployer to set a correct value.\\n        sequencerDelayLimit = _sequencerDelayLimit; // MaxTimeVariation.delaySeconds from the arbitrum sequencer inbox\\n        maxMissingBlocks = _maxMissingBlocks;\\n        routerChainId = _routerChainId;\\n        weth = _weth;\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n    }\\n\\n    // ************************************* //\\n    // *        Parameter Updates          * //\\n    // ************************************* //\\n\\n    /// @dev Set the sequencerDelayLimit by receiving a message from the AMB.\\n    /// @param _newSequencerDelayLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerDelayLimit(uint256 _newSequencerDelayLimit, uint256 _timestamp) external {\\n        require(msg.sender == address(amb), \\\"Not from bridge.\\\");\\n        require(bytes32(routerChainId) == amb.messageSourceChainId(), \\\"Invalid chain id.\\\");\\n        require(routerArbToGnosis == amb.messageSender(), \\\"Not from router.\\\");\\n        require(timestampDelayUpdated < _timestamp, \\\"Message is outdated.\\\");\\n\\n        if (sequencerDelayLimit != _newSequencerDelayLimit) {\\n            // If _newSequencerDelayLimit > timeout * epochPeriod, then the bridge will shutdown.\\n            sequencerDelayLimit = _newSequencerDelayLimit;\\n            timestampDelayUpdated = _timestamp;\\n            emit sequencerDelayLimitUpdateReceived(_newSequencerDelayLimit);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Submit a claim about the _stateRoot at _epoch and submit a deposit.\\n    /// @param _epoch The epoch for which the claim is made.\\n    /// @param _stateRoot The state root to claim.\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external virtual {\\n        require(weth.transferFrom(msg.sender, address(this), deposit), \\\"Failed WETH transfer.\\\");\\n        require(_epoch == block.timestamp / epochPeriod - 1, \\\"Epoch has not yet passed.\\\");\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claimHashes[_epoch] == bytes32(0), \\\"Claim already made.\\\");\\n\\n        claimHashes[_epoch] = hashClaim(\\n            Claim({\\n                stateRoot: _stateRoot,\\n                claimer: msg.sender,\\n                timestampClaimed: uint32(block.timestamp),\\n                timestampVerification: uint32(0),\\n                blocknumberVerification: uint32(0),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n\\n        emit Claimed(msg.sender, _epoch, _stateRoot);\\n    }\\n\\n    /// @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n    /// @param _epoch The epoch of the claim to challenge.\\n    /// @param _claim The claim associated with the epoch.\\n    function challenge(uint256 _epoch, Claim memory _claim) external payable {\\n        require(weth.transferFrom(msg.sender, address(this), deposit), \\\"Failed WETH transfer.\\\");\\n\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(_claim.honest == Party.None, \\\"Claim already verified.\\\");\\n\\n        _claim.challenger = msg.sender;\\n        claimHashes[_epoch] = hashClaim(_claim);\\n\\n        emit Challenged(_epoch, msg.sender);\\n    }\\n\\n    /// @dev Start verification for claim for 'epoch'.\\n    /// @param _epoch The epoch of the claim to challenge.\\n    /// @param _claim The claim associated with the epoch.\\n    function startVerification(uint256 _epoch, Claim memory _claim) external virtual {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n\\n        // sequencerDelayLimit + epochPeriod is the worst case time to sync the L2 state compared to L1 clock.\\n        // using checked arithmetic incase arbitrum governance sets sequencerDelayLimit to a large value\\n        require(\\n            block.timestamp - uint256(_claim.timestampClaimed) >= sequencerDelayLimit + epochPeriod,\\n            \\\"Claim must wait atleast maxL2StateSyncDelay.\\\"\\n        );\\n\\n        CensorshipTestStatus _censorshipTestStatus = censorshipTestStatus(_claim);\\n        require(\\n            _censorshipTestStatus == CensorshipTestStatus.NotStarted ||\\n                _censorshipTestStatus == CensorshipTestStatus.Failed,\\n            \\\"Claim verification in progress or already completed.\\\"\\n        );\\n\\n        _claim.timestampVerification = uint32(block.timestamp);\\n        _claim.blocknumberVerification = uint32(block.number);\\n\\n        claimHashes[_epoch] = hashClaim(_claim);\\n\\n        emit VerificationStarted(_epoch);\\n    }\\n\\n    /// @dev Resolves the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch of the optimistic claim.\\n    /// @param _claim The claim associated with the epoch.\\n    function verifySnapshot(uint256 _epoch, Claim memory _claim) external virtual OnlyBridgeRunning {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.challenger == address(0), \\\"Claim is challenged.\\\");\\n        require(censorshipTestStatus(_claim) == CensorshipTestStatus.Passed, \\\"Censorship test not passed.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _claim.stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        _claim.honest = Party.Claimer;\\n        claimHashes[_epoch] = hashClaim(_claim);\\n    }\\n\\n    /// Note: Access restricted to AMB.\\n    /// @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    /// @param _claim The claim associated with the epoch.\\n    function resolveDisputedClaim(\\n        uint256 _epoch,\\n        bytes32 _stateRoot,\\n        Claim memory _claim\\n    ) external virtual OnlyBridgeRunning {\\n        // Ethereum -> Gnosis message authentication with the AMB, the canonical Ethereum <-> Gnosis bridge.\\n        // https://docs.tokenbridge.net/amb-bridge/development-of-a-cross-chain-application/how-to-develop-xchain-apps-by-amb#receive-a-method-call-from-the-amb-bridge\\n\\n        require(msg.sender == address(amb), \\\"Not from native Gnosis AMB bridge.\\\");\\n        require(bytes32(routerChainId) == amb.messageSourceChainId(), \\\"Invalid chain id.\\\");\\n        require(routerArbToGnosis == amb.messageSender(), \\\"Not from router.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        if (claimHashes[_epoch] == hashClaim(_claim)) {\\n            if (_claim.stateRoot == _stateRoot) {\\n                _claim.honest = Party.Claimer;\\n            } else if (_claim.challenger != address(0)) {\\n                _claim.honest = Party.Challenger;\\n            }\\n            claimHashes[_epoch] = hashClaim(_claim);\\n        }\\n    }\\n\\n    /// @dev Verifies and relays the message. UNTRUSTED.\\n    /// @param _proof The merkle proof to prove the message inclusion in the inbox state root.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address of the contract on Gnosis to call.\\n    /// @param _message The message encoded in the vea inbox as abi.encodeWithSelector(fnSelector, msg.sender, param1, param2, ...)\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external {\\n        require(_proof.length < 64, \\\"Proof too long.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(_msgId, _to, _message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < _proof.length; i++) {\\n                bytes32 proofElement = _proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero-based index of the message in the inbox.\\n        // msgId is also used as an index in the relayed bitmap to prevent replay.\\n        // Note: a bitmap is used instead of a simple boolean mapping to save 15k gas per message.\\n\\n        uint256 relayIndex = _msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = _msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = _to.call(_message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(_msgId);\\n    }\\n\\n    /// @dev Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    /// @param _claim The claim associated with the epoch.\\n    function withdrawClaimDeposit(uint256 _epoch, Claim calldata _claim) external virtual {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.Claimer, \\\"Claim failed.\\\");\\n\\n        delete claimHashes[_epoch];\\n\\n        if (_claim.challenger != address(0)) {\\n            weth.burn(burn); // no return value to check\\n            require(weth.transfer(_claim.claimer, depositPlusReward), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n        } else {\\n            require(weth.transfer(_claim.claimer, deposit), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n        }\\n    }\\n\\n    /// @dev Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\\n    /// @param _epoch The epoch associated with the challenge deposit to withraw.\\n    /// @param _claim The claim associated with the epoch.\\n    function withdrawChallengeDeposit(uint256 _epoch, Claim calldata _claim) external {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.Challenger, \\\"Challenge failed.\\\");\\n\\n        delete claimHashes[_epoch];\\n\\n        weth.burn(burn); // no return value to check\\n        require(weth.transfer(_claim.challenger, depositPlusReward), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n    }\\n\\n    /// @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    /// @param _claim The claim associated with the epoch.\\n    function withdrawClaimerEscapeHatch(uint256 _epoch, Claim memory _claim) external OnlyBridgeShutdown {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (_claim.claimer != address(0)) {\\n            if (_claim.challenger == address(0)) {\\n                delete claimHashes[_epoch];\\n                require(weth.transfer(_claim.claimer, deposit), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n            } else {\\n                address claimer = _claim.claimer;\\n                _claim.claimer = address(0);\\n                claimHashes[_epoch] == hashClaim(_claim);\\n                require(weth.transfer(claimer, deposit), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n            }\\n        }\\n    }\\n\\n    /// @dev When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    /// @param _claim The claim associated with the epoch.\\n    function withdrawChallengerEscapeHatch(uint256 _epoch, Claim memory _claim) external OnlyBridgeShutdown {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (_claim.challenger != address(0)) {\\n            if (_claim.claimer == address(0)) {\\n                delete claimHashes[_epoch];\\n                require(weth.transfer(_claim.challenger, deposit), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n            } else {\\n                address challenger = _claim.challenger;\\n                _claim.challenger = address(0);\\n                claimHashes[_epoch] == hashClaim(_claim);\\n                require(weth.transfer(challenger, deposit), \\\"Failed WETH transfer.\\\"); // should revert on errors, but we check return value anyways\\n            }\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Pure / Views            * //\\n    // ************************************* //\\n\\n    /// @dev Hashes the claim.\\n    /// @param _claim The claim to hash.\\n    /// @return hashedClaim The hash of the claim.\\n    function hashClaim(Claim memory _claim) public pure returns (bytes32 hashedClaim) {\\n        return\\n            hashedClaim = keccak256(\\n                abi.encodePacked(\\n                    _claim.stateRoot,\\n                    _claim.claimer,\\n                    _claim.timestampClaimed,\\n                    _claim.timestampVerification,\\n                    _claim.blocknumberVerification,\\n                    _claim.honest,\\n                    _claim.challenger\\n                )\\n            );\\n    }\\n\\n    /// @dev Gets the status of the censorship test for claim.\\n    /// @param _claim The claim to test.\\n    /// @return status True if the claim passed the censorship test.\\n    function censorshipTestStatus(Claim memory _claim) public view returns (CensorshipTestStatus status) {\\n        unchecked {\\n            if (uint256(_claim.timestampVerification) == 0) status = CensorshipTestStatus.NotStarted;\\n            else if (block.timestamp - uint256(_claim.timestampVerification) < minChallengePeriod)\\n                status = CensorshipTestStatus.InProgress;\\n            else {\\n                uint256 expectedBlocks = uint256(_claim.blocknumberVerification) +\\n                    (block.timestamp - uint256(_claim.timestampVerification)) /\\n                    SLOT_TIME;\\n                uint256 actualBlocks = block.number;\\n                if (expectedBlocks - actualBlocks <= maxMissingBlocks) {\\n                    status = CensorshipTestStatus.Passed;\\n                } else {\\n                    status = CensorshipTestStatus.Failed;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\\n    /// @return epoch The hash of the claim.\\n    function epochNow() external view returns (uint256 epoch) {\\n        epoch = block.timestamp / epochPeriod;\\n    }\\n\\n    /// @dev Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\\n    /// @return epoch The hash of the claim.\\n    function epochAt(uint256 timestamp) external view returns (uint256 epoch) {\\n        epoch = timestamp / epochPeriod;\\n    }\\n}\\n\",\"keccak256\":\"0x621689dc95671db595076306497c677a91238979e114854dc3292ec984286a29\",\"license\":\"MIT\"},\"src/canonical/gnosis-chain/IAMB.sol\":{\"content\":\"// https://docs.gnosischain.com/bridges/tokenbridge/amb-bridge#gnosis\\n// https://github.com/omni/tokenbridge-contracts/blob/908a48107919d4ab127f9af07d44d47eac91547e/contracts/interfaces/IAMB.sol\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IAMB {\\n    function requireToPassMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\\n\\n    function maxGasPerTx() external view returns (uint256);\\n\\n    function messageSender() external view returns (address);\\n\\n    function messageSourceChainId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x529d45e46ca0c046c32b296b35ae8073c4a999ef37510545ec44d26e78deca0d\"},\"src/interfaces/outboxes/IVeaOutboxOnL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../types/VeaClaim.sol\\\";\\n\\n/// @dev Interface of the Vea Outbox on L1 chains like Ethereum, Gnosis, Polygon POS where storage is expensive.\\ninterface IVeaOutboxOnL1 {\\n    /// @dev Verifies and relays the message.\\n    /// Note: Gateways expect first argument of message call to be the arbitrum message sender, used for authentication.\\n    /// @param _proof The merkle proof to prove the message.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address to send the message to.\\n    /// @param _message The message to relay.\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external;\\n\\n    /// @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n    /// Note: Access restricted to canonical bridge.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    /// @param _claim The claim associated with the epoch.\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot, Claim memory _claim) external;\\n}\\n\",\"keccak256\":\"0x52f714405dbb6f5953f7e59bf7139742837c2f055fc090971421d931a5289b51\",\"license\":\"MIT\"},\"src/interfaces/tokens/gnosis/IWETH.sol\":{\"content\":\"// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5daaf60d11ee2075260d0f3adfb22b1c536db983/contracts/token/ERC20/BurnableToken.sol\\n// implementation: https://gnosisscan.io/address/0xf8d1677c8a0c961938bf2f9adc3f3cfda759a9d9#code\\n// proxy: https://gnosisscan.io/token/0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1#readProxyContract\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ninterface IWETH {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Burn(address indexed burner, uint256 value);\\n\\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param _value The amount of token to be burned.\\n     */\\n    function burn(uint256 _value) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd7cb8c8585a387464c451c2ff81ad3f9f02e291fe0dad802ff84646ff18d1eb2\"},\"src/interfaces/types/VeaClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nenum Party {\\n    None,\\n    Claimer,\\n    Challenger\\n}\\n\\nstruct Claim {\\n    bytes32 stateRoot;\\n    address claimer;\\n    uint32 timestampClaimed;\\n    uint32 timestampVerification;\\n    uint32 blocknumberVerification;\\n    Party honest;\\n    address challenger;\\n}\\n\",\"keccak256\":\"0x1b25222d0ebdb4beed6cd844ea1f262c89e4c002e7520972e6b79083eeed6418\",\"license\":\"MIT\"},\"src/interfaces/updaters/ISequencerDelayUpdatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of a contract which is updatable, receiving parameter updates from an L1 contract through a cross-chain call.\\n/// @dev eg. Arbitrum (L2) -> Ethereum (L1) -> Gnosis (L1), the veaOutbox on Gnosis will be an ISequencerDelayUpdatable contract which receives updates from the router on Ethereum.\\ninterface ISequencerDelayUpdatable {\\n    /// @dev Updates the sequencer limit.\\n    /// Note: Access restricted to ensure the argument is passed from the Sequencer contract.\\n    /// @param _newSequencerDelayLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerDelayLimit(uint256 _newSequencerDelayLimit, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0xa99728056c1360f321ddac49c565ed0d4f2094569aaca3a2523df9f833e83925\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b5060405162002b9438038062002b948339810160408190526200003591620000f2565b60e08a90526101608990526101a08790526101808890526001600160a01b0380871660805285811660a05260048590556101c0849052610140839052811660c0526200008360028b620001a3565b610100819052620000968b6002620001c6565b620000a29190620001e6565b6101205261016051600190620000b99042620001a3565b620000c59190620001e6565b60015550620001fc98505050505050505050565b6001600160a01b0381168114620000ef57600080fd5b50565b6000806000806000806000806000806101408b8d0312156200011357600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b01516200013c81620000d9565b60a08c01519096506200014f81620000d9565b8095505060c08b0151935060e08b015192506101008b015191506101208b01516200017a81620000d9565b809150509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b600082620001c157634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417620001e057620001e06200018d565b92915050565b81810381811115620001e057620001e06200018d565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516127f96200039b6000396000818161047201526121f60152600081816104a60152818161084801528181611ad501528181611cc90152611f8801526000818161052e015261218a0152600081816104da0152818161086c01528181610bfd01528181610fd70152818161189d01528181611a5601528181611af901528181611ced0152611fac0152600081816109e30152610d16015260006115a70152600081816114b6015261170a0152600081816105620152818161063601528181610f190152818161183a01528181611e4201528181611ed701526121010152600081816103450152818161065c01528181610f3f015281816114dc01528181611548015281816117300152818161179c015281816117df01528181611e6801528181611efd015261212701526000818161059601528181610ad00152610e0301526000818161020e015281816108e70152818161096101528181610a4501528181610c3201528181610c940152610d7801526127f96000f3fe6080604052600436106101c25760003560e01c8063541adcca116100f7578063b5b7a18411610095578063d5e6a9df11610064578063d5e6a9df14610584578063da2b7bc4146105b8578063df19e6ff146105d8578063e813a7551461060557600080fd5b8063b5b7a184146104c8578063b633b944146104fc578063c2114a161461051c578063d0e30db01461055057600080fd5b8063930f28af116100d1578063930f28af1461042a5780639588eca21461044a578063aa22a1c614610460578063b044397e1461049457600080fd5b8063541adcca146103c75780637ffc2a6e146103e757806390df63b7146103fd57600080fd5b806331d14457116101645780633fc8cef31161013e5780633fc8cef3146103335780634788cb381461036757806349b4299e146103875780634a439cfe146103a757600080fd5b806331d14457146102d357806331ddf743146102f35780633ce43cfd1461031357600080fd5b8063222ae786116101a0578063222ae7861461024d5780632639c0601461027057806327ee6bdd1461029d5780632c192519146102b357600080fd5b806301139b68146101c75780630f0adca5146101dc5780631062b39a146101fc575b600080fd5b6101da6101d5366004612333565b61061b565b005b3480156101e857600080fd5b506101da6101f7366004612361565b610846565b34801561020857600080fd5b506102307f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025957600080fd5b50610262610bf6565b604051908152602001610244565b34801561027c57600080fd5b5061026261028b366004612398565b60026020526000908152604090205481565b3480156102a957600080fd5b5061026260015481565b3480156102bf57600080fd5b506101da6102ce3660046123b1565b610c27565b3480156102df57600080fd5b506101da6102ee3660046123b1565b610efe565b3480156102ff57600080fd5b506101da61030e366004612434565b611154565b34801561031f57600080fd5b506101da61032e3660046124f6565b6113f4565b34801561033f57600080fd5b506102307f000000000000000000000000000000000000000000000000000000000000000081565b34801561037357600080fd5b506101da6103823660046124f6565b61162e565b34801561039357600080fd5b506101da6103a2366004612333565b611866565b3480156103b357600080fd5b506102626103c2366004612398565b611a4f565b3480156103d357600080fd5b506102626103e236600461252f565b611a81565b3480156103f357600080fd5b5061026260055481565b34801561040957600080fd5b50610262610418366004612398565b60036020526000908152604090205481565b34801561043657600080fd5b506101da610445366004612333565b611ad3565b34801561045657600080fd5b5061026260005481565b34801561046c57600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b3480156104a057600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b3480156104d457600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b34801561050857600080fd5b506101da610517366004612333565b611cc7565b34801561052857600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b34801561055c57600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b34801561059057600080fd5b506102307f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c457600080fd5b506101da6105d3366004612333565b611f86565b3480156105e457600080fd5b506105f86105f336600461252f565b61216c565b6040516102449190612568565b34801561061157600080fd5b5061026260045481565b6040516323b872dd60e01b81523360048201523060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190612582565b6106f65760405162461bcd60e51b81526004016106ed906125a4565b60405180910390fd5b6106ff81611a81565b6000838152600260205260409020541461072b5760405162461bcd60e51b81526004016106ed906125d3565b60c08101516001600160a01b0316156107865760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016106ed565b60008160a00151600281111561079e5761079e612552565b146107eb5760405162461bcd60e51b815260206004820152601760248201527f436c61696d20616c72656164792076657269666965642e00000000000000000060448201526064016106ed565b3360c08201526107fa81611a81565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d791015b60405180910390a25050565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281610899576108996125fb565b040311156108dc5760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016106ed565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461095f5760405162461bcd60e51b815260206004820152602260248201527f4e6f742066726f6d206e617469766520476e6f73697320414d42206272696467604482015261329760f11b60648201526084016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612611565b7f000000000000000000000000000000000000000000000000000000000000000014610a435760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b4b71034b21760791b60448201526064016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac5919061262a565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b385760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b6903937baba32b91760811b60448201526064016106ed565b60015483118015610b4857508115155b15610b8b57600183905560008290556040518381527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610b9481611a81565b60008481526002602052604090205403610bf1578051829003610bbd57600160a0820152610bd8565b60c08101516001600160a01b031615610bd857600260a08201525b610be181611a81565b6000848152600260205260409020555b505050565b6000610c227f00000000000000000000000000000000000000000000000000000000000000004261265d565b905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c925760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190612611565b7f000000000000000000000000000000000000000000000000000000000000000014610d765760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b4b71034b21760791b60448201526064016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df8919061262a565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e6b5760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b6903937baba32b91760811b60448201526064016106ed565b8060055410610eb35760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b60448201526064016106ed565b8160045414610efa57600482905560058190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa7079060200160405180910390a15b5050565b6040516323b872dd60e01b81523360048201523060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612582565b610fd05760405162461bcd60e51b81526004016106ed906125a4565b6001610ffc7f00000000000000000000000000000000000000000000000000000000000000004261265d565b611006919061267f565b82146110545760405162461bcd60e51b815260206004820152601960248201527f45706f636820686173206e6f7420796574207061737365642e0000000000000060448201526064016106ed565b806110715760405162461bcd60e51b81526004016106ed906125d3565b600082815260026020526040902054156110c35760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016106ed565b6040805160e0810182528281523360208201524263ffffffff16918101919091526000606082018190526080820181905260a0820181905260c082015261110990611a81565b60008381526002602090815260409182902092909255805184815291820183905233917fd95107f4584744c6c893a04c43058aadd1ce8aac8ca5d64140eaf277de6c1d57910161083a565b604085106111965760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016106ed565b6000848484846040516020016111af9493929190612692565b604051602081830303815290604052805190602001209050806000526020600020905060005b8681101561122f5760008888838181106111f1576111f16126d4565b9050602002013590508281111561121657826000528060205260406000209250611226565b8060005282602052604060002092505b506001016111d5565b5080600054146112725760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016106ed565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c600116156112e75760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016106ed565b6000838152600360205260408082206001851b84179055516001600160a01b0389169061131790899089906126ea565b6000604051808303816000865af19150503d8060008114611354576040519150601f19603f3d011682016040523d82523d6000602084013e611359565b606091505b50509050806113aa5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016106ed565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b6114066103e23683900383018361252f565b600083815260026020526040902054146114325760405162461bcd60e51b81526004016106ed906125d3565b600261144460c0830160a084016126fa565b600281111561145557611455612552565b146114965760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016106ed565b6000828152600260205260408082209190915551630852cd8d60e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063a9059cbb905061158160e0840160c08501612715565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b6020604051808303816000875af11580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190612582565b610efa5760405162461bcd60e51b81526004016106ed906125a4565b6116406103e23683900383018361252f565b6000838152600260205260409020541461166c5760405162461bcd60e51b81526004016106ed906125d3565b600161167e60c0830160a084016126fa565b600281111561168f5761168f612552565b146116cc5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016106ed565b60008281526002602052604081208190556116ed60e0830160c08401612715565b6001600160a01b0316146117d557604051630852cd8d60e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561177c57600080fd5b505af1158015611790573d6000803e3d6000fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063a9059cbb90506115816040840160208501612715565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb6118146040840160208501612715565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044016115cf565b61186f81611a81565b6000838152600260205260409020541461189b5760405162461bcd60e51b81526004016106ed906125d3565b7f00000000000000000000000000000000000000000000000000000000000000006004546118c99190612732565b60408201516118de9063ffffffff164261267f565b10156119415760405162461bcd60e51b815260206004820152602c60248201527f436c61696d206d75737420776169742061746c65617374206d61784c3253746160448201526b3a32a9bcb731a232b630bc9760a11b60648201526084016106ed565b600061194c8261216c565b9050600281600381111561196257611962612552565b148061197f5750600081600381111561197d5761197d612552565b145b6119e85760405162461bcd60e51b815260206004820152603460248201527f436c61696d20766572696669636174696f6e20696e2070726f6772657373206f604482015273391030b63932b0b23c9031b7b6b83632ba32b21760611b60648201526084016106ed565b63ffffffff428116606084015243166080830152611a0582611a81565b60008481526002602090815260409182902092909255518481527f37b700b61b9b4710dddb0c3316b2be7ef6088ed4b1d7bfe0fb98be8f9a163e16910160405180910390a1505050565b6000611a7b7f00000000000000000000000000000000000000000000000000000000000000008361265d565b92915050565b80516020808301516040808501516060860151608087015160a088015160c08901519451600098611ab6989097969101612745565b604051602081830303815290604052805190602001209050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281611b2657611b266125fb565b04031115611b695760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016106ed565b611b7281611a81565b60008381526002602052604090205414611b9e5760405162461bcd60e51b81526004016106ed906125d3565b60c08101516001600160a01b031615611bf05760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016106ed565b6001611bfb8261216c565b6003811115611c0c57611c0c612552565b14611c595760405162461bcd60e51b815260206004820152601b60248201527f43656e736f72736869702074657374206e6f74207061737365642e000000000060448201526064016106ed565b600154821115611ca157600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b600160a0820152611cb181611a81565b6000928352600260205260409092209190915550565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281611d1a57611d1a6125fb565b040311611d5b5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106ed565b611d6481611a81565b60008381526002602052604090205414611d905760405162461bcd60e51b81526004016106ed906125d3565b60008160a001516002811115611da857611da8612552565b14611de75760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016106ed565b60c08101516001600160a01b031615610efa5760208101516001600160a01b0316611e99576000828152600260205260408082209190915560c0820151905163a9059cbb60e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016115cf565b60c0810180516000909152611ead82611a81565b506000839052600260205260405163a9059cbb60e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190612582565b610bf15760405162461bcd60e51b81526004016106ed906125a4565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281611fd957611fd96125fb565b04031161201a5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106ed565b61202381611a81565b6000838152600260205260409020541461204f5760405162461bcd60e51b81526004016106ed906125d3565b60008160a00151600281111561206757612067612552565b146120a65760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016106ed565b60208101516001600160a01b031615610efa5760c08101516001600160a01b031661215857600082815260026020908152604080832092909255820151905163a9059cbb60e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016115cf565b6020810180516000909152611ead82611a81565b6000816060015163ffffffff1660000361218857506002919050565b7f0000000000000000000000000000000000000000000000000000000000000000826060015163ffffffff16420310156121c457506003919050565b60006005836060015163ffffffff164203816121e2576121e26125fb565b608085015163ffffffff16919004019050437f000000000000000000000000000000000000000000000000000000000000000081830311612226576001925061222b565b600092505b50505b919050565b6001600160a01b038116811461224857600080fd5b50565b803561222e81612233565b803563ffffffff8116811461222e57600080fd5b80356003811061222e57600080fd5b600060e0828403121561228b57600080fd5b60405160e0810181811067ffffffffffffffff821117156122bc57634e487b7160e01b600052604160045260246000fd5b604052823581529050806122d26020840161224b565b60208201526122e360408401612256565b60408201526122f460608401612256565b606082015261230560808401612256565b608082015261231660a0840161226a565b60a082015261232760c0840161224b565b60c08201525092915050565b600080610100838503121561234757600080fd5b823591506123588460208501612279565b90509250929050565b6000806000610120848603121561237757600080fd5b833592506020840135915061238f8560408601612279565b90509250925092565b6000602082840312156123aa57600080fd5b5035919050565b600080604083850312156123c457600080fd5b50508035926020909101359150565b803567ffffffffffffffff8116811461222e57600080fd5b60008083601f8401126123fd57600080fd5b50813567ffffffffffffffff81111561241557600080fd5b60208301915083602082850101111561242d57600080fd5b9250929050565b6000806000806000806080878903121561244d57600080fd5b863567ffffffffffffffff8082111561246557600080fd5b818901915089601f83011261247957600080fd5b81358181111561248857600080fd5b8a60208260051b850101111561249d57600080fd5b602083019850809750506124b360208a016123d3565b95506124c160408a0161224b565b945060608901359150808211156124d757600080fd5b506124e489828a016123eb565b979a9699509497509295939492505050565b60008082840361010081121561250b57600080fd5b8335925060e0601f198201121561252157600080fd5b506020830190509250929050565b600060e0828403121561254157600080fd5b61254b8383612279565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061257c5761257c612552565b91905290565b60006020828403121561259457600080fd5b8151801515811461254b57600080fd5b6020808252601590820152742330b4b632b2102ba2aa24103a3930b739b332b91760591b604082015260600190565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60006020828403121561262357600080fd5b5051919050565b60006020828403121561263c57600080fd5b815161254b81612233565b634e487b7160e01b600052601160045260246000fd5b60008261267a57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611a7b57611a7b612647565b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b60006020828403121561270c57600080fd5b61254b8261226a565b60006020828403121561272757600080fd5b813561254b81612233565b80820180821115611a7b57611a7b612647565b87815260006bffffffffffffffffffffffff19808960601b16602084015263ffffffff60e01b808960e01b166034850152808860e01b166038850152808760e01b16603c850152506003851061279d5761279d612552565b60f89490941b60408301525060609190911b90911660418201526055019594505050505056fea26469706673582212202838608f469e27ff16acc37107c1d8f295dd023bfd5b117a8b3b8510ff738c0064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c8063541adcca116100f7578063b5b7a18411610095578063d5e6a9df11610064578063d5e6a9df14610584578063da2b7bc4146105b8578063df19e6ff146105d8578063e813a7551461060557600080fd5b8063b5b7a184146104c8578063b633b944146104fc578063c2114a161461051c578063d0e30db01461055057600080fd5b8063930f28af116100d1578063930f28af1461042a5780639588eca21461044a578063aa22a1c614610460578063b044397e1461049457600080fd5b8063541adcca146103c75780637ffc2a6e146103e757806390df63b7146103fd57600080fd5b806331d14457116101645780633fc8cef31161013e5780633fc8cef3146103335780634788cb381461036757806349b4299e146103875780634a439cfe146103a757600080fd5b806331d14457146102d357806331ddf743146102f35780633ce43cfd1461031357600080fd5b8063222ae786116101a0578063222ae7861461024d5780632639c0601461027057806327ee6bdd1461029d5780632c192519146102b357600080fd5b806301139b68146101c75780630f0adca5146101dc5780631062b39a146101fc575b600080fd5b6101da6101d5366004612333565b61061b565b005b3480156101e857600080fd5b506101da6101f7366004612361565b610846565b34801561020857600080fd5b506102307f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025957600080fd5b50610262610bf6565b604051908152602001610244565b34801561027c57600080fd5b5061026261028b366004612398565b60026020526000908152604090205481565b3480156102a957600080fd5b5061026260015481565b3480156102bf57600080fd5b506101da6102ce3660046123b1565b610c27565b3480156102df57600080fd5b506101da6102ee3660046123b1565b610efe565b3480156102ff57600080fd5b506101da61030e366004612434565b611154565b34801561031f57600080fd5b506101da61032e3660046124f6565b6113f4565b34801561033f57600080fd5b506102307f000000000000000000000000000000000000000000000000000000000000000081565b34801561037357600080fd5b506101da6103823660046124f6565b61162e565b34801561039357600080fd5b506101da6103a2366004612333565b611866565b3480156103b357600080fd5b506102626103c2366004612398565b611a4f565b3480156103d357600080fd5b506102626103e236600461252f565b611a81565b3480156103f357600080fd5b5061026260055481565b34801561040957600080fd5b50610262610418366004612398565b60036020526000908152604090205481565b34801561043657600080fd5b506101da610445366004612333565b611ad3565b34801561045657600080fd5b5061026260005481565b34801561046c57600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b3480156104a057600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b3480156104d457600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b34801561050857600080fd5b506101da610517366004612333565b611cc7565b34801561052857600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b34801561055c57600080fd5b506102627f000000000000000000000000000000000000000000000000000000000000000081565b34801561059057600080fd5b506102307f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c457600080fd5b506101da6105d3366004612333565b611f86565b3480156105e457600080fd5b506105f86105f336600461252f565b61216c565b6040516102449190612568565b34801561061157600080fd5b5061026260045481565b6040516323b872dd60e01b81523360048201523060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190612582565b6106f65760405162461bcd60e51b81526004016106ed906125a4565b60405180910390fd5b6106ff81611a81565b6000838152600260205260409020541461072b5760405162461bcd60e51b81526004016106ed906125d3565b60c08101516001600160a01b0316156107865760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016106ed565b60008160a00151600281111561079e5761079e612552565b146107eb5760405162461bcd60e51b815260206004820152601760248201527f436c61696d20616c72656164792076657269666965642e00000000000000000060448201526064016106ed565b3360c08201526107fa81611a81565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d791015b60405180910390a25050565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281610899576108996125fb565b040311156108dc5760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016106ed565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461095f5760405162461bcd60e51b815260206004820152602260248201527f4e6f742066726f6d206e617469766520476e6f73697320414d42206272696467604482015261329760f11b60648201526084016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612611565b7f000000000000000000000000000000000000000000000000000000000000000014610a435760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b4b71034b21760791b60448201526064016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac5919061262a565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b385760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b6903937baba32b91760811b60448201526064016106ed565b60015483118015610b4857508115155b15610b8b57600183905560008290556040518381527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610b9481611a81565b60008481526002602052604090205403610bf1578051829003610bbd57600160a0820152610bd8565b60c08101516001600160a01b031615610bd857600260a08201525b610be181611a81565b6000848152600260205260409020555b505050565b6000610c227f00000000000000000000000000000000000000000000000000000000000000004261265d565b905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c925760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190612611565b7f000000000000000000000000000000000000000000000000000000000000000014610d765760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b4b71034b21760791b60448201526064016106ed565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df8919061262a565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e6b5760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b6903937baba32b91760811b60448201526064016106ed565b8060055410610eb35760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b60448201526064016106ed565b8160045414610efa57600482905560058190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa7079060200160405180910390a15b5050565b6040516323b872dd60e01b81523360048201523060248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612582565b610fd05760405162461bcd60e51b81526004016106ed906125a4565b6001610ffc7f00000000000000000000000000000000000000000000000000000000000000004261265d565b611006919061267f565b82146110545760405162461bcd60e51b815260206004820152601960248201527f45706f636820686173206e6f7420796574207061737365642e0000000000000060448201526064016106ed565b806110715760405162461bcd60e51b81526004016106ed906125d3565b600082815260026020526040902054156110c35760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016106ed565b6040805160e0810182528281523360208201524263ffffffff16918101919091526000606082018190526080820181905260a0820181905260c082015261110990611a81565b60008381526002602090815260409182902092909255805184815291820183905233917fd95107f4584744c6c893a04c43058aadd1ce8aac8ca5d64140eaf277de6c1d57910161083a565b604085106111965760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016106ed565b6000848484846040516020016111af9493929190612692565b604051602081830303815290604052805190602001209050806000526020600020905060005b8681101561122f5760008888838181106111f1576111f16126d4565b9050602002013590508281111561121657826000528060205260406000209250611226565b8060005282602052604060002092505b506001016111d5565b5080600054146112725760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016106ed565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c600116156112e75760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016106ed565b6000838152600360205260408082206001851b84179055516001600160a01b0389169061131790899089906126ea565b6000604051808303816000865af19150503d8060008114611354576040519150601f19603f3d011682016040523d82523d6000602084013e611359565b606091505b50509050806113aa5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016106ed565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b6114066103e23683900383018361252f565b600083815260026020526040902054146114325760405162461bcd60e51b81526004016106ed906125d3565b600261144460c0830160a084016126fa565b600281111561145557611455612552565b146114965760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016106ed565b6000828152600260205260408082209190915551630852cd8d60e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063a9059cbb905061158160e0840160c08501612715565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b6020604051808303816000875af11580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190612582565b610efa5760405162461bcd60e51b81526004016106ed906125a4565b6116406103e23683900383018361252f565b6000838152600260205260409020541461166c5760405162461bcd60e51b81526004016106ed906125d3565b600161167e60c0830160a084016126fa565b600281111561168f5761168f612552565b146116cc5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016106ed565b60008281526002602052604081208190556116ed60e0830160c08401612715565b6001600160a01b0316146117d557604051630852cd8d60e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561177c57600080fd5b505af1158015611790573d6000803e3d6000fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063a9059cbb90506115816040840160208501612715565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb6118146040840160208501612715565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044016115cf565b61186f81611a81565b6000838152600260205260409020541461189b5760405162461bcd60e51b81526004016106ed906125d3565b7f00000000000000000000000000000000000000000000000000000000000000006004546118c99190612732565b60408201516118de9063ffffffff164261267f565b10156119415760405162461bcd60e51b815260206004820152602c60248201527f436c61696d206d75737420776169742061746c65617374206d61784c3253746160448201526b3a32a9bcb731a232b630bc9760a11b60648201526084016106ed565b600061194c8261216c565b9050600281600381111561196257611962612552565b148061197f5750600081600381111561197d5761197d612552565b145b6119e85760405162461bcd60e51b815260206004820152603460248201527f436c61696d20766572696669636174696f6e20696e2070726f6772657373206f604482015273391030b63932b0b23c9031b7b6b83632ba32b21760611b60648201526084016106ed565b63ffffffff428116606084015243166080830152611a0582611a81565b60008481526002602090815260409182902092909255518481527f37b700b61b9b4710dddb0c3316b2be7ef6088ed4b1d7bfe0fb98be8f9a163e16910160405180910390a1505050565b6000611a7b7f00000000000000000000000000000000000000000000000000000000000000008361265d565b92915050565b80516020808301516040808501516060860151608087015160a088015160c08901519451600098611ab6989097969101612745565b604051602081830303815290604052805190602001209050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281611b2657611b266125fb565b04031115611b695760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016106ed565b611b7281611a81565b60008381526002602052604090205414611b9e5760405162461bcd60e51b81526004016106ed906125d3565b60c08101516001600160a01b031615611bf05760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016106ed565b6001611bfb8261216c565b6003811115611c0c57611c0c612552565b14611c595760405162461bcd60e51b815260206004820152601b60248201527f43656e736f72736869702074657374206e6f74207061737365642e000000000060448201526064016106ed565b600154821115611ca157600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b600160a0820152611cb181611a81565b6000928352600260205260409092209190915550565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281611d1a57611d1a6125fb565b040311611d5b5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106ed565b611d6481611a81565b60008381526002602052604090205414611d905760405162461bcd60e51b81526004016106ed906125d3565b60008160a001516002811115611da857611da8612552565b14611de75760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016106ed565b60c08101516001600160a01b031615610efa5760208101516001600160a01b0316611e99576000828152600260205260408082209190915560c0820151905163a9059cbb60e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016115cf565b60c0810180516000909152611ead82611a81565b506000839052600260205260405163a9059cbb60e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190612582565b610bf15760405162461bcd60e51b81526004016106ed906125a4565b7f00000000000000000000000000000000000000000000000000000000000000006001547f00000000000000000000000000000000000000000000000000000000000000004281611fd957611fd96125fb565b04031161201a5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106ed565b61202381611a81565b6000838152600260205260409020541461204f5760405162461bcd60e51b81526004016106ed906125d3565b60008160a00151600281111561206757612067612552565b146120a65760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016106ed565b60208101516001600160a01b031615610efa5760c08101516001600160a01b031661215857600082815260026020908152604080832092909255820151905163a9059cbb60e01b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016115cf565b6020810180516000909152611ead82611a81565b6000816060015163ffffffff1660000361218857506002919050565b7f0000000000000000000000000000000000000000000000000000000000000000826060015163ffffffff16420310156121c457506003919050565b60006005836060015163ffffffff164203816121e2576121e26125fb565b608085015163ffffffff16919004019050437f000000000000000000000000000000000000000000000000000000000000000081830311612226576001925061222b565b600092505b50505b919050565b6001600160a01b038116811461224857600080fd5b50565b803561222e81612233565b803563ffffffff8116811461222e57600080fd5b80356003811061222e57600080fd5b600060e0828403121561228b57600080fd5b60405160e0810181811067ffffffffffffffff821117156122bc57634e487b7160e01b600052604160045260246000fd5b604052823581529050806122d26020840161224b565b60208201526122e360408401612256565b60408201526122f460608401612256565b606082015261230560808401612256565b608082015261231660a0840161226a565b60a082015261232760c0840161224b565b60c08201525092915050565b600080610100838503121561234757600080fd5b823591506123588460208501612279565b90509250929050565b6000806000610120848603121561237757600080fd5b833592506020840135915061238f8560408601612279565b90509250925092565b6000602082840312156123aa57600080fd5b5035919050565b600080604083850312156123c457600080fd5b50508035926020909101359150565b803567ffffffffffffffff8116811461222e57600080fd5b60008083601f8401126123fd57600080fd5b50813567ffffffffffffffff81111561241557600080fd5b60208301915083602082850101111561242d57600080fd5b9250929050565b6000806000806000806080878903121561244d57600080fd5b863567ffffffffffffffff8082111561246557600080fd5b818901915089601f83011261247957600080fd5b81358181111561248857600080fd5b8a60208260051b850101111561249d57600080fd5b602083019850809750506124b360208a016123d3565b95506124c160408a0161224b565b945060608901359150808211156124d757600080fd5b506124e489828a016123eb565b979a9699509497509295939492505050565b60008082840361010081121561250b57600080fd5b8335925060e0601f198201121561252157600080fd5b506020830190509250929050565b600060e0828403121561254157600080fd5b61254b8383612279565b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061257c5761257c612552565b91905290565b60006020828403121561259457600080fd5b8151801515811461254b57600080fd5b6020808252601590820152742330b4b632b2102ba2aa24103a3930b739b332b91760591b604082015260600190565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60006020828403121561262357600080fd5b5051919050565b60006020828403121561263c57600080fd5b815161254b81612233565b634e487b7160e01b600052601160045260246000fd5b60008261267a57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611a7b57611a7b612647565b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b60006020828403121561270c57600080fd5b61254b8261226a565b60006020828403121561272757600080fd5b813561254b81612233565b80820180821115611a7b57611a7b612647565b87815260006bffffffffffffffffffffffff19808960601b16602084015263ffffffff60e01b808960e01b166034850152808860e01b166038850152808760e01b16603c850152506003851061279d5761279d612552565b60f89490941b60408301525060609190911b90911660418201526055019594505050505056fea26469706673582212202838608f469e27ff16acc37107c1d8f295dd023bfd5b117a8b3b8510ff738c0064736f6c63430008120033",
  "devdoc": {
    "details": "Vea Outbox From Arbitrum to Gnosis. Note: This contract is deployed on Gnosis.",
    "events": {
      "Challenged(uint256,address)": {
        "details": "This event indicates that `sendSnapshot(epoch)` should be called in the inbox.",
        "params": {
          "_challenger": "The address of the challenger.",
          "_epoch": "The epoch associated with the challenged claim."
        }
      },
      "Claimed(address,uint256,bytes32)": {
        "details": "Watchers check this event to challenge fraud.",
        "params": {
          "_claimer": "The address of the claimer.",
          "_epoch": "The epoch associated with the claim.",
          "_stateRoot": "The state root of the claim."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "_msgId": "The msgId of the message that was relayed."
        }
      },
      "VerificationStarted(uint256)": {
        "details": "This event indicates that the censorship test started and all challengers are ready even in the worst case scenario of a malicious sequencer.",
        "params": {
          "_epoch": "The epoch that started verification."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "_epoch": "The epoch that was verified."
        }
      },
      "sequencerDelayLimitUpdateReceived(uint256)": {
        "details": "This event indicates the sequencer limit updated.",
        "params": {
          "_newSequencerDelayLimit": "The new sequencer delay limit."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "censorshipTestStatus((bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Gets the status of the censorship test for claim.",
        "params": {
          "_claim": "The claim to test."
        },
        "returns": {
          "status": "True if the claim passed the censorship test."
        }
      },
      "challenge(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor. Note: epochPeriod must match the VeaInboxArbToGnosis contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value",
        "params": {
          "_amb": "The address of the AMB contract on Gnosis.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochPeriod": "The duration of each epoch.",
          "_maxMissingBlocks": "The maximum number of blocks that can be missing in a challenge period.",
          "_minChallengePeriod": "The minimum time window to challenge a claim.",
          "_routerArbToGnosis": "The address of the router on Ethereum that routes from Arbitrum to Gnosis.",
          "_routerChainId": "The chain id of the routerArbToGnosis.",
          "_sequencerDelayLimit": "The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.",
          "_timeoutEpochs": "The epochs before the bridge is considered shutdown.",
          "_weth": "The address of the WETH contract on Gnosis."
        }
      },
      "epochAt(uint256)": {
        "details": "Get the current epoch from the outbox's point of view using the Ethereum L1 clock.",
        "returns": {
          "epoch": "The hash of the claim."
        }
      },
      "epochNow()": {
        "details": "Get the current epoch from the outbox's point of view using the Ethereum L1 clock.",
        "returns": {
          "epoch": "The hash of the claim."
        }
      },
      "hashClaim((bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Hashes the claim.",
        "params": {
          "_claim": "The claim to hash."
        },
        "returns": {
          "hashedClaim": "The hash of the claim."
        }
      },
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch to verify.",
          "_stateRoot": "The true state root for the epoch."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "_message": "The message encoded in the vea inbox as abi.encodeWithSelector(fnSelector, msg.sender, param1, param2, ...)",
          "_msgId": "The zero based index of the message in the inbox.",
          "_proof": "The merkle proof to prove the message inclusion in the inbox state root.",
          "_to": "The address of the contract on Gnosis to call."
        }
      },
      "startVerification(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Start verification for claim for 'epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch of the claim to challenge."
        }
      },
      "updateSequencerDelayLimit(uint256,uint256)": {
        "details": "Set the sequencerDelayLimit by receiving a message from the AMB.",
        "params": {
          "_newSequencerDelayLimit": "The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.",
          "_timestamp": "The timestamp of the message."
        }
      },
      "verifySnapshot(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint32,uint8,address))": {
        "notice": "Note: Access restricted to AMB."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1438,
        "contract": "src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol:VeaOutboxArbToGnosis",
        "label": "stateRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 1440,
        "contract": "src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol:VeaOutboxArbToGnosis",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1444,
        "contract": "src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol:VeaOutboxArbToGnosis",
        "label": "claimHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1448,
        "contract": "src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol:VeaOutboxArbToGnosis",
        "label": "relayed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1450,
        "contract": "src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol:VeaOutboxArbToGnosis",
        "label": "sequencerDelayLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1452,
        "contract": "src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol:VeaOutboxArbToGnosis",
        "label": "timestampDelayUpdated",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
