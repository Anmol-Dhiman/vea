{
  "address": "0xAb53e341121448Ae259Da8fa17f216Cb0e21199C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimDelay",
          "type": "uint256"
        },
        {
          "internalType": "contract IAMB",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMissingBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amb",
      "outputs": [
        {
          "internalType": "contract IAMB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testnetOperator",
          "type": "address"
        }
      ],
      "name": "changeTestnetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "stateroot",
          "type": "bytes32"
        }
      ],
      "name": "devnetAdvanceState",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "hashClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMissingBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "passedTest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testnetOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeoutEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "validateSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbToGnosis.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbToGnosis.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd5935d1b231690317a38f2883d8acf707e265bb88c2c982150a4bda08b438d1",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0xAb53e341121448Ae259Da8fa17f216Cb0e21199C",
    "transactionIndex": 0,
    "gasUsed": "1871267",
    "logsBloom": "0x
    "blockHash": "0x258267db8dd5870c3f5495064ecbe6d067da65ae3f2a2ebb62f979ba6da9281b",
    "transactionHash": "0xcd5935d1b231690317a38f2883d8acf707e265bb88c2c982150a4bda08b438d1",
    "logs": [],
    "blockNumber": 3875722,
    "cumulativeGasUsed": "1871267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    1800,
    0,
    10000000000000,
    0,
    "0x99Ca51a3534785ED619f46A79C7Ad65Fa8d85e7a",
    "0xAb53e341121448Ae259Da8fa17f216Cb0e21199C",
    10000000000000
  ],
  "numDeployments": 6,
  "solcInputHash": "4f60b54c6d2daa8ddd9937375ce8fddb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IAMB\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMissingBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testnetOperator\",\"type\":\"address\"}],\"name\":\"changeTestnetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateroot\",\"type\":\"bytes32\"}],\"name\":\"devnetAdvanceState\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"hashClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMissingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"passedTest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testnetOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeoutEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"validateSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbToGnosis.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbToGnosis.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Challenged(uint256,address)\":{\"details\":\"This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\",\"params\":{\"challenger\":\"The address of the challenger.\",\"epoch\":\"The epoch associated with the challenged claim.\"}},\"Claimed(address,bytes32)\":{\"details\":\"Watcher check this event to challenge fraud.\",\"params\":{\"claimer\":\"The address of the claimer.\",\"stateRoot\":\"The state root of the challenged claim.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"msgId\":\"The msgId of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"epoch\":\"The epoch that was verified.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_amb\":\"The address of the AMB contract on Gnosis.\",\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_claimDelay\":\"The number of epochs a claim can be submitted for.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_maxMissingBlocks\":\"The maximum number of blocks that can be missing in a challenge period.\",\"_router\":\"The address of the challenge resolver router contract on Ethereum.\",\"_timeoutEpochs\":\"The epochs before the bridge is considered shutdown.\"}},\"devnetAdvanceState(uint256,bytes32)\":{\"details\":\"Testnet operator utility function to claim, validate and withdraw.\",\"params\":{\"epoch\":\"The epoch for which the claim is made.\",\"stateroot\":\"The state root to claim.\"}},\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_stateRoot\":\"The true state root for the epoch.\",\"epoch\":\"The epoch to verify.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"message\":\"The message encoded with header from VeaInbox.\",\"msgId\":\"The zero based index of the message in the inbox.\",\"proof\":\"The merkle proof to prove the message.\",\"to\":\"The address of the contract on the receiving chain which receives the calldata.\"}},\"validateSnapshot(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"notice\":\"Note: Access restricted to arbitrum  bridge.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol\":\"VeaOutboxArbToGnosisDevnet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/arbitrumToGnosis/VeaOutboxArbToGnosis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../canonical/gnosis-chain/IAMB.sol\\\";\\nimport \\\"./interfaces/IVeaOutboxArbToGnosis.sol\\\";\\n\\n/**\\n * Vea Bridge Outbox From Arbitrum to Gnosis.\\n */\\ncontract VeaOutboxArbToGnosis is IVeaOutboxArbToGnosis {\\n    IAMB public immutable amb; // The address of the AMB contract on Gnosis.\\n    address public immutable router; // The address of the router from Arbitrum to Gnosis on ethereum.\\n\\n    uint256 public immutable deposit; // The deposit required to submit a claim or challenge\\n    uint256 internal immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 internal immutable depositPlusReward; // 2 * deposit - burn\\n    address internal constant burnAddress = address(0x0000000000000000000000000000000000000000);\\n\\n    uint256 internal constant slotTime = 5; // Gnosis 5 second slot time\\n\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable challengePeriod; // Claim challenge timewindow.\\n    uint256 public immutable claimDelay; // Can only claim for epochs after this delay. eg 1 => claims about epoch 1 can be made in epoch 2.\\n\\n    uint256 public immutable timeoutEpochs; // The number of epochs without forward progress before the bridge is considered shutdown.\\n    uint256 public immutable maxMissingBlocks; // The maximum number of blocks that can be missing in a challenge period.\\n\\n    bytes32 public stateRoot;\\n    uint256 public latestVerifiedEpoch;\\n\\n    mapping(uint256 => bytes32) public claimHashes; // epoch => claim\\n    mapping(uint256 => bytes32) public relayed; // msgId/256 => packed replay bitmap\\n\\n    /**\\n     * @dev Watcher check this event to challenge fraud.\\n     * @param claimer The address of the claimer.\\n     * @param stateRoot The state root of the challenged claim.\\n     */\\n    event Claimed(address indexed claimer, bytes32 stateRoot);\\n\\n    /**\\n     * @dev This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\\n     * @param epoch The epoch associated with the challenged claim.\\n     * @param challenger The address of the challenger.\\n     */\\n    event Challenged(uint256 epoch, address indexed challenger);\\n\\n    /**\\n     * @dev This event indicates that a message has been relayed.\\n     * @param msgId The msgId of the message that was relayed.\\n     */\\n    event MessageRelayed(uint64 msgId);\\n\\n    /**\\n     * @dev This events indicates that verification has succeeded. The messages are ready to be relayed.\\n     * @param epoch The epoch that was verified.\\n     */\\n    event Verified(uint256 epoch);\\n\\n    modifier OnlyBridgeRunning() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod <= latestVerifiedEpoch + timeoutEpochs, \\\"Bridge Shutdown.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        unchecked {\\n            require(latestVerifiedEpoch + timeoutEpochs < block.timestamp / epochPeriod, \\\"Bridge Running.\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n     * @param _claimDelay The number of epochs a claim can be submitted for.\\n     * @param _amb The address of the AMB contract on Gnosis.\\n     * @param _router The address of the challenge resolver router contract on Ethereum.\\n     * @param _maxMissingBlocks The maximum number of blocks that can be missing in a challenge period.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        uint256 _claimDelay,\\n        IAMB _amb,\\n        address _router,\\n        uint256 _maxMissingBlocks\\n    ) {\\n        deposit = _deposit;\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        timeoutEpochs = _timeoutEpochs;\\n        claimDelay = _claimDelay;\\n        amb = _amb;\\n        router = _router;\\n        maxMissingBlocks = _maxMissingBlocks;\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n\\n        require(claimDelay <= block.timestamp, \\\"Invalid epochClaimDelay.\\\");\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Submit a claim about the the _stateRoot at _epoch and submit a deposit.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateRoot The state root to claim.\\n     */\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external payable virtual {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n\\n        unchecked {\\n            require((block.timestamp - claimDelay) / epochPeriod == _epoch, \\\"Invalid epoch.\\\");\\n        }\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claimHashes[_epoch] == bytes32(0), \\\"Claim already made.\\\");\\n\\n        claimHashes[_epoch] = hashClaim(\\n            Claim({\\n                stateRoot: _stateRoot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n\\n        emit Claimed(msg.sender, _stateRoot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n     * @param epoch The epoch of the claim to challenge.\\n     */\\n    function challenge(uint256 epoch, Claim memory claim) external payable virtual {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n\\n        unchecked {\\n            require(block.timestamp < uint256(claim.timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n        }\\n\\n        claim.challenger = msg.sender;\\n        claimHashes[epoch] = hashClaim(claim);\\n\\n        emit Challenged(epoch, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param epoch The epoch of the optimistic claim.\\n     */\\n    function validateSnapshot(uint256 epoch, Claim memory claim) external virtual OnlyBridgeRunning {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n\\n        unchecked {\\n            require(claim.timestamp + challengePeriod < block.timestamp, \\\"Challenge period has not yet elapsed.\\\");\\n            require(\\n                // expected blocks <= actual blocks + maxMissingBlocks\\n                uint256(claim.blocknumber) + (block.timestamp - uint256(claim.timestamp)) / slotTime <=\\n                    block.number + maxMissingBlocks,\\n                \\\"Too many missing blocks. Possible censorship attack. Use canonical bridge.\\\"\\n            );\\n        }\\n\\n        require(claim.challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = epoch;\\n            stateRoot = claim.stateRoot;\\n            emit Verified(epoch);\\n        }\\n\\n        claim.honest = Party.Claimer;\\n        claimHashes[epoch] = hashClaim(claim);\\n    }\\n\\n    /**\\n     * Note: Access restricted to arbitrum  bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param epoch The epoch to verify.\\n     * @param _stateRoot The true state root for the epoch.\\n     */\\n    function resolveDisputedClaim(\\n        uint256 epoch,\\n        bytes32 _stateRoot,\\n        Claim memory claim\\n    ) external virtual OnlyBridgeRunning {\\n        require(msg.sender == address(amb), \\\"Not from bridge.\\\");\\n        require(amb.messageSender() == router, \\\"Not from router.\\\");\\n\\n        if (epoch > latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            latestVerifiedEpoch = epoch;\\n            stateRoot = _stateRoot;\\n            emit Verified(epoch);\\n        }\\n\\n        if (claimHashes[epoch] == hashClaim(claim) && claim.honest == Party.None) {\\n            if (claim.stateRoot == _stateRoot) {\\n                claim.honest = Party.Claimer;\\n            } else if (claim.challenger != address(0)) {\\n                claim.honest = Party.Challenger;\\n            }\\n            claimHashes[epoch] = hashClaim(claim);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies and relays the message. UNTRUSTED.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address of the contract on the receiving chain which receives the calldata.\\n     * @param message The message encoded with header from VeaInbox.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external {\\n        require(proof.length < 64, \\\"Proof too long.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(msgId, to, message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero based index of the message in the inbox and is the same index to prevent replay\\n\\n        uint256 relayIndex = msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = to.call(message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(msgId);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 epoch, Claim calldata claim) external virtual{\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.Claimer, \\\"Claim failed.\\\");\\n\\n        delete claimHashes[epoch];\\n\\n        if (claim.challenger != address(0)) {\\n            payable(burnAddress).send(burn);\\n            payable(claim.claimer).send(depositPlusReward); // User is responsibility for accepting ETH.\\n        } else {\\n            payable(claim.claimer).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDeposit(uint256 epoch, Claim calldata claim) external {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.Challenger, \\\"Challenge failed.\\\");\\n\\n        delete claimHashes[epoch];\\n\\n        payable(burnAddress).send(burn); // half burnt\\n        payable(claim.challenger).send(depositPlusReward); // User is responsibility for accepting ETH.\\n    }\\n\\n    /**\\n     * @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimerEscapeHatch(uint256 epoch, Claim memory claim) external OnlyBridgeShutdown {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (claim.claimer != address(0)) {\\n            if (claim.challenger == address(0)) {\\n                delete claimHashes[epoch];\\n            } else {\\n                claim.claimer = address(0);\\n                claimHashes[epoch] == hashClaim(claim);\\n            }\\n            payable(claim.claimer).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n    /**\\n     * @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawChallengerEscapeHatch(uint256 epoch, Claim memory claim) external OnlyBridgeShutdown {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (claim.challenger != address(0)) {\\n            if (claim.claimer == address(0)) {\\n                delete claimHashes[epoch];\\n            } else {\\n                claim.challenger = address(0);\\n                claimHashes[epoch] == hashClaim(claim);\\n            }\\n            payable(claim.challenger).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n    function hashClaim(Claim memory claim) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    claim.stateRoot,\\n                    claim.claimer,\\n                    claim.timestamp,\\n                    claim.blocknumber,\\n                    claim.honest,\\n                    claim.challenger\\n                )\\n            );\\n    }\\n\\n    function passedTest(Claim calldata claim) external view returns (bool) {\\n        uint256 expectedBlocks = uint256(claim.blocknumber) + (block.timestamp - uint256(claim.timestamp)) / slotTime;\\n        uint256 actualBlocks = block.number;\\n        return (expectedBlocks <= actualBlocks + maxMissingBlocks);\\n    }\\n}\\n\",\"keccak256\":\"0x8469eb4cb3f31cf3dd704b7a7d8844aedebd0a2f16adf677780635b4d601fa5d\",\"license\":\"MIT\"},\"src/arbitrumToGnosis/interfaces/IVeaOutboxArbToGnosis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\ninterface IVeaOutboxArbToGnosis {\\n    enum Party {\\n        None,\\n        Claimer,\\n        Challenger\\n    }\\n\\n    struct Claim {\\n        bytes32 stateRoot;\\n        address claimer;\\n        uint32 timestamp;\\n        uint32 blocknumber;\\n        Party honest;\\n        address challenger;\\n    }\\n\\n    /**\\n     * Note: Gateways expect first argument of message call to be the inbox sender, used for authenitcation.\\n     * @dev Verifies and relays the message.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address to send the message to.\\n     * @param message The message to relay.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external;\\n\\n    /**\\n     * Note: Access restricted to canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n     * @param epoch The epoch to verify.\\n     * @param stateRoot The true state root for the epoch.\\n     */\\n    function resolveDisputedClaim(uint256 epoch, bytes32 stateRoot, Claim memory claim) external;\\n}\\n\",\"keccak256\":\"0x2487511f80f5dd577c2af37cfcc295e213aa54bf0295adc4ab436f9b623005e2\",\"license\":\"MIT\"},\"src/canonical/gnosis-chain/IAMB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Complete IAMB Interface\\n// https://github.com/poanetwork/tokenbridge-contracts/blob/master/contracts/interfaces/IAMB.sol\\n\\npragma solidity 0.8.18;\\n\\ninterface IAMB {\\n    function requireToPassMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\\n\\n    function maxGasPerTx() external view returns (uint256);\\n\\n    function messageSender() external view returns (address);\\n\\n    function messageSourceChainId() external view returns (uint256);\\n\\n    function messageId() external view returns (bytes32);\\n\\n    function transactionHash() external view returns (bytes32);\\n\\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\\n\\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\\n\\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\\n\\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\\n\\n    function requireToConfirmMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\\n\\n    function requireToGetInformation(bytes32 _requestSelector, bytes memory _data) external returns (bytes32);\\n\\n    function sourceChainId() external view returns (uint256);\\n\\n    function destinationChainId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x749416bebe4a03bf8b9c7686062520f6f4d63d8c800fb2a07bb858084ba3fa65\",\"license\":\"MIT\"},\"src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../../arbitrumToGnosis/VeaOutboxArbToGnosis.sol\\\";\\n\\ncontract VeaOutboxArbToGnosisDevnet is VeaOutboxArbToGnosis {\\n    address public testnetOperator;\\n\\n    function changeTestnetOperator(address _testnetOperator) external {\\n        require(msg.sender == testnetOperator, \\\"Invalid Testnet Operator\\\");\\n        testnetOperator = _testnetOperator;\\n    }\\n\\n    /**\\n     * @dev Submit a claim about the the _stateRoot at _epoch and submit a deposit.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateRoot The state root to claim.\\n     */\\n    function claim(uint256 _epoch, bytes32 _stateRoot) public payable override {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n        require(msg.sender == testnetOperator, \\\"Invalid Testnet Operator\\\");\\n\\n        unchecked {\\n            require((block.timestamp - claimDelay) / epochPeriod == _epoch, \\\"Invalid epoch.\\\");\\n        }\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claimHashes[_epoch] == bytes32(0), \\\"Claim already made.\\\");\\n\\n        claimHashes[_epoch] = hashClaim(\\n            Claim({\\n                stateRoot: _stateRoot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n\\n        emit Claimed(msg.sender, _stateRoot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n     * @param epoch The epoch of the claim to challenge.\\n     */\\n    function challenge(uint256 epoch, Claim memory claim) external payable override {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n        require(msg.sender == testnetOperator, \\\"Invalid Testnet Operator\\\");\\n\\n        unchecked {\\n            require(block.timestamp < uint256(claim.timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n        }\\n\\n        claim.challenger = msg.sender;\\n        claimHashes[epoch] = hashClaim(claim);\\n\\n        emit Challenged(epoch, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 epoch, Claim memory claim) public override{\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.Claimer, \\\"Claim failed.\\\");\\n\\n        delete claimHashes[epoch];\\n\\n        if (claim.challenger != address(0)) {\\n            payable(burnAddress).send(burn);\\n            payable(claim.claimer).send(depositPlusReward); // User is responsibility for accepting ETH.\\n        } else {\\n            payable(claim.claimer).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n        /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param epoch The epoch of the optimistic claim.\\n     */\\n    function validateSnapshot(uint256 epoch, Claim memory claim) public override OnlyBridgeRunning{\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n\\n        unchecked {\\n            require(claim.timestamp + challengePeriod <= block.timestamp, \\\"Challenge period has not yet elapsed.\\\");\\n            require(\\n                // expected blocks <= actual blocks + maxMissingBlocks\\n                uint256(claim.blocknumber) + (block.timestamp - uint256(claim.timestamp)) / slotTime <=\\n                    block.number + maxMissingBlocks,\\n                \\\"Too many missing blocks. Possible censorship attack. Use canonical bridge.\\\"\\n            );\\n        }\\n\\n        require(claim.challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = epoch;\\n            stateRoot = claim.stateRoot;\\n            emit Verified(epoch);\\n        }\\n\\n        claim.honest = Party.Claimer;\\n        claimHashes[epoch] = hashClaim(claim);\\n    }\\n\\n    /**\\n     * @dev Testnet operator utility function to claim, validate and withdraw.\\n     * @param epoch The epoch for which the claim is made.\\n     * @param stateroot The state root to claim.\\n     */\\n    function devnetAdvanceState(uint256 epoch, bytes32 stateroot) external payable{\\n        claim(epoch, stateroot);\\n        validateSnapshot(epoch, Claim({\\n            stateRoot: stateroot,\\n            claimer: msg.sender,\\n            timestamp: uint32(block.timestamp),\\n            blocknumber: uint32(block.number),\\n            honest: Party.None,\\n            challenger: address(0)\\n        }));\\n        withdrawClaimDeposit(epoch, Claim({\\n            stateRoot: stateroot,\\n            claimer: msg.sender,\\n            timestamp: uint32(block.timestamp),\\n            blocknumber: uint32(block.number),\\n            honest: Party.Claimer,\\n            challenger: address(0)\\n        }));\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n     * @param _claimDelay The number of epochs a claim can be submitted for.\\n     * @param _amb The address of the AMB contract on Gnosis.\\n     * @param _router The address of the challenge resolver router contract on Ethereum.\\n     * @param _maxMissingBlocks The maximum number of blocks that can be missing in a challenge period.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        uint256 _claimDelay,\\n        IAMB _amb,\\n        address _router,\\n        uint256 _maxMissingBlocks\\n    )\\n        VeaOutboxArbToGnosis(\\n            _deposit,\\n            _epochPeriod,\\n            _challengePeriod,\\n            _timeoutEpochs,\\n            _claimDelay,\\n            _amb,\\n            _router,\\n            _maxMissingBlocks\\n        )\\n    {\\n        testnetOperator = msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x170a94735fcb2ca3247a5b8b82730b28e554c24198cb90f780bff14f8c06b58d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b50604051620023733803806200237383398101604081905262000035916200015e565b60c08890526101208790526101408690526101808590526101608490526001600160a01b03808416608052821660a0526101a0819052878787878787878762000080600289620001ed565b60e08190526200009289600262000210565b6200009e919062000230565b6101005261012051600190620000b59042620001ed565b620000c1919062000230565b600155610160514210156200011c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642065706f6368436c61696d44656c61792e0000000000000000604482015260640160405180910390fd5b5050600480546001600160a01b0319163317905550620002469c50505050505050505050505050565b6001600160a01b03811681146200015b57600080fd5b50565b600080600080600080600080610100898b0312156200017c57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151620001ac8162000145565b60c08a0151909350620001bf8162000145565b8092505060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b6000826200020b57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176200022a576200022a620001d7565b92915050565b818103818111156200022a576200022a620001d7565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516120096200036a600039600081816103c90152818161062e01526113380152600081816103fd01528181610d15015281816111e3015281816114fb01526116be01526000818161023b01526108a101526000818161050c0152818161111501526112af0152600081816104310152818161088001528181610d3a01528181611208015281816114cb015261168e01526000818161075a0152611a1e01526000818161071201526119cb0152600081816104c5015281816107aa015281816107e50152818161107b0152818161165401526118160152600081816105400152610e160152600081816101ba01528181610db40152610e4001526120096000f3fe6080604052600436106101815760003560e01c8063a53d3c26116100d1578063c299be331161008a578063eedcf2a911610064578063eedcf2a9146104e7578063f3f480d9146104fa578063f887ea401461052e578063f939bad91461056257600080fd5b8063c299be3314610473578063c4402e7f14610493578063d0e30db0146104b357600080fd5b8063a53d3c2614610384578063a557d91814610397578063aa22a1c6146103b7578063b044397e146103eb578063b5b7a1841461041f578063bd7df3f91461045357600080fd5b806327ee6bdd1161013e57806334c75d721161011857806334c75d72146103015780637ba7900c1461032157806390df63b7146103415780639588eca21461036e57600080fd5b806327ee6bdd146102b857806331d14457146102ce57806331ddf743146102e157600080fd5b80630419402f146101865780631062b39a146101a857806310e8f6bf146101f95780631c8ec299146102295780632415855b1461026b5780632639c0601461028b575b600080fd5b34801561019257600080fd5b506101a66101a1366004611a83565b610582565b005b3480156101b457600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004611abf565b6105d7565b60405190151581526020016101f0565b34801561023557600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101f0565b34801561027757600080fd5b506101a6610286366004611ba7565b61065e565b34801561029757600080fd5b5061025d6102a6366004611bd4565b60026020526000908152604090205481565b3480156102c457600080fd5b5061025d60015481565b6101a66102dc366004611bed565b6107e3565b3480156102ed57600080fd5b506101a66102fc366004611c70565b610a26565b34801561030d57600080fd5b5061025d61031c366004611d32565b610cc6565b34801561032d57600080fd5b506101a661033c366004611d4e565b610d13565b34801561034d57600080fd5b5061025d61035c366004611bd4565b60036020526000908152604090205481565b34801561037a57600080fd5b5061025d60005481565b6101a6610392366004611ba7565b610fe9565b3480156103a357600080fd5b506101a66103b2366004611ba7565b6111e1565b3480156103c357600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f757600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042b57600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045f57600080fd5b506101a661046e366004611ba7565b6114c9565b34801561047f57600080fd5b506101a661048e366004611ba7565b61168c565b34801561049f57600080fd5b506004546101dc906001600160a01b031681565b3480156104bf57600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b6101a66104f5366004611bed565b61184e565b34801561050657600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053a57600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056e57600080fd5b506101a661057d366004611d85565b611914565b6004546001600160a01b031633146105b55760405162461bcd60e51b81526004016105ac90611da9565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60008060056105ec6060850160408601611de0565b6105fc9063ffffffff1642611e11565b6106069190611e40565b6106166080850160608601611de0565b63ffffffff166106269190611e62565b9050436106537f000000000000000000000000000000000000000000000000000000000000000082611e62565b909111159392505050565b61066781610cc6565b600083815260026020526040902054146106935760405162461bcd60e51b81526004016105ac90611e75565b6001816080015160028111156106ab576106ab611e9d565b146106e85760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016105ac565b60008281526002602052604081205560a08101516001600160a01b031615610794576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150505060208301516040516001600160a01b0390911692507f000000000000000000000000000000000000000000000000000000000000000080156108fc029250906000818181858888f150505050505050565b60208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156108535760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016105ac565b6004546001600160a01b0316331461087d5760405162461bcd60e51b81526004016105ac90611da9565b817f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004203816108cf576108cf611e2a565b041461090e5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b60448201526064016105ac565b8061092b5760405162461bcd60e51b81526004016105ac90611e75565b6000828152600260205260409020541561097d5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016105ac565b6109da6040518060c00160405280838152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600060028111156109cb576109cb611e9d565b81526000602090910152610cc6565b600083815260026020908152604091829020929092555182815233917f91d697238e9aa9f3172d17522c9be529b94a892481554e1ea619369b5b12f39a91015b60405180910390a25050565b60408510610a685760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016105ac565b600084848484604051602001610a819493929190611eb3565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610b01576000888883818110610ac357610ac3611ef5565b90506020020135905082811115610ae857826000528060205260406000209250610af8565b8060005282602052604060002092505b50600101610aa7565b508060005414610b445760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016105ac565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c60011615610bb95760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016105ac565b6000838152600360205260408082206001851b84179055516001600160a01b03891690610be99089908990611f0b565b6000604051808303816000865af19150503d8060008114610c26576040519150601f19603f3d011682016040523d82523d6000602084013e610c2b565b606091505b5050905080610c7c5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016105ac565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610cf6979096959101611f1b565b604051602081830303815290604052805190602001209050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f00000000000000000000000000000000000000000000000000000000000000004281610d6757610d67611e2a565b041115610da95760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105ac565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e145760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016105ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190611f9b565b6001600160a01b031614610f095760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b6903937baba32b91760811b60448201526064016105ac565b60015483118015610f1957508115155b15610f5c57600183905560008290556040518381527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610f6581610cc6565b600084815260026020526040902054148015610f965750600081608001516002811115610f9457610f94611e9d565b145b15610fe4578051829003610fb05760016080820152610fcb565b60a08101516001600160a01b031615610fcb57600260808201525b610fd481610cc6565b6000848152600260205260409020555b505050565b610ff281610cc6565b6000838152600260205260409020541461101e5760405162461bcd60e51b81526004016105ac90611e75565b60a08101516001600160a01b0316156110795760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016105ac565b7f00000000000000000000000000000000000000000000000000000000000000003410156110e95760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016105ac565b6004546001600160a01b031633146111135760405162461bcd60e51b81526004016105ac90611da9565b7f0000000000000000000000000000000000000000000000000000000000000000816040015163ffffffff1601421061118e5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e0000000000000060448201526064016105ac565b3360a082015261119d81610cc6565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d79101610a1a565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f0000000000000000000000000000000000000000000000000000000000000000428161123557611235611e2a565b0411156112775760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105ac565b61128081610cc6565b600083815260026020526040902054146112ac5760405162461bcd60e51b81526004016105ac90611e75565b427f0000000000000000000000000000000000000000000000000000000000000000826040015163ffffffff160111156113365760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b60648201526084016105ac565b7f000000000000000000000000000000000000000000000000000000000000000043016005826040015163ffffffff1642038161137557611375611e2a565b04826060015163ffffffff160111156114095760405162461bcd60e51b815260206004820152604a60248201527f546f6f206d616e79206d697373696e6720626c6f636b732e20506f737369626c60448201527f652063656e736f72736869702061747461636b2e205573652063616e6f6e696360648201526930b610313934b233b29760b11b608482015260a4016105ac565b60a08101516001600160a01b03161561145b5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016105ac565b6001548211156114a357600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b600160808201526114b381610cc6565b6000928352600260205260409092209190915550565b7f000000000000000000000000000000000000000000000000000000000000000042816114f8576114f8611e2a565b047f0000000000000000000000000000000000000000000000000000000000000000600154011061155d5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105ac565b61156681610cc6565b600083815260026020526040902054146115925760405162461bcd60e51b81526004016105ac90611e75565b6000816080015160028111156115aa576115aa611e9d565b146115e95760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105ac565b60a08101516001600160a01b0316156107df5760208101516001600160a01b03166116225760008281526002602052604081205561163e565b600060a082015261163281610cc6565b50600082905260026020525b60a08101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f000000000000000000000000000000000000000000000000000000000000000042816116bb576116bb611e2a565b047f000000000000000000000000000000000000000000000000000000000000000060015401106117205760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105ac565b61172981610cc6565b600083815260026020526040902054146117555760405162461bcd60e51b81526004016105ac90611e75565b60008160800151600281111561176d5761176d611e9d565b146117ac5760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105ac565b60208101516001600160a01b0316156107df5760a08101516001600160a01b03166117e557600082815260026020526040812055610794565b600060208201526117f581610cc6565b506000829052600260205260208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b61185882826107e3565b6118b6826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600060028111156118a7576118a7611e9d565b815260006020909101526111e1565b6107df826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff1681526020016001600281111561190557611905611e9d565b8152600060209091015261065e565b61192661031c36839003830183611d32565b600083815260026020526040902054146119525760405162461bcd60e51b81526004016105ac90611e75565b600261196460a0830160808401611fb8565b600281111561197557611975611e9d565b146119b65760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016105ac565b600082815260026020526040808220829055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150611a1093505060c0840191505060a08301611a83565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505050565b6001600160a01b0381168114611a7057600080fd5b50565b8035611a7e81611a5b565b919050565b600060208284031215611a9557600080fd5b8135611aa081611a5b565b9392505050565b600060c08284031215611ab957600080fd5b50919050565b600060c08284031215611ad157600080fd5b611aa08383611aa7565b803563ffffffff81168114611a7e57600080fd5b803560038110611a7e57600080fd5b600060c08284031215611b1057600080fd5b60405160c0810181811067ffffffffffffffff82111715611b4157634e487b7160e01b600052604160045260246000fd5b60405282358152905080611b5760208401611a73565b6020820152611b6860408401611adb565b6040820152611b7960608401611adb565b6060820152611b8a60808401611aef565b6080820152611b9b60a08401611a73565b60a08201525092915050565b60008060e08385031215611bba57600080fd5b82359150611bcb8460208501611afe565b90509250929050565b600060208284031215611be657600080fd5b5035919050565b60008060408385031215611c0057600080fd5b50508035926020909101359150565b803567ffffffffffffffff81168114611a7e57600080fd5b60008083601f840112611c3957600080fd5b50813567ffffffffffffffff811115611c5157600080fd5b602083019150836020828501011115611c6957600080fd5b9250929050565b60008060008060008060808789031215611c8957600080fd5b863567ffffffffffffffff80821115611ca157600080fd5b818901915089601f830112611cb557600080fd5b813581811115611cc457600080fd5b8a60208260051b8501011115611cd957600080fd5b60208301985080975050611cef60208a01611c0f565b9550611cfd60408a01611a73565b94506060890135915080821115611d1357600080fd5b50611d2089828a01611c27565b979a9699509497509295939492505050565b600060c08284031215611d4457600080fd5b611aa08383611afe565b60008060006101008486031215611d6457600080fd5b8335925060208401359150611d7c8560408601611afe565b90509250925092565b60008060e08385031215611d9857600080fd5b82359150611bcb8460208501611aa7565b60208082526018908201527f496e76616c696420546573746e6574204f70657261746f720000000000000000604082015260600190565b600060208284031215611df257600080fd5b611aa082611adb565b634e487b7160e01b600052601160045260246000fd5b81810381811115611e2457611e24611dfb565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611e5d57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611e2457611e24611dfb565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b86815260006bffffffffffffffffffffffff19808860601b16602084015263ffffffff60e01b808860e01b166034850152808760e01b1660388501525060038510611f7657634e487b7160e01b600052602160045260246000fd5b60f89490941b603c8301525060609190911b909116603d820152605101949350505050565b600060208284031215611fad57600080fd5b8151611aa081611a5b565b600060208284031215611fca57600080fd5b611aa082611aef56fea26469706673582212201fa97be467c4cc7cb932b74210c64d4cecbd3f0c48d421d66a810734b6642c0964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c8063a53d3c26116100d1578063c299be331161008a578063eedcf2a911610064578063eedcf2a9146104e7578063f3f480d9146104fa578063f887ea401461052e578063f939bad91461056257600080fd5b8063c299be3314610473578063c4402e7f14610493578063d0e30db0146104b357600080fd5b8063a53d3c2614610384578063a557d91814610397578063aa22a1c6146103b7578063b044397e146103eb578063b5b7a1841461041f578063bd7df3f91461045357600080fd5b806327ee6bdd1161013e57806334c75d721161011857806334c75d72146103015780637ba7900c1461032157806390df63b7146103415780639588eca21461036e57600080fd5b806327ee6bdd146102b857806331d14457146102ce57806331ddf743146102e157600080fd5b80630419402f146101865780631062b39a146101a857806310e8f6bf146101f95780631c8ec299146102295780632415855b1461026b5780632639c0601461028b575b600080fd5b34801561019257600080fd5b506101a66101a1366004611a83565b610582565b005b3480156101b457600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004611abf565b6105d7565b60405190151581526020016101f0565b34801561023557600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101f0565b34801561027757600080fd5b506101a6610286366004611ba7565b61065e565b34801561029757600080fd5b5061025d6102a6366004611bd4565b60026020526000908152604090205481565b3480156102c457600080fd5b5061025d60015481565b6101a66102dc366004611bed565b6107e3565b3480156102ed57600080fd5b506101a66102fc366004611c70565b610a26565b34801561030d57600080fd5b5061025d61031c366004611d32565b610cc6565b34801561032d57600080fd5b506101a661033c366004611d4e565b610d13565b34801561034d57600080fd5b5061025d61035c366004611bd4565b60036020526000908152604090205481565b34801561037a57600080fd5b5061025d60005481565b6101a6610392366004611ba7565b610fe9565b3480156103a357600080fd5b506101a66103b2366004611ba7565b6111e1565b3480156103c357600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f757600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042b57600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045f57600080fd5b506101a661046e366004611ba7565b6114c9565b34801561047f57600080fd5b506101a661048e366004611ba7565b61168c565b34801561049f57600080fd5b506004546101dc906001600160a01b031681565b3480156104bf57600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b6101a66104f5366004611bed565b61184e565b34801561050657600080fd5b5061025d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053a57600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056e57600080fd5b506101a661057d366004611d85565b611914565b6004546001600160a01b031633146105b55760405162461bcd60e51b81526004016105ac90611da9565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60008060056105ec6060850160408601611de0565b6105fc9063ffffffff1642611e11565b6106069190611e40565b6106166080850160608601611de0565b63ffffffff166106269190611e62565b9050436106537f000000000000000000000000000000000000000000000000000000000000000082611e62565b909111159392505050565b61066781610cc6565b600083815260026020526040902054146106935760405162461bcd60e51b81526004016105ac90611e75565b6001816080015160028111156106ab576106ab611e9d565b146106e85760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016105ac565b60008281526002602052604081205560a08101516001600160a01b031615610794576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150505060208301516040516001600160a01b0390911692507f000000000000000000000000000000000000000000000000000000000000000080156108fc029250906000818181858888f150505050505050565b60208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156108535760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016105ac565b6004546001600160a01b0316331461087d5760405162461bcd60e51b81526004016105ac90611da9565b817f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004203816108cf576108cf611e2a565b041461090e5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b60448201526064016105ac565b8061092b5760405162461bcd60e51b81526004016105ac90611e75565b6000828152600260205260409020541561097d5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016105ac565b6109da6040518060c00160405280838152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600060028111156109cb576109cb611e9d565b81526000602090910152610cc6565b600083815260026020908152604091829020929092555182815233917f91d697238e9aa9f3172d17522c9be529b94a892481554e1ea619369b5b12f39a91015b60405180910390a25050565b60408510610a685760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016105ac565b600084848484604051602001610a819493929190611eb3565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610b01576000888883818110610ac357610ac3611ef5565b90506020020135905082811115610ae857826000528060205260406000209250610af8565b8060005282602052604060002092505b50600101610aa7565b508060005414610b445760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016105ac565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c60011615610bb95760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016105ac565b6000838152600360205260408082206001851b84179055516001600160a01b03891690610be99089908990611f0b565b6000604051808303816000865af19150503d8060008114610c26576040519150601f19603f3d011682016040523d82523d6000602084013e610c2b565b606091505b5050905080610c7c5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016105ac565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610cf6979096959101611f1b565b604051602081830303815290604052805190602001209050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f00000000000000000000000000000000000000000000000000000000000000004281610d6757610d67611e2a565b041115610da95760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105ac565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e145760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016105ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190611f9b565b6001600160a01b031614610f095760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b6903937baba32b91760811b60448201526064016105ac565b60015483118015610f1957508115155b15610f5c57600183905560008290556040518381527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610f6581610cc6565b600084815260026020526040902054148015610f965750600081608001516002811115610f9457610f94611e9d565b145b15610fe4578051829003610fb05760016080820152610fcb565b60a08101516001600160a01b031615610fcb57600260808201525b610fd481610cc6565b6000848152600260205260409020555b505050565b610ff281610cc6565b6000838152600260205260409020541461101e5760405162461bcd60e51b81526004016105ac90611e75565b60a08101516001600160a01b0316156110795760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016105ac565b7f00000000000000000000000000000000000000000000000000000000000000003410156110e95760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016105ac565b6004546001600160a01b031633146111135760405162461bcd60e51b81526004016105ac90611da9565b7f0000000000000000000000000000000000000000000000000000000000000000816040015163ffffffff1601421061118e5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e0000000000000060448201526064016105ac565b3360a082015261119d81610cc6565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d79101610a1a565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f0000000000000000000000000000000000000000000000000000000000000000428161123557611235611e2a565b0411156112775760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105ac565b61128081610cc6565b600083815260026020526040902054146112ac5760405162461bcd60e51b81526004016105ac90611e75565b427f0000000000000000000000000000000000000000000000000000000000000000826040015163ffffffff160111156113365760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b60648201526084016105ac565b7f000000000000000000000000000000000000000000000000000000000000000043016005826040015163ffffffff1642038161137557611375611e2a565b04826060015163ffffffff160111156114095760405162461bcd60e51b815260206004820152604a60248201527f546f6f206d616e79206d697373696e6720626c6f636b732e20506f737369626c60448201527f652063656e736f72736869702061747461636b2e205573652063616e6f6e696360648201526930b610313934b233b29760b11b608482015260a4016105ac565b60a08101516001600160a01b03161561145b5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016105ac565b6001548211156114a357600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b600160808201526114b381610cc6565b6000928352600260205260409092209190915550565b7f000000000000000000000000000000000000000000000000000000000000000042816114f8576114f8611e2a565b047f0000000000000000000000000000000000000000000000000000000000000000600154011061155d5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105ac565b61156681610cc6565b600083815260026020526040902054146115925760405162461bcd60e51b81526004016105ac90611e75565b6000816080015160028111156115aa576115aa611e9d565b146115e95760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105ac565b60a08101516001600160a01b0316156107df5760208101516001600160a01b03166116225760008281526002602052604081205561163e565b600060a082015261163281610cc6565b50600082905260026020525b60a08101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f000000000000000000000000000000000000000000000000000000000000000042816116bb576116bb611e2a565b047f000000000000000000000000000000000000000000000000000000000000000060015401106117205760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105ac565b61172981610cc6565b600083815260026020526040902054146117555760405162461bcd60e51b81526004016105ac90611e75565b60008160800151600281111561176d5761176d611e9d565b146117ac5760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105ac565b60208101516001600160a01b0316156107df5760a08101516001600160a01b03166117e557600082815260026020526040812055610794565b600060208201526117f581610cc6565b506000829052600260205260208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b61185882826107e3565b6118b6826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600060028111156118a7576118a7611e9d565b815260006020909101526111e1565b6107df826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff1681526020016001600281111561190557611905611e9d565b8152600060209091015261065e565b61192661031c36839003830183611d32565b600083815260026020526040902054146119525760405162461bcd60e51b81526004016105ac90611e75565b600261196460a0830160808401611fb8565b600281111561197557611975611e9d565b146119b65760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016105ac565b600082815260026020526040808220829055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150611a1093505060c0840191505060a08301611a83565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505050565b6001600160a01b0381168114611a7057600080fd5b50565b8035611a7e81611a5b565b919050565b600060208284031215611a9557600080fd5b8135611aa081611a5b565b9392505050565b600060c08284031215611ab957600080fd5b50919050565b600060c08284031215611ad157600080fd5b611aa08383611aa7565b803563ffffffff81168114611a7e57600080fd5b803560038110611a7e57600080fd5b600060c08284031215611b1057600080fd5b60405160c0810181811067ffffffffffffffff82111715611b4157634e487b7160e01b600052604160045260246000fd5b60405282358152905080611b5760208401611a73565b6020820152611b6860408401611adb565b6040820152611b7960608401611adb565b6060820152611b8a60808401611aef565b6080820152611b9b60a08401611a73565b60a08201525092915050565b60008060e08385031215611bba57600080fd5b82359150611bcb8460208501611afe565b90509250929050565b600060208284031215611be657600080fd5b5035919050565b60008060408385031215611c0057600080fd5b50508035926020909101359150565b803567ffffffffffffffff81168114611a7e57600080fd5b60008083601f840112611c3957600080fd5b50813567ffffffffffffffff811115611c5157600080fd5b602083019150836020828501011115611c6957600080fd5b9250929050565b60008060008060008060808789031215611c8957600080fd5b863567ffffffffffffffff80821115611ca157600080fd5b818901915089601f830112611cb557600080fd5b813581811115611cc457600080fd5b8a60208260051b8501011115611cd957600080fd5b60208301985080975050611cef60208a01611c0f565b9550611cfd60408a01611a73565b94506060890135915080821115611d1357600080fd5b50611d2089828a01611c27565b979a9699509497509295939492505050565b600060c08284031215611d4457600080fd5b611aa08383611afe565b60008060006101008486031215611d6457600080fd5b8335925060208401359150611d7c8560408601611afe565b90509250925092565b60008060e08385031215611d9857600080fd5b82359150611bcb8460208501611aa7565b60208082526018908201527f496e76616c696420546573746e6574204f70657261746f720000000000000000604082015260600190565b600060208284031215611df257600080fd5b611aa082611adb565b634e487b7160e01b600052601160045260246000fd5b81810381811115611e2457611e24611dfb565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611e5d57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611e2457611e24611dfb565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b86815260006bffffffffffffffffffffffff19808860601b16602084015263ffffffff60e01b808860e01b166034850152808760e01b1660388501525060038510611f7657634e487b7160e01b600052602160045260246000fd5b60f89490941b603c8301525060609190911b909116603d820152605101949350505050565b600060208284031215611fad57600080fd5b8151611aa081611a5b565b600060208284031215611fca57600080fd5b611aa082611aef56fea26469706673582212201fa97be467c4cc7cb932b74210c64d4cecbd3f0c48d421d66a810734b6642c0964736f6c63430008120033",
  "devdoc": {
    "events": {
      "Challenged(uint256,address)": {
        "details": "This event indicates that `sendSnapshot(epoch)` should be called in the inbox.",
        "params": {
          "challenger": "The address of the challenger.",
          "epoch": "The epoch associated with the challenged claim."
        }
      },
      "Claimed(address,bytes32)": {
        "details": "Watcher check this event to challenge fraud.",
        "params": {
          "claimer": "The address of the claimer.",
          "stateRoot": "The state root of the challenged claim."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "msgId": "The msgId of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "epoch": "The epoch that was verified."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_amb": "The address of the AMB contract on Gnosis.",
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_claimDelay": "The number of epochs a claim can be submitted for.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochPeriod": "The duration of each epoch.",
          "_maxMissingBlocks": "The maximum number of blocks that can be missing in a challenge period.",
          "_router": "The address of the challenge resolver router contract on Ethereum.",
          "_timeoutEpochs": "The epochs before the bridge is considered shutdown."
        }
      },
      "devnetAdvanceState(uint256,bytes32)": {
        "details": "Testnet operator utility function to claim, validate and withdraw.",
        "params": {
          "epoch": "The epoch for which the claim is made.",
          "stateroot": "The state root to claim."
        }
      },
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_stateRoot": "The true state root for the epoch.",
          "epoch": "The epoch to verify."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "message": "The message encoded with header from VeaInbox.",
          "msgId": "The zero based index of the message in the inbox.",
          "proof": "The merkle proof to prove the message.",
          "to": "The address of the contract on the receiving chain which receives the calldata."
        }
      },
      "validateSnapshot(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "notice": "Note: Access restricted to arbitrum  bridge."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38,
        "contract": "src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol:VeaOutboxArbToGnosisDevnet",
        "label": "stateRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 40,
        "contract": "src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol:VeaOutboxArbToGnosisDevnet",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 44,
        "contract": "src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol:VeaOutboxArbToGnosisDevnet",
        "label": "claimHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 48,
        "contract": "src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol:VeaOutboxArbToGnosisDevnet",
        "label": "relayed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1214,
        "contract": "src/devnets/arbitrumToGnosis/VeaOutboxArbToGnosisDevnet.sol:VeaOutboxArbToGnosisDevnet",
        "label": "testnetOperator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
