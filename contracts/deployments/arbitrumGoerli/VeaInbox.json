{
  "address": "0x9c528cFcE634b39fbD77b6EEA30C69f3A9Bf33Ff",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_epochPeriod",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "msgData",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "SnapshotSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "StaterootSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARB_SYS",
      "outputs": [
        {
          "internalType": "contract IArbSys",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveStateRootSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendMsg",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "epochSend",
          "type": "uint64"
        }
      ],
      "name": "sendStaterootSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stateRootSnapshots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03259ee9a98d564a94eb4ce47d96b17e8bb6bb6ee4908f10977b0f2d21940ba0",
  "receipt": {
    "to": null,
    "from": "0x209469C921db9d5Bd77084370e80B63d5cdD63C1",
    "contractAddress": "0x9c528cFcE634b39fbD77b6EEA30C69f3A9Bf33Ff",
    "transactionIndex": 1,
    "gasUsed": "1500360",
    "logsBloom": "0x
    "blockHash": "0x8499bf635ffc26d459c7f5cd84aa229c03b4377bc73d0b87106c9129dd754fdb",
    "transactionHash": "0x03259ee9a98d564a94eb4ce47d96b17e8bb6bb6ee4908f10977b0f2d21940ba0",
    "logs": [],
    "blockNumber": 14966340,
    "cumulativeGasUsed": "1500360",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1800,
    "0x8C1935dbBB87C42e7ED4E94BE3e8FA61B8b3a025"
  ],
  "numDeployments": 2,
  "solcInputHash": "4f20c87db03013ad37c14b515a07c604",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochPeriod\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"msgData\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"}],\"name\":\"SnapshotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"}],\"name\":\"StaterootSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARB_SYS\",\"outputs\":[{\"internalType\":\"contract IArbSys\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveStateRootSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMsg\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epochSend\",\"type\":\"uint64\"}],\"name\":\"sendStaterootSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stateRootSnapshots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MessageSent(bytes)\":{\"details\":\"Relayers watch for these events to construct merkle proofs to execute transactions on Gnosis Chain.\",\"params\":{\"msgData\":\"abi.encode(msgId, msg.sender, to, data);\"}},\"SnapshotSaved(uint64,bytes32)\":{\"params\":{\"epoch\":\"The epoch of the batch requested to send.\",\"stateRoot\":\"The receiving domain encoded message data.\"}},\"StaterootSent(uint64,bytes32)\":{\"details\":\"The event is emitted when messages are sent through the canonical arbiturm bridge.\",\"params\":{\"epoch\":\"The epoch of the batch requested to send.\",\"stateRoot\":\"The state root of batched messages.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_epochPeriod\":\"The duration between epochs.\",\"_receiver\":\"The receiver on ethereum.\"}},\"saveStateRootSnapshot()\":{\"details\":\"Snapshots can be saved a maximum of once per epoch.\"},\"sendMsg(address,bytes)\":{\"details\":\"Sends an arbitrary message to a receiving chain.\",\"params\":{\"data\":\"The message calldata, abi.encodeWithSelector(...)\",\"to\":\"The address of the contract on the receiving chain which receives the calldata.\"},\"returns\":{\"_0\":\"msgId The message id, 0 indexed.\"}},\"sendStaterootSnapshot(uint64)\":{\"details\":\"Sends the state root using Arbitrum's canonical bridge.\",\"params\":{\"epochSend\":\"The epoch of the batch requested to send.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"SnapshotSaved(uint64,bytes32)\":{\"notice\":\"The bridgers need to watch for these events and relay the stateRoot on the veaOutbox.\"}},\"kind\":\"user\",\"methods\":{\"saveStateRootSnapshot()\":{\"notice\":\"Takes snapshot of state root.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/VeaInbox.sol\":\"VeaInbox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/VeaInbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./canonical/arbitrum/IArbSys.sol\\\";\\nimport \\\"./interfaces/IVeaInbox.sol\\\";\\nimport \\\"./interfaces/IVeaOutbox.sol\\\";\\n\\ncontract VeaInbox is IVeaInbox {\\n\\n    /**\\n     * @dev Relayers watch for these events to construct merkle proofs to execute transactions on Gnosis Chain.\\n     * @param msgData abi.encode(msgId, msg.sender, to, data);\\n     */\\n    event MessageSent(bytes msgData);\\n\\n    /**\\n     * The bridgers need to watch for these events and relay the\\n     * stateRoot on the veaOutbox.\\n     * @param epoch The epoch of the batch requested to send.\\n     * @param stateRoot The receiving domain encoded message data.\\n     */\\n    event SnapshotSaved(uint64 indexed epoch, bytes32 stateRoot);\\n\\n    /**\\n     * @dev The event is emitted when messages are sent through the canonical arbiturm bridge.\\n     * @param epoch The epoch of the batch requested to send.\\n     * @param stateRoot The state root of batched messages.\\n     */\\n    event StaterootSent(uint64 indexed epoch, bytes32 stateRoot);\\n\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n    uint64 public immutable epochPeriod; // Epochs mark the period between stateroot snapshots\\n    address public immutable receiver; // The receiver on ethereum.\\n\\n    mapping(uint256 => bytes32) public stateRootSnapshots; // epoch => state root snapshot\\n    bytes32[64] public inbox;\\n    uint64 count; // max 2^64 messages\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _epochPeriod The duration between epochs.\\n     * @param _receiver The receiver on ethereum.\\n     */\\n    constructor(uint64 _epochPeriod, address _receiver) {\\n        epochPeriod = _epochPeriod;\\n        receiver = _receiver;\\n    }\\n\\n    /**\\n     * @dev Sends the state root using Arbitrum's canonical bridge.\\n     * @param epochSend The epoch of the batch requested to send.\\n     */\\n    function sendStaterootSnapshot(uint64 epochSend) external virtual {\\n        uint64 epoch = uint64(block.timestamp) / epochPeriod;\\n        require(epochSend <= epoch, \\\"Epoch in the future.\\\");\\n        bytes memory data = abi.encodeWithSelector(\\n            IChallengeResolver.resolveChallenge.selector,\\n            epoch,\\n            stateRootSnapshots[epochSend]\\n        );\\n\\n        bytes32 ticketID = bytes32(ARB_SYS.sendTxToL1(receiver, data));\\n\\n        emit StaterootSent(epochSend, ticketID);\\n    }\\n\\n    /**\\n     * @dev Sends an arbitrary message to a receiving chain.\\n     * @param to The address of the contract on the receiving chain which receives the calldata.\\n     * @param data The message calldata, abi.encodeWithSelector(...)\\n     * @return msgId The message id, 0 indexed.\\n     */\\n    function sendMsg(address to, bytes memory data) external override returns (uint64) {\\n        uint64 oldCount = count;\\n        uint64 newCount = oldCount + 1;\\n\\n        bytes memory msgData = abi.encodePacked(oldCount, msg.sender, to, data);\\n\\n        // Double Hash all leaves\\n        bytes32 leaf = keccak256(abi.encode(keccak256(msgData)));\\n\\n        // Efficiently calculate the new root\\n        uint64 hashBitField = (newCount ^ (oldCount)) & newCount;\\n        uint64 height;\\n\\n        while ((hashBitField & 1) == 0) {\\n            bytes32 node = inbox[height];\\n            if (node > leaf)\\n                assembly {\\n                    mstore(0x00, leaf)\\n                    mstore(0x20, node)\\n                    leaf := keccak256(0x00, 0x40)\\n                }\\n            else\\n                assembly {\\n                    mstore(0x00, node)\\n                    mstore(0x20, leaf)\\n                    leaf := keccak256(0x00, 0x40)\\n                }\\n            unchecked {\\n                hashBitField /= 2;\\n                height++;\\n            }\\n        }\\n        inbox[height] = leaf;\\n\\n        count = newCount;\\n\\n        emit MessageSent(msgData);\\n\\n        // old count is the zero indexed leaf position in the tree, acts as a msgId\\n        // gateways should index these msgIds to later relay proofs\\n        return oldCount;\\n    }\\n\\n    /**\\n     * Takes snapshot of state root.\\n     * @dev Snapshots can be saved a maximum of once per epoch.\\n     */\\n    function saveStateRootSnapshot() external {\\n        uint64 epoch = uint64(block.timestamp) / epochPeriod;\\n        require(stateRootSnapshots[epoch] == bytes32(0), \\\"Snapshot already taken for this epoch.\\\");\\n        bytes32 stateRoot = getStateroot();\\n        stateRootSnapshots[epoch] = stateRoot;\\n\\n        emit SnapshotSaved(epoch, stateRoot);\\n    }\\n\\n    /**\\n     * @dev Gets the current state root.\\n     *  `O(log(n))` where `n` is the number of leaves.\\n     *  Note: Inlined from `merkle/MerkleTree.sol` for performance.\\n     */\\n    function getStateroot() internal view returns (bytes32 node) {\\n        uint64 size = count;\\n        uint64 height;\\n        bool isFirstHash = true;\\n        while (size > 0) {\\n            if ((size & 1) == 1) {\\n                // avoid redundant calculation\\n                if (isFirstHash) {\\n                    node = inbox[height];\\n                    isFirstHash = false;\\n                } else {\\n                    bytes32 hash = inbox[height];\\n                    // efficient hash\\n                    if (hash > node)\\n                        assembly {\\n                            mstore(0x00, node)\\n                            mstore(0x20, hash)\\n                            node := keccak256(0x00, 0x40)\\n                        }\\n                    else\\n                        assembly {\\n                            mstore(0x00, hash)\\n                            mstore(0x20, node)\\n                            node := keccak256(0x00, 0x40)\\n                        }\\n                }\\n            }\\n            unchecked {\\n                size /= 2;\\n                height++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x706bb92ce9b38c7af9193978848b365a55037d4cd683a456d59b2f522dc33ea6\",\"license\":\"MIT\"},\"src/canonical/arbitrum/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint256);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n}\\n\",\"keccak256\":\"0x2abbc6cf12d56c18cf4339b34747f6adea78f17a82e1813923a05d9aa7597ef3\",\"license\":\"Apache-2.0\"},\"src/interfaces/IChallengeResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChallengeResolver {\\n    /**\\n     * Note: Access restricted to arbitrum canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param epoch The epoch to verify.\\n     * @param stateRoot The true state root for the epoch.\\n     */\\n    function resolveChallenge(uint64 epoch, bytes32 stateRoot) external;\\n}\\n\",\"keccak256\":\"0x8cf17495e0404576844db673e62719031b267a162cf2a2d49f2615d023cc64a8\",\"license\":\"MIT\"},\"src/interfaces/IVeaInbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVeaInbox {\\n    /**\\n     * Note: Calls authenticated by receiving gateway checking the sender argument.\\n     * @dev Sends an arbitrary message to Ethereum.\\n     * @param to The cross-domain contract address which receives the calldata.\\n     * @param data The message calldata, abi.encodeWithSelector(...)\\n     * @return msgId The index of the message in the inbox, as a message Id, needed to relay the message.\\n     */\\n    function sendMsg(address to, bytes memory data) external returns (uint64 msgId);\\n}\\n\",\"keccak256\":\"0x4e15707c96b4fe792bc8ea43d3714370ff5dee647c6b88fee0f7d642dd67fead\",\"license\":\"MIT\"},\"src/interfaces/IVeaOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IChallengeResolver.sol\\\";\\n\\ninterface IVeaOutbox is IChallengeResolver{\\n    /**\\n     * @dev Verifies and relays the message.\\n     * @param proof The merkle proof to prove the message.\\n     * @param index The index of the message in the merkle tree.\\n     * @param msgSender The address of the message sender.\\n     * @param to The address of the message receiver.\\n     * @param data The data of the message.\\n     */\\n    function verifyAndRelayMessage(\\n        bytes32[] calldata proof, \\n        uint64 index, \\n        address msgSender,\\n        address to,\\n        bytes calldata data) external;\\n\\n    /**\\n     * @dev The message sender of a relayed message.\\n     * @return messageSender The address of the message sender.\\n     */\\n    function messageSender() external returns (address messageSender);\\n}\\n\",\"keccak256\":\"0x1aceae7996cd84e20b551b47d7f4e8f533910f7c96b3a411b327bc4e99d53146\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a74380380610a7483398101604081905261002f9161004e565b6001600160401b039091166080526001600160a01b031660a0526100a0565b6000806040838503121561006157600080fd5b82516001600160401b038116811461007857600080fd5b60208401519092506001600160a01b038116811461009557600080fd5b809150509250929050565b60805160a05161099b6100d960003960008181610167015261038b01526000818160df015281816101900152610299015261099b6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063bd368a5a1161005b578063bd368a5a14610101578063bd8e62d61461012f578063e5a1c3561461014f578063f7260d3e1461016257600080fd5b80634a12b57b1461008d5780635b13460b146100975780636468244d146100aa578063b5b7a184146100da575b600080fd5b610095610189565b005b6100956100a53660046106a4565b610292565b6100bd6100b83660046106ea565b61044e565b6040516001600160401b0390911681526020015b60405180910390f35b6100bd7f000000000000000000000000000000000000000000000000000000000000000081565b61012161010f3660046107b9565b60006020819052908152604090205481565b6040519081526020016100d1565b610137606481565b6040516001600160a01b0390911681526020016100d1565b61012161015d3660046107b9565b6105c1565b6101377f000000000000000000000000000000000000000000000000000000000000000081565b60006101b57f0000000000000000000000000000000000000000000000000000000000000000426107d2565b6001600160401b038116600090815260208190526040902054909150156102325760405162461bcd60e51b815260206004820152602660248201527f536e617073686f7420616c72656164792074616b656e20666f7220746869732060448201526532b837b1b41760d11b60648201526084015b60405180910390fd5b600061023c6105d8565b6001600160401b03831660008181526020818152604091829020849055905183815292935090917f3db6d33cfab03f9296ad4fec538b91774ad835541b43b2c781cca35f33bcecb5910160405180910390a25050565b60006102be7f0000000000000000000000000000000000000000000000000000000000000000426107d2565b9050806001600160401b0316826001600160401b031611156103195760405162461bcd60e51b815260206004820152601460248201527322b837b1b41034b7103a343290333aba3ab9329760611b6044820152606401610229565b6001600160401b038281166000908152602081815260408083205481519486166024860152604480860191909152815180860390910181526064948501825291820180516001600160e01b0316636a91b06d60e01b179052516349460b4d60e11b815290929063928c169a906103b5907f0000000000000000000000000000000000000000000000000000000000000000908690600401610862565b602060405180830381600087803b1580156103cf57600080fd5b505af11580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610407919061088e565b6040518181529091506001600160401b038516907ff7ccbb48b8e3ecb79da104f2834eadac5cbf973b4f7c4f9bcc536834681ee76f9060200160405180910390a250505050565b6041546000906001600160401b0316816104698260016108a7565b905060008233878760405160200161048494939291906108e0565b6040516020818303038152906040529050600081805190602001206040516020016104b191815260200190565b60408051601f1981840301815291905280516020909101209050838318831660005b600182166105415760006001826001600160401b0316604081106104f9576104f961093c565b015490508381111561051957836000528060205260406000209350610529565b8060005283602052604060002093505b60026001600160401b038416049250506001016104d3565b826001826001600160401b03166040811061055e5761055e61093c565b01556041805467ffffffffffffffff19166001600160401b0387161790556040517f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036906105ac908690610952565b60405180910390a15093979650505050505050565b600181604081106105d157600080fd5b0154905081565b6041546000906001600160401b03168160015b6001600160401b0383161561069e5760018084161415610684578015610634576001826001600160401b0316604081106106275761062761093c565b0154935060009050610684565b60006001836001600160401b0316604081106106525761065261093c565b015490508481111561067257846000528060205260406000209450610682565b8060005284602052604060002094505b505b60026001600160401b0384160492506001909101906105eb565b50505090565b6000602082840312156106b657600080fd5b81356001600160401b03811681146106cd57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156106fd57600080fd5b82356001600160a01b038116811461071457600080fd5b915060208301356001600160401b038082111561073057600080fd5b818501915085601f83011261074457600080fd5b813581811115610756576107566106d4565b604051601f8201601f19908116603f0116810190838211818310171561077e5761077e6106d4565b8160405282815288602084870101111561079757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156107cb57600080fd5b5035919050565b60006001600160401b03808416806107fa57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60005b83811015610821578181015183820152602001610809565b83811115610830576000848401525b50505050565b6000815180845261084e816020860160208601610806565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061088690830184610836565b949350505050565b6000602082840312156108a057600080fd5b5051919050565b60006001600160401b038083168185168083038211156108d757634e487b7160e01b600052601160045260246000fd5b01949350505050565b6001600160401b0360c01b8560c01b16815260006bffffffffffffffffffffffff19808660601b166008840152808560601b16601c84015250825161092c816030850160208701610806565b9190910160300195945050505050565b634e487b7160e01b600052603260045260246000fd5b6020815260006106cd602083018461083656fea264697066735822122043fe300aa3179efb7762c8abff11dcbd7dc1b00f181436a7405b131568a3c5ce64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063bd368a5a1161005b578063bd368a5a14610101578063bd8e62d61461012f578063e5a1c3561461014f578063f7260d3e1461016257600080fd5b80634a12b57b1461008d5780635b13460b146100975780636468244d146100aa578063b5b7a184146100da575b600080fd5b610095610189565b005b6100956100a53660046106a4565b610292565b6100bd6100b83660046106ea565b61044e565b6040516001600160401b0390911681526020015b60405180910390f35b6100bd7f000000000000000000000000000000000000000000000000000000000000000081565b61012161010f3660046107b9565b60006020819052908152604090205481565b6040519081526020016100d1565b610137606481565b6040516001600160a01b0390911681526020016100d1565b61012161015d3660046107b9565b6105c1565b6101377f000000000000000000000000000000000000000000000000000000000000000081565b60006101b57f0000000000000000000000000000000000000000000000000000000000000000426107d2565b6001600160401b038116600090815260208190526040902054909150156102325760405162461bcd60e51b815260206004820152602660248201527f536e617073686f7420616c72656164792074616b656e20666f7220746869732060448201526532b837b1b41760d11b60648201526084015b60405180910390fd5b600061023c6105d8565b6001600160401b03831660008181526020818152604091829020849055905183815292935090917f3db6d33cfab03f9296ad4fec538b91774ad835541b43b2c781cca35f33bcecb5910160405180910390a25050565b60006102be7f0000000000000000000000000000000000000000000000000000000000000000426107d2565b9050806001600160401b0316826001600160401b031611156103195760405162461bcd60e51b815260206004820152601460248201527322b837b1b41034b7103a343290333aba3ab9329760611b6044820152606401610229565b6001600160401b038281166000908152602081815260408083205481519486166024860152604480860191909152815180860390910181526064948501825291820180516001600160e01b0316636a91b06d60e01b179052516349460b4d60e11b815290929063928c169a906103b5907f0000000000000000000000000000000000000000000000000000000000000000908690600401610862565b602060405180830381600087803b1580156103cf57600080fd5b505af11580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610407919061088e565b6040518181529091506001600160401b038516907ff7ccbb48b8e3ecb79da104f2834eadac5cbf973b4f7c4f9bcc536834681ee76f9060200160405180910390a250505050565b6041546000906001600160401b0316816104698260016108a7565b905060008233878760405160200161048494939291906108e0565b6040516020818303038152906040529050600081805190602001206040516020016104b191815260200190565b60408051601f1981840301815291905280516020909101209050838318831660005b600182166105415760006001826001600160401b0316604081106104f9576104f961093c565b015490508381111561051957836000528060205260406000209350610529565b8060005283602052604060002093505b60026001600160401b038416049250506001016104d3565b826001826001600160401b03166040811061055e5761055e61093c565b01556041805467ffffffffffffffff19166001600160401b0387161790556040517f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036906105ac908690610952565b60405180910390a15093979650505050505050565b600181604081106105d157600080fd5b0154905081565b6041546000906001600160401b03168160015b6001600160401b0383161561069e5760018084161415610684578015610634576001826001600160401b0316604081106106275761062761093c565b0154935060009050610684565b60006001836001600160401b0316604081106106525761065261093c565b015490508481111561067257846000528060205260406000209450610682565b8060005284602052604060002094505b505b60026001600160401b0384160492506001909101906105eb565b50505090565b6000602082840312156106b657600080fd5b81356001600160401b03811681146106cd57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156106fd57600080fd5b82356001600160a01b038116811461071457600080fd5b915060208301356001600160401b038082111561073057600080fd5b818501915085601f83011261074457600080fd5b813581811115610756576107566106d4565b604051601f8201601f19908116603f0116810190838211818310171561077e5761077e6106d4565b8160405282815288602084870101111561079757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156107cb57600080fd5b5035919050565b60006001600160401b03808416806107fa57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60005b83811015610821578181015183820152602001610809565b83811115610830576000848401525b50505050565b6000815180845261084e816020860160208601610806565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061088690830184610836565b949350505050565b6000602082840312156108a057600080fd5b5051919050565b60006001600160401b038083168185168083038211156108d757634e487b7160e01b600052601160045260246000fd5b01949350505050565b6001600160401b0360c01b8560c01b16815260006bffffffffffffffffffffffff19808660601b166008840152808560601b16601c84015250825161092c816030850160208701610806565b9190910160300195945050505050565b634e487b7160e01b600052603260045260246000fd5b6020815260006106cd602083018461083656fea264697066735822122043fe300aa3179efb7762c8abff11dcbd7dc1b00f181436a7405b131568a3c5ce64736f6c63430008090033",
  "devdoc": {
    "events": {
      "MessageSent(bytes)": {
        "details": "Relayers watch for these events to construct merkle proofs to execute transactions on Gnosis Chain.",
        "params": {
          "msgData": "abi.encode(msgId, msg.sender, to, data);"
        }
      },
      "SnapshotSaved(uint64,bytes32)": {
        "params": {
          "epoch": "The epoch of the batch requested to send.",
          "stateRoot": "The receiving domain encoded message data."
        }
      },
      "StaterootSent(uint64,bytes32)": {
        "details": "The event is emitted when messages are sent through the canonical arbiturm bridge.",
        "params": {
          "epoch": "The epoch of the batch requested to send.",
          "stateRoot": "The state root of batched messages."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_epochPeriod": "The duration between epochs.",
          "_receiver": "The receiver on ethereum."
        }
      },
      "saveStateRootSnapshot()": {
        "details": "Snapshots can be saved a maximum of once per epoch."
      },
      "sendMsg(address,bytes)": {
        "details": "Sends an arbitrary message to a receiving chain.",
        "params": {
          "data": "The message calldata, abi.encodeWithSelector(...)",
          "to": "The address of the contract on the receiving chain which receives the calldata."
        },
        "returns": {
          "_0": "msgId The message id, 0 indexed."
        }
      },
      "sendStaterootSnapshot(uint64)": {
        "details": "Sends the state root using Arbitrum's canonical bridge.",
        "params": {
          "epochSend": "The epoch of the batch requested to send."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "SnapshotSaved(uint64,bytes32)": {
        "notice": "The bridgers need to watch for these events and relay the stateRoot on the veaOutbox."
      }
    },
    "kind": "user",
    "methods": {
      "saveStateRootSnapshot()": {
        "notice": "Takes snapshot of state root."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 167,
        "contract": "src/VeaInbox.sol:VeaInbox",
        "label": "stateRootSnapshots",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 171,
        "contract": "src/VeaInbox.sol:VeaInbox",
        "label": "inbox",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)64_storage"
      },
      {
        "astId": 173,
        "contract": "src/VeaInbox.sol:VeaInbox",
        "label": "count",
        "offset": 0,
        "slot": "65",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_array(t_bytes32)64_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[64]",
        "numberOfBytes": "2048"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
