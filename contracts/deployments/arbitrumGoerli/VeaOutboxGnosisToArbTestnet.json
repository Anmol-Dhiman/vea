{
  "address": "0xF0492e87Be6d644A6a467fE20ee9EC5eFCB6cB23",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutEpochs",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_routerGnosisToArb",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sequencerDelayLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sequencerFutureLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newsequencerDelayLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerDelayLimitUpdateReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challengers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "enum VeaOutboxGnosisToArb.Party",
          "name": "honest",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochNow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerGnosisToArb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerDelayLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerFutureLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeoutEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampDelayUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampFutureUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSequencerDelayLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerDelayLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSequencerFutureLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerFutureLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "verifySnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f6c0bc3231f8d3bc295b945ffa1045c99324893887cdd6ccbfa9e2065b5e05d",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0xF0492e87Be6d644A6a467fE20ee9EC5eFCB6cB23",
    "transactionIndex": 1,
    "gasUsed": "59059459",
    "logsBloom": "0x
    "blockHash": "0x5c665f88a8b40978b877644ede92816e1818b678a185055dd7ef2ab149d384e5",
    "transactionHash": "0x3f6c0bc3231f8d3bc295b945ffa1045c99324893887cdd6ccbfa9e2065b5e05d",
    "logs": [],
    "blockNumber": 28631092,
    "cumulativeGasUsed": "59059459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "4000000000000000000",
    7200,
    86400,
    168,
    "0x531754c9935A851173FA349b3bEadAF538c570aC",
    86400,
    3600
  ],
  "numDeployments": 3,
  "solcInputHash": "6b0b750c6eee9aa0a5e450d1f0bbb2d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutEpochs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerGnosisToArb\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerDelayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerFutureLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newsequencerDelayLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerDelayLimitUpdateReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"enum VeaOutboxGnosisToArb.Party\",\"name\":\"honest\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"epochAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerGnosisToArb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerDelayLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerFutureLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeoutEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampDelayUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampFutureUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSequencerDelayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSequencerDelayLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSequencerFutureLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSequencerFutureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"verifySnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vea Outbox From Gnosis to Arbitrum. Note: This contract is deployed on Arbitrum.\",\"events\":{\"Challenged(uint256,address)\":{\"details\":\"This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\",\"params\":{\"_challenger\":\"The address of the challenger.\",\"_epoch\":\"The epoch associated with the challenged claim.\"}},\"Claimed(address,uint256,bytes32)\":{\"details\":\"Watchers check this event to challenge fraud.\",\"params\":{\"_claimer\":\"The address of the claimer.\",\"_epoch\":\"The epoch associated with the claim.\",\"_stateRoot\":\"The state root of the claim.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"_msgId\":\"The msgId of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"_epoch\":\"The epoch that was verified.\"}},\"sequencerDelayLimitUpdateReceived(uint256)\":{\"details\":\"This event indicates the sequencer limit updated.\",\"params\":{\"_newsequencerDelayLimit\":\"The new maxL2StateSyncDelay.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256)\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"_epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor. Note: epochPeriod must match the VeaInboxGnosisToArb contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\",\"params\":{\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_routerGnosisToArb\":\"The address of the router on Ethereum that routes from Arbitrum to Ethereum.\",\"_sequencerDelayLimit\":\"The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.\",\"_sequencerFutureLimit\":\"The maximum delay in seconds that the Arbitrum sequencer can futuredate transactions.\",\"_timeoutEpochs\":\"The epochs before the bridge is considered shutdown.\"}},\"epochAt(uint256)\":{\"details\":\"Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\",\"returns\":{\"epoch\":\"The hash of the claim.\"}},\"epochNow()\":{\"details\":\"Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\",\"returns\":{\"epoch\":\"The hash of the claim.\"}},\"resolveDisputedClaim(uint256,bytes32)\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch to verify.\",\"_stateRoot\":\"The true state root for the epoch.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"_message\":\"The message encoded with header from VeaInbox.\",\"_msgId\":\"The zero based index of the message in the inbox.\",\"_proof\":\"The merkle proof to prove the message.\",\"_to\":\"The address of the contract on Gnosis to call.\"}},\"updateSequencerDelayLimit(uint256,uint256)\":{\"details\":\"Set the sequencerDelayLimit by reading from the Arbitrum Bridge\",\"params\":{\"_newSequencerDelayLimit\":\"The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\",\"_timestamp\":\"The timestamp of the message.\"}},\"updateSequencerFutureLimit(uint256,uint256)\":{\"details\":\"Set the sequencerFutureLimit by reading from the Arbitrum Bridge\",\"params\":{\"_newSequencerFutureLimit\":\"The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\",\"_timestamp\":\"The timestamp of the message.\"}},\"verifySnapshot(uint256)\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengerEscapeHatch(uint256)\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimerEscapeHatch(uint256)\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32)\":{\"notice\":\"Note: Access restricted to AMB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol\":\"VeaOutboxGnosisToArb\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/canonical/arbitrum/AddressAliasHelper.sol\":{\"content\":\"// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/libraries/AddressAliasHelper.sol\\n// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressAliasHelper {\\n    uint160 internal constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n    /// the inbox to the msg.sender viewed in the L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        unchecked {\\n            l2Address = address(uint160(l1Address) + OFFSET);\\n        }\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        unchecked {\\n            l1Address = address(uint160(l2Address) - OFFSET);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa8b6907a33c37e13b3de6e2459d6bd153708be4b8413db3c319ea3a5d8c9b00\",\"license\":\"BUSL-1.1\"},\"src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/outboxes/IVeaOutboxOnL2.sol\\\";\\nimport \\\"../canonical/arbitrum/AddressAliasHelper.sol\\\";\\n\\n/// @dev Vea Outbox From Gnosis to Arbitrum.\\n/// Note: This contract is deployed on Arbitrum.\\ncontract VeaOutboxGnosisToArb is IVeaOutboxOnL2 {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    address public immutable routerGnosisToArb; // The address of the router from Gnosis to Arbitrum on Ethereum.\\n\\n    uint256 public immutable deposit; // The deposit in wei required to submit a claim or challenge\\n    uint256 internal immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 internal immutable depositPlusReward; // 2 * deposit - burn\\n\\n    address internal constant BURN_ADDRESS = address(0); // address to send burned eth\\n\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable challengePeriod; // Claim challenge timewindow.\\n    uint256 public immutable timeoutEpochs; // The number of epochs without forward progress before the bridge is considered shutdown.\\n\\n    uint256 public sequencerDelayLimit; // This is MaxTimeVariation.delaySeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can backdate L2 txns relative to the L1 clock.\\n    uint256 public sequencerFutureLimit; // This is MaxTimeVariation.futureSeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can futuredate L2 txns relative to the L1 clock.\\n    uint256 public timestampDelayUpdated; // The timestamp of the last sequencer delay update.\\n    uint256 public timestampFutureUpdated; // The timestamp of the last sequencer future update.\\n\\n    bytes32 public stateRoot;\\n    uint256 public latestVerifiedEpoch;\\n\\n    mapping(uint256 => Claim) public claims; // epoch => claim\\n    mapping(uint256 => address) public challengers; // epoch => challenger\\n    mapping(uint256 => bytes32) public relayed; // msgId/256 => packed replay bitmap, preferred over a simple boolean mapping to save 15k gas per message\\n\\n    enum Party {\\n        None,\\n        Claimer,\\n        Challenger\\n    }\\n\\n    struct Claim {\\n        bytes32 stateRoot;\\n        address claimer;\\n        uint32 timestamp;\\n        Party honest;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Watchers check this event to challenge fraud.\\n    /// @param _claimer The address of the claimer.\\n    /// @param _epoch The epoch associated with the claim.\\n    /// @param _stateRoot The state root of the claim.\\n    event Claimed(address indexed _claimer, uint256 _epoch, bytes32 _stateRoot);\\n\\n    /// @dev This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\\n    /// @param _epoch The epoch associated with the challenged claim.\\n    /// @param _challenger The address of the challenger.\\n    event Challenged(uint256 _epoch, address indexed _challenger);\\n\\n    /// @dev This event indicates that a message has been relayed.\\n    /// @param _msgId The msgId of the message that was relayed.\\n    event MessageRelayed(uint64 _msgId);\\n\\n    /// @dev This events indicates that verification has succeeded. The messages are ready to be relayed.\\n    /// @param _epoch The epoch that was verified.\\n    event Verified(uint256 _epoch);\\n\\n    /// @dev This event indicates the sequencer limit updated.\\n    /// @param _newsequencerDelayLimit The new maxL2StateSyncDelay.\\n    event sequencerDelayLimitUpdateReceived(uint256 _newsequencerDelayLimit);\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier OnlyBridgeRunning() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod <= latestVerifiedEpoch + timeoutEpochs, \\\"Bridge Shutdown.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod > latestVerifiedEpoch + timeoutEpochs, \\\"Bridge Running.\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @dev Constructor.\\n    /// Note: epochPeriod must match the VeaInboxGnosisToArb contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\\n    /// @param _deposit The deposit amount to submit a claim in wei.\\n    /// @param _epochPeriod The duration of each epoch.\\n    /// @param _challengePeriod The duration of the period allowing to challenge a claim.\\n    /// @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n    /// @param _routerGnosisToArb The address of the router on Ethereum that routes from Arbitrum to Ethereum.\\n    /// @param _sequencerDelayLimit The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.\\n    /// @param _sequencerFutureLimit The maximum delay in seconds that the Arbitrum sequencer can futuredate transactions.\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        address _routerGnosisToArb,\\n        uint256 _sequencerDelayLimit,\\n        uint256 _sequencerFutureLimit\\n    ) {\\n        deposit = _deposit;\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        timeoutEpochs = _timeoutEpochs;\\n        routerGnosisToArb = _routerGnosisToArb;\\n        sequencerDelayLimit = _sequencerDelayLimit;\\n        sequencerFutureLimit = _sequencerFutureLimit;\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n    }\\n\\n    // ************************************* //\\n    // *        Parameter Updates          * //\\n    // ************************************* //\\n\\n    /// @dev Set the sequencerFutureLimit by reading from the Arbitrum Bridge\\n    /// @param _newSequencerFutureLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerFutureLimit(uint256 _newSequencerFutureLimit, uint256 _timestamp) external {\\n        // Ethereum -> Arbitrum retryable ticket message authentication with the canonical Ethereum -> Arbitrum bridge.\\n        // example https://github.com/OffchainLabs/arbitrum-tutorials/blob/672b0b1e514f199133761daac000db954f0b5447/packages/greeter/contracts/arbitrum/GreeterL2.sol\\n        // docs https://developer.arbitrum.io/arbos/l1-to-l2-messaging#address-aliasing\\n\\n        require(msg.sender == AddressAliasHelper.applyL1ToL2Alias(routerGnosisToArb), \\\"Only L1 routerGnosisToArb.\\\");\\n\\n        require(timestampFutureUpdated < _timestamp, \\\"Message is outdated.\\\");\\n\\n        if (sequencerFutureLimit != _newSequencerFutureLimit) {\\n            sequencerFutureLimit = _newSequencerFutureLimit;\\n            timestampFutureUpdated = _timestamp;\\n            emit sequencerDelayLimitUpdateReceived(_newSequencerFutureLimit);\\n        }\\n    }\\n\\n    /// @dev Set the sequencerDelayLimit by reading from the Arbitrum Bridge\\n    /// @param _newSequencerDelayLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerDelayLimit(uint256 _newSequencerDelayLimit, uint256 _timestamp) external {\\n        // Ethereum -> Arbitrum retryable ticket message authentication with the canonical Ethereum -> Arbitrum bridge.\\n        // example https://github.com/OffchainLabs/arbitrum-tutorials/blob/672b0b1e514f199133761daac000db954f0b5447/packages/greeter/contracts/arbitrum/GreeterL2.sol\\n        // docs https://developer.arbitrum.io/arbos/l1-to-l2-messaging#address-aliasing\\n\\n        require(msg.sender == AddressAliasHelper.applyL1ToL2Alias(routerGnosisToArb), \\\"Only L1 routerGnosisToArb.\\\");\\n\\n        require(timestampDelayUpdated < _timestamp, \\\"Message is outdated.\\\");\\n\\n        if (sequencerDelayLimit != _newSequencerDelayLimit) {\\n            sequencerDelayLimit = _newSequencerDelayLimit;\\n            timestampDelayUpdated = _timestamp;\\n            emit sequencerDelayLimitUpdateReceived(_newSequencerDelayLimit);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Submit a claim about the _stateRoot at _epoch and submit a deposit.\\n    /// @param _epoch The epoch for which the claim is made.\\n    /// @param _stateRoot The state root to claim.\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external payable virtual {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n        require(_epoch == block.timestamp / epochPeriod - 1, \\\"Epoch is invalid.\\\");\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claims[_epoch].claimer == address(0), \\\"Claim already made.\\\");\\n\\n        claims[_epoch] = Claim({\\n            stateRoot: _stateRoot,\\n            claimer: msg.sender,\\n            timestamp: uint32(block.timestamp),\\n            honest: Party.None\\n        });\\n\\n        emit Claimed(msg.sender, _epoch, _stateRoot);\\n\\n        // Refund overpayment.\\n        if (msg.value > deposit) {\\n            uint256 refund = msg.value - deposit;\\n            payable(msg.sender).send(refund); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n    /// @param _epoch The epoch of the claim to challenge.\\n    function challenge(uint256 _epoch) external payable virtual {\\n        require(challengers[_epoch] == address(0), \\\"Claim already challenged.\\\");\\n        require(claims[_epoch].claimer != address(0), \\\"No claim for epoch.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n\\n        challengers[_epoch] = msg.sender;\\n\\n        emit Challenged(_epoch, msg.sender);\\n\\n        // Refund overpayment.\\n        if (msg.value > deposit) {\\n            uint256 refund = msg.value - deposit;\\n            payable(msg.sender).send(refund); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev Resolves the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch of the optimistic claim.\\n    function verifySnapshot(uint256 _epoch) external virtual OnlyBridgeRunning {\\n        uint256 claimTimestamp = uint256(claims[_epoch].timestamp);\\n        require(claimTimestamp > 0, \\\"Invalid claim.\\\");\\n        require(challengers[_epoch] == address(0), \\\"Claim is challenged.\\\");\\n\\n        require(\\n            block.timestamp - claimTimestamp >= 2 * sequencerDelayLimit + sequencerFutureLimit + challengePeriod,\\n            \\\"Claim must wait for sequencerDelay and challengePeriod.\\\"\\n        );\\n\\n        if (_epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = claims[_epoch].stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        claims[_epoch].honest = Party.Claimer;\\n    }\\n\\n    /// Note: Access restricted to AMB.\\n    /// @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot) external virtual OnlyBridgeRunning {\\n        // Ethereum -> Arbitrum retryable ticket message authentication with the canonical Ethereum -> Arbitrum bridge.\\n        // example https://github.com/OffchainLabs/arbitrum-tutorials/blob/672b0b1e514f199133761daac000db954f0b5447/packages/greeter/contracts/arbitrum/GreeterL2.sol\\n        // docs https://developer.arbitrum.io/arbos/l1-to-l2-messaging#address-aliasing\\n\\n        require(msg.sender == AddressAliasHelper.applyL1ToL2Alias(routerGnosisToArb), \\\"Only L1 routerGnosisToArb.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        bytes32 claimedStateRoot = claims[_epoch].stateRoot;\\n\\n        if (claimedStateRoot != bytes32(0)) {\\n            if (claimedStateRoot == _stateRoot) {\\n                claims[_epoch].honest = Party.Claimer;\\n            } else if (challengers[_epoch] != address(0)) {\\n                claims[_epoch].honest = Party.Challenger;\\n            }\\n        }\\n    }\\n\\n    /// @dev Verifies and relays the message. UNTRUSTED.\\n    /// @param _proof The merkle proof to prove the message.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address of the contract on Gnosis to call.\\n    /// @param _message The message encoded with header from VeaInbox.\\n    function sendMessage(bytes32[] memory _proof, uint64 _msgId, address _to, bytes memory _message) external {\\n        require(_proof.length < 64, \\\"Proof too long.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(_msgId, _to, _message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < _proof.length; i++) {\\n                bytes32 proofElement = _proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero-based index of the message in the inbox.\\n        // msgId is also used as an index in the relayed bitmap to prevent replay.\\n        // Note: a bitmap is used instead of a simple boolean mapping to save 15k gas per message.\\n\\n        uint256 relayIndex = _msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = _msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = _to.call(_message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(_msgId);\\n    }\\n\\n    /// @dev Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    function withdrawClaimDeposit(uint256 _epoch) external virtual {\\n        require(claims[_epoch].honest == Party.Claimer, \\\"Claim unsuccessful.\\\");\\n\\n        address claimer = claims[_epoch].claimer;\\n\\n        delete claims[_epoch];\\n\\n        if (challengers[_epoch] != address(0)) {\\n            payable(BURN_ADDRESS).send(burn);\\n            payable(claimer).send(depositPlusReward); // User is responsible for accepting ETH.\\n        } else {\\n            payable(claimer).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\\n    /// @param _epoch The epoch associated with the challenge deposit to withraw.\\n    function withdrawChallengeDeposit(uint256 _epoch) external {\\n        require(claims[_epoch].honest == Party.Challenger, \\\"Challenge unsuccessful.\\\");\\n\\n        address challenger = challengers[_epoch];\\n\\n        delete claims[_epoch];\\n        delete challengers[_epoch];\\n\\n        payable(BURN_ADDRESS).send(burn); // half burnt\\n        payable(challenger).send(depositPlusReward); // User is responsible for accepting ETH.\\n    }\\n\\n    /// @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    function withdrawClaimerEscapeHatch(uint256 _epoch) external OnlyBridgeShutdown {\\n        require(claims[_epoch].honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        address claimer = claims[_epoch].claimer;\\n\\n        delete claims[_epoch];\\n\\n        if (claimer != address(0)) {\\n            payable(claimer).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    function withdrawChallengerEscapeHatch(uint256 _epoch) external OnlyBridgeShutdown {\\n        require(claims[_epoch].honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        address challenger = challengers[_epoch];\\n\\n        delete challengers[_epoch];\\n\\n        if (challenger != address(0)) {\\n            payable(challenger).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Pure / Views            * //\\n    // ************************************* //\\n\\n    /// @dev Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\\n    /// @return epoch The hash of the claim.\\n    function epochNow() external view returns (uint256 epoch) {\\n        epoch = block.timestamp / epochPeriod;\\n    }\\n\\n    /// @dev Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\\n    /// @return epoch The hash of the claim.\\n    function epochAt(uint256 timestamp) external view returns (uint256 epoch) {\\n        epoch = timestamp / epochPeriod;\\n    }\\n}\\n\",\"keccak256\":\"0x999ccae7dfc58d5c0e51726634e049b48ebc00dfeb2541f99d818f89a82a169b\",\"license\":\"MIT\"},\"src/interfaces/outboxes/IVeaOutboxOnL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of the Vea Outbox on Optimistic Rollup L2s like Arbitrum, Optimism, Base, Specular where L2 storage is inexpensive compared to L1 calldata.\\ninterface IVeaOutboxOnL2 {\\n    /// @dev Verifies and relays the message.\\n    /// Note: Gateways expect first argument of message call to be the inbox sender, used for authentication.\\n    /// @param _proof The merkle proof to prove the message.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address to send the message to.\\n    /// @param _message The message to relay.\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external;\\n\\n    /// @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n    /// Note: Access restricted to canonical bridge.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot) external;\\n}\\n\",\"keccak256\":\"0x22ece6282ad246dcc086d100644a479be0cee8307d4b5c1440110241002ca013\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162002010380380620020108339810160408190526200003591620000c1565b60a08790526101008690526101208590526101408490526001600160a01b038316608052600082905560018190556200007060028862000147565b60c0819052620000828860026200016a565b6200008e91906200018a565b60e05261010051600190620000a4904262000147565b620000b091906200018a565b60055550620001a095505050505050565b600080600080600080600060e0888a031215620000dd57600080fd5b8751602089015160408a015160608b015160808c0151939a50919850965094506001600160a01b03811681146200011357600080fd5b8093505060a0880151915060c0880151905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b6000826200016557634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141762000184576200018462000131565b92915050565b8181038181111562000184576200018462000131565b60805160a05160c05160e051610100516101205161014051611d5f620002b16000396000818161045d0152818161059d01528181610da2015281816110d201526114450152600081816105590152611221015260008181610491015281816105c20152818161071e015281816108a501528181610dc701528181610f24015281816110f7015261146a01526000818161104d015261191a01526000818161100c01526118d90152600081816104c5015281816106de0152818161083001528181610a8b01528181610ab801528181610ee501528181611098015281816116ca0152818161179601526117c3015260008181610525015281816107530152818161137001526114e40152611d5f6000f3fe60806040526004361061019c5760003560e01c80637ffc2a6e116100ec578063b5b7a1841161008a578063e813a75511610064578063e813a755146104fd578063eb8dedfa14610513578063f3f480d914610547578063f4cf751b1461057b57600080fd5b8063b5b7a1841461047f578063d0e30db0146104b3578063d6e01b39146104e757600080fd5b80639588eca2116100c65780639588eca2146103bb578063a888c2cd146103d1578063ab82d9a014610438578063b044397e1461044b57600080fd5b80637ffc2a6e146103585780638caeb7a81461036e57806390df63b71461038e57600080fd5b806331ddf7431161015957806350b81dbe1161013357806350b81dbe146102aa57806364962849146102ca5780636b45ebcb146102ea578063710cc9a71461033857600080fd5b806331ddf7431461024a5780634518f79f1461026a5780634a439cfe1461028a57600080fd5b80630e56752e146101a1578063114095d3146101ca578063222ae786146101ec57806327ee6bdd146102015780632c1925191461021757806331d1445714610237575b600080fd5b3480156101ad57600080fd5b506101b760015481565b6040519081526020015b60405180910390f35b3480156101d657600080fd5b506101ea6101e5366004611955565b61059b565b005b3480156101f857600080fd5b506101b7610717565b34801561020d57600080fd5b506101b760055481565b34801561022357600080fd5b506101ea61023236600461196e565b610748565b6101ea61024536600461196e565b61082e565b34801561025657600080fd5b506101ea610265366004611a7b565b610b01565b34801561027657600080fd5b506101ea610285366004611955565b610da0565b34801561029657600080fd5b506101b76102a5366004611955565b610f1d565b3480156102b657600080fd5b506101ea6102c5366004611955565b610f4f565b3480156102d657600080fd5b506101ea6102e5366004611955565b6110d0565b3480156102f657600080fd5b50610320610305366004611955565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561034457600080fd5b506101ea61035336600461196e565b611365565b34801561036457600080fd5b506101b760025481565b34801561037a57600080fd5b506101ea61038936600461196e565b611443565b34801561039a57600080fd5b506101b76103a9366004611955565b60086020526000908152604090205481565b3480156103c757600080fd5b506101b760045481565b3480156103dd57600080fd5b506104286103ec366004611955565b600660205260009081526040902080546001909101546001600160a01b03811690600160a01b810463ffffffff1690600160c01b900460ff1684565b6040516101c19493929190611b7d565b6101ea610446366004611955565b611606565b34801561045757600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b34801561048b57600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104bf57600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f357600080fd5b506101b760035481565b34801561050957600080fd5b506101b760005481565b34801561051f57600080fd5b506103207f000000000000000000000000000000000000000000000000000000000000000081565b34801561055357600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b34801561058757600080fd5b506101ea610596366004611955565b61180c565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f000000000000000000000000000000000000000000000000000000000000000042816105ef576105ef611bcc565b04116106345760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064015b60405180910390fd5b60008082815260066020526040902060010154600160c01b900460ff16600281111561066257610662611b67565b146106a15760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161062b565b600081815260076020526040902080546001600160a01b031981169091556001600160a01b03168015610713576040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b5050565b60006107437f000000000000000000000000000000000000000000000000000000000000000042611bf8565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b0101161461079b5760405162461bcd60e51b815260040161062b90611c1a565b80600254106107e35760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b604482015260640161062b565b816000541461071357600082905560028190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa707906020015b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000034101561089e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e0000000000604482015260640161062b565b60016108ca7f000000000000000000000000000000000000000000000000000000000000000042611bf8565b6108d49190611c51565b82146109165760405162461bcd60e51b815260206004820152601160248201527022b837b1b41034b99034b73b30b634b21760791b604482015260640161062b565b806109545760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b604482015260640161062b565b6000828152600660205260409020600101546001600160a01b0316156109b25760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b604482015260640161062b565b6040805160808101825282815233602080830191825263ffffffff4281168486019081526000606086018181528982526006909452959095208451815592516001840180549651909216600160a01b026001600160c01b03199096166001600160a01b039091161794909417808555905192939192919060ff60c01b1916600160c01b836002811115610a4757610a47611b67565b02179055505060408051848152602081018490523392507fd95107f4584744c6c893a04c43058aadd1ce8aac8ca5d64140eaf277de6c1d57910160405180910390a27f0000000000000000000000000000000000000000000000000000000000000000341115610713576000610add7f000000000000000000000000000000000000000000000000000000000000000034611c51565b604051909150339082156108fc029083906000818181858888f15050505050505050565b6040845110610b445760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b604482015260640161062b565b6000838383604051602001610b5b93929190611c94565b604051602081830303815290604052805190602001209050806000526020600020905060005b8551811015610bdd576000868281518110610b9e57610b9e611cd6565b6020026020010151905082811115610bc457826000528060205260406000209250610bd4565b8060005282602052604060002092505b50600101610b81565b508060045414610c205760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b604482015260640161062b565b600884811c66ffffffffffffff16600081815260209290925260409091205460ff86169080821c60011615610c975760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c61796564000000000000000000604482015260640161062b565b6000838152600860205260408082206001851b84179055516001600160a01b03881690610cc5908890611cec565b6000604051808303816000865af19150503d8060008114610d02576040519150601f19603f3d011682016040523d82523d6000602084013e610d07565b606091505b5050905080610d585760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e7472616374000000000000000000604482015260640161062b565b60405167ffffffffffffffff891681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a1505050505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f00000000000000000000000000000000000000000000000000000000000000004281610df457610df4611bcc565b0411610e345760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b604482015260640161062b565b60008082815260066020526040902060010154600160c01b900460ff166002811115610e6257610e62611b67565b14610ea15760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161062b565b6000818152600660205260408120600181018054929091556001600160c81b0319821690556001600160a01b03168015610713576040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b6000610f497f000000000000000000000000000000000000000000000000000000000000000083611bf8565b92915050565b6001600082815260066020526040902060010154600160c01b900460ff166002811115610f7e57610f7e611b67565b14610fc15760405162461bcd60e51b815260206004820152601360248201527221b630b4b6903ab739bab1b1b2b9b9b33ab61760691b604482015260640161062b565b6000818152600660209081526040808320600181018054918590556001600160c81b0319821690556007909252909120546001600160a01b03918216911615611088576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150505050505050565b6040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f0000000000000000000000000000000000000000000000000000000000000000428161112457611124611bcc565b0411156111665760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161062b565b600081815260066020526040902060010154600160a01b900463ffffffff16806111c35760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b604482015260640161062b565b6000828152600760205260409020546001600160a01b03161561121f5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b604482015260640161062b565b7f000000000000000000000000000000000000000000000000000000000000000060015460005460026112529190611cff565b61125c9190611d16565b6112669190611d16565b6112708242611c51565b10156112e45760405162461bcd60e51b815260206004820152603760248201527f436c61696d206d757374207761697420666f722073657175656e63657244656c60448201527f617920616e64206368616c6c656e6765506572696f642e000000000000000000606482015260840161062b565b6005548211156113405760058290556000828152600660205260409081902054600455517ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f7906113379084815260200190565b60405180910390a15b506000908152600660205260409020600101805460ff60c01b1916600160c01b179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b010116146113b85760405162461bcd60e51b815260040161062b90611c1a565b80600354106114005760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b604482015260640161062b565b816001541461071357600182905560038190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa70790602001610822565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f0000000000000000000000000000000000000000000000000000000000000000428161149757611497611bcc565b0411156114d95760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161062b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b0101161461152c5760405162461bcd60e51b815260040161062b90611c1a565b6005548211801561153c57508015155b1561157f57600582905560048190556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b6000828152600660205260409020548015611601578181036115c15750506000908152600660205260409020600101805460ff60c01b1916600160c01b179055565b6000838152600760205260409020546001600160a01b031615611601576000838152600660205260409020600101805460ff60c01b1916600160c11b1790555b505050565b6000818152600760205260409020546001600160a01b03161561166b5760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e00000000000000604482015260640161062b565b6000818152600660205260409020600101546001600160a01b03166116c85760405162461bcd60e51b815260206004820152601360248201527227379031b630b4b6903337b91032b837b1b41760691b604482015260640161062b565b7f00000000000000000000000000000000000000000000000000000000000000003410156117385760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e00604482015260640161062b565b6000818152600760205260409081902080546001600160a01b0319163390811790915590517fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d79061178c9084815260200190565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000003411156118095760006117e87f000000000000000000000000000000000000000000000000000000000000000034611c51565b604051909150339082156108fc029083906000818181858888f15050505050505b50565b6002600082815260066020526040902060010154600160c01b900460ff16600281111561183b5761183b611b67565b146118885760405162461bcd60e51b815260206004820152601760248201527f4368616c6c656e676520756e7375636365737366756c2e000000000000000000604482015260640161062b565b600081815260076020818152604080842080546006845282862086815560010180546001600160c81b03191690559390925281546001600160a01b031916909155516001600160a01b0390911691907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150505050505050565b60006020828403121561196757600080fd5b5035919050565b6000806040838503121561198157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119cf576119cf611990565b604052919050565b803567ffffffffffffffff811681146119ef57600080fd5b919050565b80356001600160a01b03811681146119ef57600080fd5b600082601f830112611a1c57600080fd5b813567ffffffffffffffff811115611a3657611a36611990565b611a49601f8201601f19166020016119a6565b818152846020838601011115611a5e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611a9157600080fd5b843567ffffffffffffffff80821115611aa957600080fd5b818701915087601f830112611abd57600080fd5b8135602082821115611ad157611ad1611990565b8160051b611ae08282016119a6565b928352848101820192828101908c851115611afa57600080fd5b958301955b84871015611b1857863582529583019590830190611aff565b9950611b289150508982016119d7565b96505050611b38604088016119f4565b93506060870135915080821115611b4e57600080fd5b50611b5b87828801611a0b565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b8481526001600160a01b038416602082015263ffffffff831660408201526080810160038310611bbd57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611c1557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601a908201527f4f6e6c79204c3120726f75746572476e6f736973546f4172622e000000000000604082015260600190565b81810381811115610f4957610f49611be2565b6000815160005b81811015611c855760208185018101518683015201611c6b565b50600093019283525090919050565b60c084901b6001600160c01b0319168152606083901b6bffffffffffffffffffffffff191660088201526000611ccd601c830184611c64565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000611cf88284611c64565b9392505050565b8082028115828204841417610f4957610f49611be2565b80820180821115610f4957610f49611be256fea264697066735822122039fffbfa0ff1f969a1c91abf7f0c19828e05fda7df5768914b1c5e812ad01eff64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80637ffc2a6e116100ec578063b5b7a1841161008a578063e813a75511610064578063e813a755146104fd578063eb8dedfa14610513578063f3f480d914610547578063f4cf751b1461057b57600080fd5b8063b5b7a1841461047f578063d0e30db0146104b3578063d6e01b39146104e757600080fd5b80639588eca2116100c65780639588eca2146103bb578063a888c2cd146103d1578063ab82d9a014610438578063b044397e1461044b57600080fd5b80637ffc2a6e146103585780638caeb7a81461036e57806390df63b71461038e57600080fd5b806331ddf7431161015957806350b81dbe1161013357806350b81dbe146102aa57806364962849146102ca5780636b45ebcb146102ea578063710cc9a71461033857600080fd5b806331ddf7431461024a5780634518f79f1461026a5780634a439cfe1461028a57600080fd5b80630e56752e146101a1578063114095d3146101ca578063222ae786146101ec57806327ee6bdd146102015780632c1925191461021757806331d1445714610237575b600080fd5b3480156101ad57600080fd5b506101b760015481565b6040519081526020015b60405180910390f35b3480156101d657600080fd5b506101ea6101e5366004611955565b61059b565b005b3480156101f857600080fd5b506101b7610717565b34801561020d57600080fd5b506101b760055481565b34801561022357600080fd5b506101ea61023236600461196e565b610748565b6101ea61024536600461196e565b61082e565b34801561025657600080fd5b506101ea610265366004611a7b565b610b01565b34801561027657600080fd5b506101ea610285366004611955565b610da0565b34801561029657600080fd5b506101b76102a5366004611955565b610f1d565b3480156102b657600080fd5b506101ea6102c5366004611955565b610f4f565b3480156102d657600080fd5b506101ea6102e5366004611955565b6110d0565b3480156102f657600080fd5b50610320610305366004611955565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561034457600080fd5b506101ea61035336600461196e565b611365565b34801561036457600080fd5b506101b760025481565b34801561037a57600080fd5b506101ea61038936600461196e565b611443565b34801561039a57600080fd5b506101b76103a9366004611955565b60086020526000908152604090205481565b3480156103c757600080fd5b506101b760045481565b3480156103dd57600080fd5b506104286103ec366004611955565b600660205260009081526040902080546001909101546001600160a01b03811690600160a01b810463ffffffff1690600160c01b900460ff1684565b6040516101c19493929190611b7d565b6101ea610446366004611955565b611606565b34801561045757600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b34801561048b57600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104bf57600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f357600080fd5b506101b760035481565b34801561050957600080fd5b506101b760005481565b34801561051f57600080fd5b506103207f000000000000000000000000000000000000000000000000000000000000000081565b34801561055357600080fd5b506101b77f000000000000000000000000000000000000000000000000000000000000000081565b34801561058757600080fd5b506101ea610596366004611955565b61180c565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f000000000000000000000000000000000000000000000000000000000000000042816105ef576105ef611bcc565b04116106345760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064015b60405180910390fd5b60008082815260066020526040902060010154600160c01b900460ff16600281111561066257610662611b67565b146106a15760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161062b565b600081815260076020526040902080546001600160a01b031981169091556001600160a01b03168015610713576040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b5050565b60006107437f000000000000000000000000000000000000000000000000000000000000000042611bf8565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b0101161461079b5760405162461bcd60e51b815260040161062b90611c1a565b80600254106107e35760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b604482015260640161062b565b816000541461071357600082905560028190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa707906020015b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000034101561089e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e0000000000604482015260640161062b565b60016108ca7f000000000000000000000000000000000000000000000000000000000000000042611bf8565b6108d49190611c51565b82146109165760405162461bcd60e51b815260206004820152601160248201527022b837b1b41034b99034b73b30b634b21760791b604482015260640161062b565b806109545760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b604482015260640161062b565b6000828152600660205260409020600101546001600160a01b0316156109b25760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b604482015260640161062b565b6040805160808101825282815233602080830191825263ffffffff4281168486019081526000606086018181528982526006909452959095208451815592516001840180549651909216600160a01b026001600160c01b03199096166001600160a01b039091161794909417808555905192939192919060ff60c01b1916600160c01b836002811115610a4757610a47611b67565b02179055505060408051848152602081018490523392507fd95107f4584744c6c893a04c43058aadd1ce8aac8ca5d64140eaf277de6c1d57910160405180910390a27f0000000000000000000000000000000000000000000000000000000000000000341115610713576000610add7f000000000000000000000000000000000000000000000000000000000000000034611c51565b604051909150339082156108fc029083906000818181858888f15050505050505050565b6040845110610b445760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b604482015260640161062b565b6000838383604051602001610b5b93929190611c94565b604051602081830303815290604052805190602001209050806000526020600020905060005b8551811015610bdd576000868281518110610b9e57610b9e611cd6565b6020026020010151905082811115610bc457826000528060205260406000209250610bd4565b8060005282602052604060002092505b50600101610b81565b508060045414610c205760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b604482015260640161062b565b600884811c66ffffffffffffff16600081815260209290925260409091205460ff86169080821c60011615610c975760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c61796564000000000000000000604482015260640161062b565b6000838152600860205260408082206001851b84179055516001600160a01b03881690610cc5908890611cec565b6000604051808303816000865af19150503d8060008114610d02576040519150601f19603f3d011682016040523d82523d6000602084013e610d07565b606091505b5050905080610d585760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e7472616374000000000000000000604482015260640161062b565b60405167ffffffffffffffff891681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a1505050505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f00000000000000000000000000000000000000000000000000000000000000004281610df457610df4611bcc565b0411610e345760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b604482015260640161062b565b60008082815260066020526040902060010154600160c01b900460ff166002811115610e6257610e62611b67565b14610ea15760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161062b565b6000818152600660205260408120600181018054929091556001600160c81b0319821690556001600160a01b03168015610713576040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b6000610f497f000000000000000000000000000000000000000000000000000000000000000083611bf8565b92915050565b6001600082815260066020526040902060010154600160c01b900460ff166002811115610f7e57610f7e611b67565b14610fc15760405162461bcd60e51b815260206004820152601360248201527221b630b4b6903ab739bab1b1b2b9b9b33ab61760691b604482015260640161062b565b6000818152600660209081526040808320600181018054918590556001600160c81b0319821690556007909252909120546001600160a01b03918216911615611088576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150505050505050565b6040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f0000000000000000000000000000000000000000000000000000000000000000428161112457611124611bcc565b0411156111665760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161062b565b600081815260066020526040902060010154600160a01b900463ffffffff16806111c35760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b604482015260640161062b565b6000828152600760205260409020546001600160a01b03161561121f5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b604482015260640161062b565b7f000000000000000000000000000000000000000000000000000000000000000060015460005460026112529190611cff565b61125c9190611d16565b6112669190611d16565b6112708242611c51565b10156112e45760405162461bcd60e51b815260206004820152603760248201527f436c61696d206d757374207761697420666f722073657175656e63657244656c60448201527f617920616e64206368616c6c656e6765506572696f642e000000000000000000606482015260840161062b565b6005548211156113405760058290556000828152600660205260409081902054600455517ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f7906113379084815260200190565b60405180910390a15b506000908152600660205260409020600101805460ff60c01b1916600160c01b179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b010116146113b85760405162461bcd60e51b815260040161062b90611c1a565b80600354106114005760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b604482015260640161062b565b816001541461071357600182905560038190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa70790602001610822565b7f0000000000000000000000000000000000000000000000000000000000000000600554017f0000000000000000000000000000000000000000000000000000000000000000428161149757611497611bcc565b0411156114d95760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161062b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b0101161461152c5760405162461bcd60e51b815260040161062b90611c1a565b6005548211801561153c57508015155b1561157f57600582905560048190556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b6000828152600660205260409020548015611601578181036115c15750506000908152600660205260409020600101805460ff60c01b1916600160c01b179055565b6000838152600760205260409020546001600160a01b031615611601576000838152600660205260409020600101805460ff60c01b1916600160c11b1790555b505050565b6000818152600760205260409020546001600160a01b03161561166b5760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e00000000000000604482015260640161062b565b6000818152600660205260409020600101546001600160a01b03166116c85760405162461bcd60e51b815260206004820152601360248201527227379031b630b4b6903337b91032b837b1b41760691b604482015260640161062b565b7f00000000000000000000000000000000000000000000000000000000000000003410156117385760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e00604482015260640161062b565b6000818152600760205260409081902080546001600160a01b0319163390811790915590517fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d79061178c9084815260200190565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000003411156118095760006117e87f000000000000000000000000000000000000000000000000000000000000000034611c51565b604051909150339082156108fc029083906000818181858888f15050505050505b50565b6002600082815260066020526040902060010154600160c01b900460ff16600281111561183b5761183b611b67565b146118885760405162461bcd60e51b815260206004820152601760248201527f4368616c6c656e676520756e7375636365737366756c2e000000000000000000604482015260640161062b565b600081815260076020818152604080842080546006845282862086815560010180546001600160c81b03191690559390925281546001600160a01b031916909155516001600160a01b0390911691907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150505050505050565b60006020828403121561196757600080fd5b5035919050565b6000806040838503121561198157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119cf576119cf611990565b604052919050565b803567ffffffffffffffff811681146119ef57600080fd5b919050565b80356001600160a01b03811681146119ef57600080fd5b600082601f830112611a1c57600080fd5b813567ffffffffffffffff811115611a3657611a36611990565b611a49601f8201601f19166020016119a6565b818152846020838601011115611a5e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611a9157600080fd5b843567ffffffffffffffff80821115611aa957600080fd5b818701915087601f830112611abd57600080fd5b8135602082821115611ad157611ad1611990565b8160051b611ae08282016119a6565b928352848101820192828101908c851115611afa57600080fd5b958301955b84871015611b1857863582529583019590830190611aff565b9950611b289150508982016119d7565b96505050611b38604088016119f4565b93506060870135915080821115611b4e57600080fd5b50611b5b87828801611a0b565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b8481526001600160a01b038416602082015263ffffffff831660408201526080810160038310611bbd57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611c1557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601a908201527f4f6e6c79204c3120726f75746572476e6f736973546f4172622e000000000000604082015260600190565b81810381811115610f4957610f49611be2565b6000815160005b81811015611c855760208185018101518683015201611c6b565b50600093019283525090919050565b60c084901b6001600160c01b0319168152606083901b6bffffffffffffffffffffffff191660088201526000611ccd601c830184611c64565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000611cf88284611c64565b9392505050565b8082028115828204841417610f4957610f49611be2565b80820180821115610f4957610f49611be256fea264697066735822122039fffbfa0ff1f969a1c91abf7f0c19828e05fda7df5768914b1c5e812ad01eff64736f6c63430008120033",
  "devdoc": {
    "details": "Vea Outbox From Gnosis to Arbitrum. Note: This contract is deployed on Arbitrum.",
    "events": {
      "Challenged(uint256,address)": {
        "details": "This event indicates that `sendSnapshot(epoch)` should be called in the inbox.",
        "params": {
          "_challenger": "The address of the challenger.",
          "_epoch": "The epoch associated with the challenged claim."
        }
      },
      "Claimed(address,uint256,bytes32)": {
        "details": "Watchers check this event to challenge fraud.",
        "params": {
          "_claimer": "The address of the claimer.",
          "_epoch": "The epoch associated with the claim.",
          "_stateRoot": "The state root of the claim."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "_msgId": "The msgId of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "_epoch": "The epoch that was verified."
        }
      },
      "sequencerDelayLimitUpdateReceived(uint256)": {
        "details": "This event indicates the sequencer limit updated.",
        "params": {
          "_newsequencerDelayLimit": "The new maxL2StateSyncDelay."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256)": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "_epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor. Note: epochPeriod must match the VeaInboxGnosisToArb contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value",
        "params": {
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochPeriod": "The duration of each epoch.",
          "_routerGnosisToArb": "The address of the router on Ethereum that routes from Arbitrum to Ethereum.",
          "_sequencerDelayLimit": "The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.",
          "_sequencerFutureLimit": "The maximum delay in seconds that the Arbitrum sequencer can futuredate transactions.",
          "_timeoutEpochs": "The epochs before the bridge is considered shutdown."
        }
      },
      "epochAt(uint256)": {
        "details": "Get the current epoch from the outbox's point of view using the Ethereum L1 clock.",
        "returns": {
          "epoch": "The hash of the claim."
        }
      },
      "epochNow()": {
        "details": "Get the current epoch from the outbox's point of view using the Ethereum L1 clock.",
        "returns": {
          "epoch": "The hash of the claim."
        }
      },
      "resolveDisputedClaim(uint256,bytes32)": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch to verify.",
          "_stateRoot": "The true state root for the epoch."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "_message": "The message encoded with header from VeaInbox.",
          "_msgId": "The zero based index of the message in the inbox.",
          "_proof": "The merkle proof to prove the message.",
          "_to": "The address of the contract on Gnosis to call."
        }
      },
      "updateSequencerDelayLimit(uint256,uint256)": {
        "details": "Set the sequencerDelayLimit by reading from the Arbitrum Bridge",
        "params": {
          "_newSequencerDelayLimit": "The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.",
          "_timestamp": "The timestamp of the message."
        }
      },
      "updateSequencerFutureLimit(uint256,uint256)": {
        "details": "Set the sequencerFutureLimit by reading from the Arbitrum Bridge",
        "params": {
          "_newSequencerFutureLimit": "The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.",
          "_timestamp": "The timestamp of the message."
        }
      },
      "verifySnapshot(uint256)": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256)": {
        "details": "Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "_epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengerEscapeHatch(uint256)": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256)": {
        "details": "Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimerEscapeHatch(uint256)": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32)": {
        "notice": "Note: Access restricted to AMB."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4180,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "sequencerDelayLimit",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4182,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "sequencerFutureLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4184,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "timestampDelayUpdated",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4186,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "timestampFutureUpdated",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4188,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "stateRoot",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 4190,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4195,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "claims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Claim)4217_storage)"
      },
      {
        "astId": 4199,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "challengers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4203,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "relayed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Party)4207": {
        "encoding": "inplace",
        "label": "enum VeaOutboxGnosisToArb.Party",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Claim)4217_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VeaOutboxGnosisToArb.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)4217_storage"
      },
      "t_struct(Claim)4217_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutboxGnosisToArb.Claim",
        "members": [
          {
            "astId": 4209,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "stateRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4211,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "claimer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4213,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "timestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 4216,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "honest",
            "offset": 24,
            "slot": "1",
            "type": "t_enum(Party)4207"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
