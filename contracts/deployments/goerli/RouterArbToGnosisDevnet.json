{
  "address": "0xA649Ba96A0D57F684188245Cd5b65E58cf02F6b2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract IAMB",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaInboxArbToGnosis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaOutboxArbToGnosis",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ticketID",
          "type": "bytes32"
        }
      ],
      "name": "Routed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amb",
      "outputs": [
        {
          "internalType": "contract IAMB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "stateroot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "route",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaInboxArbToGnosis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaOutboxArbToGnosis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5cdb680e61974a045c3f1956292e065ab26038b6800ba7cab483bc03a084523f",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0xA649Ba96A0D57F684188245Cd5b65E58cf02F6b2",
    "transactionIndex": 1,
    "gasUsed": "413720",
    "logsBloom": "0x
    "blockHash": "0x7405b333f5d7abf15785b59d32de2828ae0d996fe5903d49e26e4ee1f89abf56",
    "transactionHash": "0x5cdb680e61974a045c3f1956292e065ab26038b6800ba7cab483bc03a084523f",
    "logs": [],
    "blockNumber": 9048180,
    "cumulativeGasUsed": "434720",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
    "0x99Ca51a3534785ED619f46A79C7Ad65Fa8d85e7a",
    "0x9C7c2D9276E6C543960943C82f12Ff952B937F46",
    "0x169838Ae4272b68B702b36CeEF5f36a4B7B18A3F"
  ],
  "numDeployments": 8,
  "solcInputHash": "c969dbb068abf4957098c008212d1a0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IAMB\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaInboxArbToGnosis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaOutboxArbToGnosis\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ticketID\",\"type\":\"bytes32\"}],\"name\":\"Routed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateroot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"route\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaInboxArbToGnosis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaOutboxArbToGnosis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Routed(uint256,bytes32)\":{\"details\":\"Event emitted when a message is relayed to another Safe Bridge.\",\"params\":{\"epoch\":\"The epoch of the batch requested to send.\",\"ticketID\":\"The unique identifier provided by the underlying canonical bridge.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_amb\":\"The address of the AMB contract on Ethereum.\",\"_bridge\":\"The address of the arbitrum bridge contract on Ethereum.\",\"_veaInboxArbToGnosis\":\"The vea inbox on Arbitrum.\",\"_veaOutboxArbToGnosis\":\"The vea outbox on Gnosis Chain.\"}},\"route(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"epoch\":\"The epoch to verify.\",\"stateroot\":\"The true batch merkle root for the epoch.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"route(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"notice\":\"Note: Access restricted to arbitrum canonical bridge.\"}},\"notice\":\"Router on Ethereum from Arbitrum to Gnosis Chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitrumToGnosis/RouterArbToGnosis.sol\":\"RouterArbToGnosis\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/arbitrumToGnosis/RouterArbToGnosis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@shotaronowhere, @jaybuidl]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../canonical/gnosis-chain/IAMB.sol\\\";\\nimport \\\"../canonical/arbitrum/IBridge.sol\\\";\\nimport \\\"../canonical/arbitrum/IOutbox.sol\\\";\\nimport \\\"../interfaces/routers/IRouterToL1.sol\\\";\\nimport \\\"../interfaces/outboxes/IVeaOutboxOnL1.sol\\\";\\n\\n/**\\n * Router on Ethereum from Arbitrum to Gnosis Chain.\\n */\\ncontract RouterArbToGnosis is IRouterToL1 {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    IBridge public immutable bridge; // The address of the Arbitrum bridge contract.\\n    IAMB public immutable amb; // The address of the AMB contract on Ethereum.\\n    address public immutable veaInboxArbToGnosis; // The address of the veaInbox on Arbitrum.\\n    address public immutable veaOutboxArbToGnosis; // The address of the veaOutbox on Gnosis Chain.\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Event emitted when a message is relayed to another Safe Bridge.\\n     * @param epoch The epoch of the batch requested to send.\\n     * @param ticketID The unique identifier provided by the underlying canonical bridge.\\n     */\\n    event Routed(uint256 indexed epoch, bytes32 ticketID);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _bridge The address of the arbitrum bridge contract on Ethereum.\\n     * @param _amb The address of the AMB contract on Ethereum.\\n     * @param _veaInboxArbToGnosis The vea inbox on Arbitrum.\\n     * @param _veaOutboxArbToGnosis The vea outbox on Gnosis Chain.\\n     */\\n    constructor(IBridge _bridge, IAMB _amb, address _veaInboxArbToGnosis, address _veaOutboxArbToGnosis) {\\n        bridge = _bridge;\\n        amb = _amb;\\n        veaInboxArbToGnosis = _veaInboxArbToGnosis;\\n        veaOutboxArbToGnosis = _veaOutboxArbToGnosis;\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * Note: Access restricted to arbitrum canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param epoch The epoch to verify.\\n     * @param stateroot The true batch merkle root for the epoch.\\n     */\\n    function route(uint256 epoch, bytes32 stateroot, Claim calldata claim) external {\\n        // Arbitrum -> Ethereum message sender authentication\\n        // docs: https://developer.arbitrum.io/arbos/l2-to-l1-messaging/\\n        // example: https://github.com/OffchainLabs/arbitrum-tutorials/blob/2c1b7d2db8f36efa496e35b561864c0f94123a5f/packages/greeter/contracts/ethereum/GreeterL1.sol#L50\\n        // example: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/dfef6a68ee18dbd2e1f5a099061a3b8a0e404485/contracts/crosschain/arbitrum/LibArbitrumL1.sol#L34\\n        // note: we use the bridge address as a source of truth for the activeOutbox address\\n\\n        require(msg.sender == address(bridge), \\\"Not from bridge.\\\");\\n        require(IOutbox(bridge.activeOutbox()).l2ToL1Sender() == veaInboxArbToGnosis, \\\"veaInbox only.\\\");\\n\\n        // Ethereum -> Gnosis message passing with the AMB, the canonical Ethereum <-> Gnosis bridge.\\n        // https://docs.tokenbridge.net/amb-bridge/development-of-a-cross-chain-application/how-to-develop-xchain-apps-by-amb#receive-a-method-call-from-the-amb-bridge\\n\\n        bytes memory data = abi.encodeCall(IVeaOutboxOnL1.resolveDisputedClaim, (epoch, stateroot, claim));\\n        // Note: using maxGasPerTx here means the relaying txn on Gnosis will need to pass that (large) amount of gas, though almost all will be unused and refunded. This is preferred over hardcoding a gas limit.\\n        bytes32 ticketID = amb.requireToPassMessage(veaOutboxArbToGnosis, data, amb.maxGasPerTx());\\n        emit Routed(epoch, ticketID);\\n    }\\n}\\n\",\"keccak256\":\"0x961c95e0d230d9f1a60a0e32820b20cd61ee7b6a9470aab61b188841ee8d0888\",\"license\":\"MIT\"},\"src/canonical/arbitrum/IBridge.sol\":{\"content\":\"// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IBridge.sol\\n// proxy: https://etherscan.io/address/0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a\\n// implementation: https://etherscan.io/address/0x1066cecc8880948fe55e427e94f1ff221d626591#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IBridge {\\n    function activeOutbox() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4087f2b5f4e9d2cdb2ebd352ba187f343c9c3ca7b20512b9d54ccf99a06692f5\"},\"src/canonical/arbitrum/IOutbox.sol\":{\"content\":\"// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IBridge.sol\\n// proxy: https://etherscan.io/address/0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840#code\\n// implementation: https://etherscan.io/address/0x0ea7372338a589e7f0b00e463a53aa464ef04e17#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IOutbox {\\n    /// @notice When l2ToL1Sender returns a nonzero address, the message was originated by an L2 account\\n    ///         When the return value is zero, that means this is a system message\\n    /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n    function l2ToL1Sender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f4b4815b49b6f5cea5c75ccd32a5166d04c398143c683049ffba35c051258fb\"},\"src/canonical/gnosis-chain/IAMB.sol\":{\"content\":\"// https://docs.gnosischain.com/bridges/tokenbridge/amb-bridge#gnosis\\n// https://github.com/omni/tokenbridge-contracts/blob/908a48107919d4ab127f9af07d44d47eac91547e/contracts/interfaces/IAMB.sol\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IAMB {\\n    function requireToPassMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\\n\\n    function maxGasPerTx() external view returns (uint256);\\n\\n    function messageSender() external view returns (address);\\n\\n    function messageSourceChainId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x529d45e46ca0c046c32b296b35ae8073c4a999ef37510545ec44d26e78deca0d\"},\"src/interfaces/outboxes/IVeaOutboxOnL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../types/VeaClaim.sol\\\";\\n\\n/**\\n * @dev Interface of the Vea Outbox on L1 chains like Ethereum, Gnosis, Polygon POS where storage is expensive.\\n */\\ninterface IVeaOutboxOnL1 {\\n    /**\\n     * Note: Gateways expect first argument of message call to be the arbitrum message sender, used for authentication.\\n     * @dev Verifies and relays the message.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address to send the message to.\\n     * @param message The message to relay.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external;\\n\\n    /**\\n     * Note: Access restricted to canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n     * @param epoch The epoch to verify.\\n     * @param stateRoot The true state root for the epoch.\\n     * @param claim The claim associated with the epoch.\\n     */\\n    function resolveDisputedClaim(uint256 epoch, bytes32 stateRoot, Claim memory claim) external;\\n}\\n\",\"keccak256\":\"0x8919bf94762bb8f02eb1c060da530f4f113f5bcf593e583cb17d9a8d888d9617\",\"license\":\"MIT\"},\"src/interfaces/routers/IRouterToL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../types/VeaClaim.sol\\\";\\n\\n/**\\n * @dev Interface of the Vea Router on an intermediary chain which routes messages to an L1 chain like Gnosis, Polygon POS etc. as a final destination.\\n * @dev eg. L2 on Gnosis -> Gnosis (L1) -> Ethereum (L1), the IRouterToL1 will be deployed on Gnosis (L1) routing messages to Ethereum (L1).\\n * @dev eg. L2 on Ethereum -> Ethereum (L1) -> Gnosis (L1), the IRouterToL1 will be deployed on Ethereum (L1) routing messages to Gnosis (L1). \\n */\\ninterface IRouterToL1 {\\n    /**\\n     * Note: Access restricted to canonical sending-chain bridge.\\n     * @dev Routes state root snapshots through intermediary chains to the final destination L1 chain.\\n     * @param epoch The epoch to verify.\\n     * @param stateRoot The true state root for the epoch.\\n     * @param claim The claim associated with the epoch.\\n     */\\n    function route(uint256 epoch, bytes32 stateRoot, Claim memory claim) external;\\n}\\n\",\"keccak256\":\"0x492f073ac9e0f6fae6b368aa22d46219519f82a0dfd760c7fccaeaa78b4ac465\",\"license\":\"MIT\"},\"src/interfaces/types/VeaClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nenum Party {\\n    None,\\n    Claimer,\\n    Challenger\\n}\\n\\nstruct Claim {\\n    bytes32 stateRoot;\\n    address claimer;\\n    uint32 timestamp;\\n    uint32 blocknumber;\\n    Party honest;\\n    address challenger;\\n}\\n\",\"keccak256\":\"0x1bdda50afbf5f966278a867e7149397ed820de658c15dda4266e70c314df17d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161079a38038061079a8339810160408190526100309161006a565b6001600160a01b0393841660805291831660a052821660c0521660e0526100c9565b6001600160a01b038116811461006757600080fd5b50565b6000806000806080858703121561008057600080fd5b845161008b81610052565b602086015190945061009c81610052565b60408601519093506100ad81610052565b60608601519092506100be81610052565b939692955090935050565b60805160a05160c05160e0516106786101226000396000818160a4015261037601526000818160cb015261019b0152600081816061015261034d0152600081816101070152818161013401526101c501526106786000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631062b39a1461005c5780632fa70aa71461009f5780638c5f173f146100c6578063b9457b07146100ed578063e78cea9214610102575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6101006100fb366004610487565b610129565b005b6100837f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101995760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024591906104e1565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a691906104e1565b6001600160a01b0316146102ed5760405162461bcd60e51b815260206004820152600e60248201526d3b32b0a4b73137bc1037b7363c9760911b6044820152606401610190565b600083838360405160240161030493929190610529565b60408051601f19818403018152918152602080830180516001600160e01b0316631ee9e40360e21b179052815163e5789d0360e01b815291519293506000926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263dc8601b3927f0000000000000000000000000000000000000000000000000000000000000000928792869263e5789d03926004808401938290030181865afa1580156103bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e391906105c4565b6040518463ffffffff1660e01b8152600401610401939291906105dd565b6020604051808303816000875af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044491906105c4565b9050847f888a9bef5168f83425ebe9503cb6d29081cf58d52c60126f8a85a22c9d9935548260405161047891815260200190565b60405180910390a25050505050565b600080600083850361010081121561049e57600080fd5b843593506020850135925060c0603f19820112156104bb57600080fd5b506040840190509250925092565b6001600160a01b03811681146104de57600080fd5b50565b6000602082840312156104f357600080fd5b81516104fe816104c9565b9392505050565b8035610510816104c9565b919050565b803563ffffffff8116811461051057600080fd5b83815260208082018490528235604083015261010082019083013561054d816104c9565b6001600160a01b0316606083015261056760408401610515565b63ffffffff80821660808501528061058160608701610515565b1660a0850152505060808301356003811061059b57600080fd5b60c08301526105ac60a08401610505565b6001600160a01b03811660e084015250949350505050565b6000602082840312156105d657600080fd5b5051919050565b60018060a01b038416815260006020606081840152845180606085015260005b81811015610619578681018301518582016080015282016105fd565b506000608082860101526080601f19601f8301168501019250505082604083015294935050505056fea26469706673582212200fde807ac8231b686485ffb9e7c9b0b05c5e3bb753c6642a6c3a25bc6cfbffb864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631062b39a1461005c5780632fa70aa71461009f5780638c5f173f146100c6578063b9457b07146100ed578063e78cea9214610102575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6101006100fb366004610487565b610129565b005b6100837f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101995760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024591906104e1565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a691906104e1565b6001600160a01b0316146102ed5760405162461bcd60e51b815260206004820152600e60248201526d3b32b0a4b73137bc1037b7363c9760911b6044820152606401610190565b600083838360405160240161030493929190610529565b60408051601f19818403018152918152602080830180516001600160e01b0316631ee9e40360e21b179052815163e5789d0360e01b815291519293506000926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263dc8601b3927f0000000000000000000000000000000000000000000000000000000000000000928792869263e5789d03926004808401938290030181865afa1580156103bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e391906105c4565b6040518463ffffffff1660e01b8152600401610401939291906105dd565b6020604051808303816000875af1158015610420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044491906105c4565b9050847f888a9bef5168f83425ebe9503cb6d29081cf58d52c60126f8a85a22c9d9935548260405161047891815260200190565b60405180910390a25050505050565b600080600083850361010081121561049e57600080fd5b843593506020850135925060c0603f19820112156104bb57600080fd5b506040840190509250925092565b6001600160a01b03811681146104de57600080fd5b50565b6000602082840312156104f357600080fd5b81516104fe816104c9565b9392505050565b8035610510816104c9565b919050565b803563ffffffff8116811461051057600080fd5b83815260208082018490528235604083015261010082019083013561054d816104c9565b6001600160a01b0316606083015261056760408401610515565b63ffffffff80821660808501528061058160608701610515565b1660a0850152505060808301356003811061059b57600080fd5b60c08301526105ac60a08401610505565b6001600160a01b03811660e084015250949350505050565b6000602082840312156105d657600080fd5b5051919050565b60018060a01b038416815260006020606081840152845180606085015260005b81811015610619578681018301518582016080015282016105fd565b506000608082860101526080601f19601f8301168501019250505082604083015294935050505056fea26469706673582212200fde807ac8231b686485ffb9e7c9b0b05c5e3bb753c6642a6c3a25bc6cfbffb864736f6c63430008120033",
  "devdoc": {
    "events": {
      "Routed(uint256,bytes32)": {
        "details": "Event emitted when a message is relayed to another Safe Bridge.",
        "params": {
          "epoch": "The epoch of the batch requested to send.",
          "ticketID": "The unique identifier provided by the underlying canonical bridge."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_amb": "The address of the AMB contract on Ethereum.",
          "_bridge": "The address of the arbitrum bridge contract on Ethereum.",
          "_veaInboxArbToGnosis": "The vea inbox on Arbitrum.",
          "_veaOutboxArbToGnosis": "The vea outbox on Gnosis Chain."
        }
      },
      "route(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "epoch": "The epoch to verify.",
          "stateroot": "The true batch merkle root for the epoch."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "route(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "notice": "Note: Access restricted to arbitrum canonical bridge."
      }
    },
    "notice": "Router on Ethereum from Arbitrum to Gnosis Chain.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
