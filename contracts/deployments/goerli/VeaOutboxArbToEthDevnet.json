{
  "address": "0xAA0FA4fB781d8e17F3998291774601e06f2f27be",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_veaInbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMissingBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "hashClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMissingBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "passedTest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testnetOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeoutEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "validateSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaInbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum IVeaOutboxArbGoerliToGoerli.Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct IVeaOutboxArbGoerliToGoerli.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b8a6f4fe22e688dee681fec30979f79e1ef44bcae9a2737d8c3631d08911639",
  "receipt": {
    "to": null,
    "from": "0x209469C921db9d5Bd77084370e80B63d5cdD63C1",
    "contractAddress": "0xAA0FA4fB781d8e17F3998291774601e06f2f27be",
    "transactionIndex": 50,
    "gasUsed": "1823347",
    "logsBloom": "0x
    "blockHash": "0xaa8c357cefc746db76dda86a160fdbf12441306808d2ab34b0bc4de2fac911d6",
    "transactionHash": "0x5b8a6f4fe22e688dee681fec30979f79e1ef44bcae9a2737d8c3631d08911639",
    "logs": [],
    "blockNumber": 8904168,
    "cumulativeGasUsed": "8375146",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    3600,
    1800,
    10000000000000,
    0,
    "0x3b894FE680deB990b4Fb7E7D0000C32Af06687C3",
    "0x6BEbC4925716945D46F0Ec336D5C2564F419682C",
    10000000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "c1bd9c1deff19ffeff78fee5cb8f2036",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_veaInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMissingBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"hashClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMissingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"passedTest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testnetOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeoutEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"validateSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaInbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum IVeaOutboxArbGoerliToGoerli.Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct IVeaOutboxArbGoerliToGoerli.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Challenged(uint256,address)\":{\"details\":\"This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\",\"params\":{\"challenger\":\"The address of the challenger.\",\"epoch\":\"The epoch associated with the challenged claim.\"}},\"Claimed(address,bytes32)\":{\"details\":\"Watcher check this event to challenge fraud.\",\"params\":{\"claimer\":\"The address of the claimer.\",\"stateRoot\":\"The state root of the challenged claim.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"msgId\":\"The msgId of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"epoch\":\"The epoch that was verified.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_claimDelay\":\"The number of epochs a claim can be submitted for.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_inbox\":\"The address of the inbox contract on Ethereum.\",\"_maxMissingBlocks\":\"The maximum number of blocks that can be missing in a challenge period.\",\"_timeoutEpochs\":\"The epochs before the bridge is considered shutdown.\",\"_veaInbox\":\"The address of the inbox contract on Arbitrum.\"}},\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_stateRoot\":\"The true state root for the epoch.\",\"epoch\":\"The epoch to verify.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"message\":\"The message encoded with header from VeaInbox.\",\"msgId\":\"The zero based index of the message in the inbox.\",\"proof\":\"The merkle proof to prove the message.\",\"to\":\"The address of the contract on the receiving chain which receives the calldata.\"}},\"validateSnapshot(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"notice\":\"Note: Access restricted to arbitrum  bridge.\"}},\"notice\":\"Vea Bridge Outbox From Arbitrum to Ethereum.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/testnets/arbitrumGoerliToGoerli/VeaOutboxArbGoerliToGoerli.sol\":\"VeaOutboxArbGoerliToGoerli\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/canonical/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.7.0;\\n\\ninterface IInbox {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n}\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0xb567e54805f44ea8405231284583880a38e8a22bfe619528a4f8ec7550f11d1b\",\"license\":\"Apache-2.0\"},\"src/canonical/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.7.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(uint256 indexed batchNum, uint256 outboxIndex, bytes32 outputRoot, uint256 numInBatch);\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths) external;\\n}\\n\",\"keccak256\":\"0xdc4952b5238d6c6282595b2eab4058c86d2d232b99a2d67556c02d6c11eea94f\",\"license\":\"Apache-2.0\"},\"src/testnets/arbitrumGoerliToGoerli/VeaOutboxArbGoerliToGoerli.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../../canonical/arbitrum/IInbox.sol\\\";\\nimport \\\"../../canonical/arbitrum/IOutbox.sol\\\";\\nimport \\\"./interfaces/IVeaOutboxArbGoerliToGoerli.sol\\\";\\n\\n/**\\n * Vea Bridge Outbox From Arbitrum to Ethereum.\\n */\\ncontract VeaOutboxArbGoerliToGoerli is IVeaOutboxArbGoerliToGoerli {\\n    IInbox public immutable inbox; // The address of the Arbitrum Inbox contract.\\n    address public immutable veaInbox; // The address of the veaInbox on arbitrum.\\n\\n    uint256 public immutable deposit; // The deposit required to submit a claim or challenge\\n    uint256 internal immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 internal immutable depositPlusReward; // 2 * deposit - burn\\n    address internal constant burnAddress = address(0x0000000000000000000000000000000000000000);\\n\\n    uint256 internal constant slotTime = 12; // Ethereum 12 second slot time\\n    address public immutable testnetOperator;\\n\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable challengePeriod; // Claim challenge timewindow.\\n    uint256 public immutable claimDelay; // Can only claim for epochs after this delay. eg 1 => claims about epoch 1 can be made in epoch 2.\\n\\n    uint256 public immutable timeoutEpochs; // The number of epochs without forward progress before the bridge is considered shutdown.\\n    uint256 public immutable maxMissingBlocks; // The maximum number of blocks that can be missing in a challenge period.\\n\\n    bytes32 public stateRoot;\\n    uint256 public latestVerifiedEpoch;\\n\\n    mapping(uint256 => bytes32) public claimHashes; // epoch => claim\\n    mapping(uint256 => bytes32) public relayed; // msgId/256 => packed replay bitmap\\n\\n    /**\\n     * @dev Watcher check this event to challenge fraud.\\n     * @param claimer The address of the claimer.\\n     * @param stateRoot The state root of the challenged claim.\\n     */\\n    event Claimed(address indexed claimer, bytes32 stateRoot);\\n\\n    /**\\n     * @dev This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\\n     * @param epoch The epoch associated with the challenged claim.\\n     * @param challenger The address of the challenger.\\n     */\\n    event Challenged(uint256 epoch, address indexed challenger);\\n\\n    /**\\n     * @dev This event indicates that a message has been relayed.\\n     * @param msgId The msgId of the message that was relayed.\\n     */\\n    event MessageRelayed(uint64 msgId);\\n\\n    /**\\n     * @dev This events indicates that verification has succeeded. The messages are ready to be relayed.\\n     * @param epoch The epoch that was verified.\\n     */\\n    event Verified(uint256 epoch);\\n\\n    modifier OnlyBridgeRunning() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod <= latestVerifiedEpoch + timeoutEpochs, \\\"Bridge Shutdown.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        unchecked {\\n            require(latestVerifiedEpoch + timeoutEpochs < block.timestamp / epochPeriod, \\\"Bridge Running.\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n     * @param _claimDelay The number of epochs a claim can be submitted for.\\n     * @param _veaInbox The address of the inbox contract on Arbitrum.\\n     * @param _inbox The address of the inbox contract on Ethereum.\\n     * @param _maxMissingBlocks The maximum number of blocks that can be missing in a challenge period.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        uint256 _claimDelay,\\n        address _veaInbox,\\n        address _inbox,\\n        uint256 _maxMissingBlocks\\n    ) {\\n        deposit = _deposit;\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        timeoutEpochs = _timeoutEpochs;\\n        claimDelay = _claimDelay;\\n        veaInbox = _veaInbox;\\n        inbox = IInbox(_inbox);\\n        maxMissingBlocks = _maxMissingBlocks;\\n        testnetOperator = msg.sender;\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n\\n        require(claimDelay <= block.timestamp, \\\"Invalid epochClaimDelay.\\\");\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Submit a claim about the the _stateRoot at _epoch and submit a deposit.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateRoot The state root to claim.\\n     */\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external payable {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n        require(msg.sender == testnetOperator, \\\"Invalid Testnet Operator\\\");\\n\\n        unchecked {\\n            require((block.timestamp - claimDelay) / epochPeriod == _epoch, \\\"Invalid epoch.\\\");\\n        }\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claimHashes[_epoch] == bytes32(0), \\\"Claim already made.\\\");\\n\\n        claimHashes[_epoch] = hashClaim(\\n            Claim({\\n                stateRoot: _stateRoot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n\\n        emit Claimed(msg.sender, _stateRoot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n     * @param epoch The epoch of the claim to challenge.\\n     */\\n    function challenge(uint256 epoch, Claim memory claim) external payable {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n        require(msg.sender == testnetOperator, \\\"Invalid Testnet Operator\\\");\\n\\n        unchecked {\\n            require(block.timestamp < uint256(claim.timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n        }\\n\\n        claim.challenger = msg.sender;\\n        claimHashes[epoch] = hashClaim(claim);\\n\\n        emit Challenged(epoch, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param epoch The epoch of the optimistic claim.\\n     */\\n    function validateSnapshot(uint256 epoch, Claim memory claim) external OnlyBridgeRunning {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n\\n        unchecked {\\n            require(claim.timestamp + challengePeriod < block.timestamp, \\\"Challenge period has not yet elapsed.\\\");\\n            require(\\n                // expected blocks <= actual blocks + maxMissingBlocks\\n                uint256(claim.blocknumber) + (block.timestamp - uint256(claim.timestamp)) / slotTime <=\\n                    block.number + maxMissingBlocks,\\n                \\\"Too many missing blocks. Possible censorship attack. Use canonical bridge.\\\"\\n            );\\n        }\\n\\n        require(claim.challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = epoch;\\n            stateRoot = claim.stateRoot;\\n            emit Verified(epoch);\\n        }\\n\\n        claim.honest = Party.Claimer;\\n        claimHashes[epoch] = hashClaim(claim);\\n    }\\n\\n    /**\\n     * Note: Access restricted to arbitrum  bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param epoch The epoch to verify.\\n     * @param _stateRoot The true state root for the epoch.\\n     */\\n    function resolveDisputedClaim(\\n        uint256 epoch,\\n        bytes32 _stateRoot,\\n        Claim memory claim\\n    ) external virtual OnlyBridgeRunning {\\n        IBridge bridge = inbox.bridge();\\n        require(msg.sender == address(bridge), \\\"Not from bridge.\\\");\\n        require(IOutbox(bridge.activeOutbox()).l2ToL1Sender() == veaInbox, \\\"Sender only.\\\");\\n\\n        if (epoch > latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            latestVerifiedEpoch = epoch;\\n            stateRoot = _stateRoot;\\n            emit Verified(epoch);\\n        }\\n\\n        if (claimHashes[epoch] == hashClaim(claim) && claim.honest == Party.None) {\\n            if (claim.stateRoot == _stateRoot) {\\n                claim.honest = Party.Claimer;\\n            } else if (claim.challenger != address(0)) {\\n                claim.honest = Party.Challenger;\\n            }\\n            claimHashes[epoch] = hashClaim(claim);\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev Verifies and relays the message. UNTRUSTED.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address of the contract on the receiving chain which receives the calldata.\\n     * @param message The message encoded with header from VeaInbox.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external {\\n        require(proof.length < 64, \\\"Proof too long.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(msgId, to, message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero based index of the message in the inbox and is the same index to prevent replay\\n\\n        uint256 relayIndex = msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = to.call(message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(msgId);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 epoch, Claim calldata claim) external {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.Claimer, \\\"Claim failed.\\\");\\n\\n        delete claimHashes[epoch];\\n\\n        if (claim.challenger != address(0)) {\\n            payable(burnAddress).send(burn);\\n            payable(claim.claimer).send(depositPlusReward); // User is responsibility for accepting ETH.\\n        } else {\\n            payable(claim.claimer).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDeposit(uint256 epoch, Claim calldata claim) external {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.Challenger, \\\"Challenge failed.\\\");\\n\\n        delete claimHashes[epoch];\\n\\n        payable(burnAddress).send(burn); // half burnt\\n        payable(claim.challenger).send(depositPlusReward); // User is responsibility for accepting ETH.\\n    }\\n\\n    /**\\n     * @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimerEscapeHatch(uint256 epoch, Claim memory claim) external OnlyBridgeShutdown {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (claim.claimer != address(0)){\\n            if (claim.challenger == address(0)) {\\n                delete claimHashes[epoch];\\n            } else {\\n                claim.claimer = address(0);\\n                claimHashes[epoch] == hashClaim(claim);\\n            }\\n            payable(claim.claimer).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n    /**\\n     * @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawChallengerEscapeHatch(uint256 epoch, Claim memory claim) external OnlyBridgeShutdown {\\n        require(claimHashes[epoch] == hashClaim(claim), \\\"Invalid claim.\\\");\\n        require(claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (claim.challenger != address(0)){\\n            if (claim.claimer == address(0)) {\\n                delete claimHashes[epoch];\\n            } else {\\n                claim.challenger = address(0);\\n                claimHashes[epoch] == hashClaim(claim);\\n            }\\n            payable(claim.challenger).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n    }\\n\\n    function hashClaim(Claim memory claim) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    claim.stateRoot,\\n                    claim.claimer,\\n                    claim.timestamp,\\n                    claim.blocknumber,\\n                    claim.honest,\\n                    claim.challenger\\n                )\\n            );\\n    }\\n\\n    function passedTest(Claim calldata claim) external view returns(bool) {\\n        uint256 expectedBlocks = uint256(claim.blocknumber) + (block.timestamp - uint256(claim.timestamp)) / slotTime;\\n        uint256 actualBlocks = block.number;\\n        return (expectedBlocks <= actualBlocks + maxMissingBlocks);\\n    }\\n}\",\"keccak256\":\"0x4f0d3f0422508eb22acf3114f3ead63b9fad7b559f4b9abb9891cd5b52983572\",\"license\":\"MIT\"},\"src/testnets/arbitrumGoerliToGoerli/interfaces/IVeaOutboxArbGoerliToGoerli.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\ninterface IVeaOutboxArbGoerliToGoerli {\\n    enum Party {\\n        None,\\n        Claimer,\\n        Challenger\\n    }\\n\\n    struct Claim {\\n        bytes32 stateRoot;\\n        address claimer;\\n        uint32 timestamp;\\n        uint32 blocknumber;\\n        Party honest;\\n        address challenger;\\n    }\\n\\n    /**\\n     * Note: Gateways expect first argument of message call to be the inbox sender, used for authenitcation.\\n     * @dev Verifies and relays the message.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address to send the message to.\\n     * @param message The message to relay.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external;\\n\\n    /**\\n     * Note: Access restricted to canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n     * @param epoch The epoch to verify.\\n     * @param stateRoot The true state root for the epoch.\\n     */\\n    function resolveDisputedClaim(uint256 epoch, bytes32 stateRoot, Claim memory claim) external;\\n}\\n\",\"keccak256\":\"0xdc0f1576ba1242fba44a5ee27f4b7af351485a26762c9902a7b6b6c74a8c00ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b50604051620022e6380380620022e6833981016040819052620000359162000144565b60c08890526101408790526101608690526101a08590526101808490526001600160a01b0380841660a05282166080526101c081905233610120526200007d600289620001cc565b60e08190526200008f896002620001ef565b6200009b91906200020f565b6101005261014051600190620000b29042620001cc565b620000be91906200020f565b60015561018051421015620001195760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642065706f6368436c61696d44656c61792e0000000000000000604482015260640160405180910390fd5b505050505050505062000225565b80516001600160a01b03811681146200013f57600080fd5b919050565b600080600080600080600080610100898b0312156200016257600080fd5b88519750602089015196506040890151955060608901519450608089015193506200019060a08a0162000127565b9250620001a060c08a0162000127565b915060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b600082620001ea57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417620002095762000209620001b6565b92915050565b81810381811115620002095762000209620001b6565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051611f9262000354600039600081816103730152818161058401526114080152600081816103a701528181610cf9015281816112b4015281816115cb015261178e0152600081816101e301526108850152600081816104b7015281816111e601526113800152600081816103db0152818161086401528181610d1e015281816112d90152818161159b015261175e01526000818161044f015281816107f9015261117c015260006106e501526000818161069201526119d60152600081816104830152818161074001528181610780015281816111030152818161172401526118e70152600081816101620152610e6001526000818161050b0152610d910152611f926000f3fe60806040526004361061014b5760003560e01c8063a53d3c26116100b6578063c299be331161006f578063c299be331461041d578063c4402e7f1461043d578063d0e30db014610471578063f3f480d9146104a5578063f939bad9146104d9578063fb0e722b146104f957600080fd5b8063a53d3c261461032e578063a557d91814610341578063aa22a1c614610361578063b044397e14610395578063b5b7a184146103c9578063bd7df3f9146103fd57600080fd5b806331d144571161010857806331d144571461027857806331ddf7431461028b57806334c75d72146102ab5780637ba7900c146102cb57806390df63b7146102eb5780639588eca21461031857600080fd5b806302d3e2361461015057806310e8f6bf146101a15780631c8ec299146101d15780632415855b146102135780632639c0601461023557806327ee6bdd14610262575b600080fd5b34801561015c57600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ad57600080fd5b506101c16101bc366004611a33565b61052d565b6040519015158152602001610198565b3480156101dd57600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610198565b34801561021f57600080fd5b5061023361022e366004611a56565b6105b4565b005b34801561024157600080fd5b50610205610250366004611a83565b60026020526000908152604090205481565b34801561026e57600080fd5b5061020560015481565b610233610286366004611a9c565b61077e565b34801561029757600080fd5b506102336102a6366004611b47565b610a0a565b3480156102b757600080fd5b506102056102c6366004611cd5565b610caa565b3480156102d757600080fd5b506102336102e6366004611cf1565b610cf7565b3480156102f757600080fd5b50610205610306366004611a83565b60036020526000908152604090205481565b34801561032457600080fd5b5061020560005481565b61023361033c366004611d28565b611071565b34801561034d57600080fd5b5061023361035c366004611d28565b6112b2565b34801561036d57600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a157600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d557600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b34801561040957600080fd5b50610233610418366004611d28565b611599565b34801561042957600080fd5b50610233610438366004611d28565b61175c565b34801561044957600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b34801561047d57600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b157600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e557600080fd5b506102336104f4366004611a56565b61191f565b34801561050557600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b600080600c6105426060850160408601611d4c565b6105529063ffffffff1642611d7d565b61055c9190611dac565b61056c6080850160608601611d4c565b63ffffffff1661057c9190611dce565b9050436105a97f000000000000000000000000000000000000000000000000000000000000000082611dce565b909111159392505050565b6105c66102c636839003830183611cd5565b600083815260026020526040902054146105fb5760405162461bcd60e51b81526004016105f290611de1565b60405180910390fd5b600161060d60a0830160808401611e1f565b600281111561061e5761061e611e09565b1461065b5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016105f2565b600082815260026020526040812081905561067c60c0830160a08401611e3a565b6001600160a01b031614610722576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f1506106d79350506040840191505060208301611e3a565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505050565b6107326040820160208301611e3a565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156107ee5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016105f2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108615760405162461bcd60e51b815260206004820152601860248201527724b73b30b634b2102a32b9ba3732ba1027b832b930ba37b960411b60448201526064016105f2565b817f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004203816108b3576108b3611d96565b04146108f25760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b60448201526064016105f2565b8061090f5760405162461bcd60e51b81526004016105f290611de1565b600082815260026020526040902054156109615760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016105f2565b6109be6040518060c00160405280838152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600060028111156109af576109af611e09565b81526000602090910152610caa565b600083815260026020908152604091829020929092555182815233917f91d697238e9aa9f3172d17522c9be529b94a892481554e1ea619369b5b12f39a91015b60405180910390a25050565b60408510610a4c5760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016105f2565b600084848484604051602001610a659493929190611e57565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610ae5576000888883818110610aa757610aa7611e99565b90506020020135905082811115610acc57826000528060205260406000209250610adc565b8060005282602052604060002092505b50600101610a8b565b508060005414610b285760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016105f2565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c60011615610b9d5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016105f2565b6000838152600360205260408082206001851b84179055516001600160a01b03891690610bcd9089908990611eaf565b6000604051808303816000865af19150503d8060008114610c0a576040519150601f19603f3d011682016040523d82523d6000602084013e610c0f565b606091505b5050905080610c605760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016105f2565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610cda979096959101611ebf565b604051602081830303815290604052805190602001209050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f00000000000000000000000000000000000000000000000000000000000000004281610d4b57610d4b611d96565b041115610d8d5760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105f2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611f3f565b9050336001600160a01b03821614610e5e5760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016105f2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190611f3f565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611f3f565b6001600160a01b031614610f905760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b60448201526064016105f2565b60015484118015610fa057508215155b15610fe357600184905560008390556040518481527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610fec82610caa565b60008581526002602052604090205414801561101d575060008260800151600281111561101b5761101b611e09565b145b1561106b5781518390036110375760016080830152611052565b60a08201516001600160a01b03161561105257600260808301525b61105b82610caa565b6000858152600260205260409020555b50505050565b61107a81610caa565b600083815260026020526040902054146110a65760405162461bcd60e51b81526004016105f290611de1565b60a08101516001600160a01b0316156111015760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016105f2565b7f00000000000000000000000000000000000000000000000000000000000000003410156111715760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016105f2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111e45760405162461bcd60e51b815260206004820152601860248201527724b73b30b634b2102a32b9ba3732ba1027b832b930ba37b960411b60448201526064016105f2565b7f0000000000000000000000000000000000000000000000000000000000000000816040015163ffffffff1601421061125f5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e0000000000000060448201526064016105f2565b3360a082015261126e81610caa565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d791016109fe565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f0000000000000000000000000000000000000000000000000000000000000000428161130657611306611d96565b0411156113485760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105f2565b61135181610caa565b6000838152600260205260409020541461137d5760405162461bcd60e51b81526004016105f290611de1565b427f0000000000000000000000000000000000000000000000000000000000000000826040015163ffffffff1601106114065760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b60648201526084016105f2565b7f00000000000000000000000000000000000000000000000000000000000000004301600c826040015163ffffffff1642038161144557611445611d96565b04826060015163ffffffff160111156114d95760405162461bcd60e51b815260206004820152604a60248201527f546f6f206d616e79206d697373696e6720626c6f636b732e20506f737369626c60448201527f652063656e736f72736869702061747461636b2e205573652063616e6f6e696360648201526930b610313934b233b29760b11b608482015260a4016105f2565b60a08101516001600160a01b03161561152b5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016105f2565b60015482111561157357600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b6001608082015261158381610caa565b6000928352600260205260409092209190915550565b7f000000000000000000000000000000000000000000000000000000000000000042816115c8576115c8611d96565b047f0000000000000000000000000000000000000000000000000000000000000000600154011061162d5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105f2565b61163681610caa565b600083815260026020526040902054146116625760405162461bcd60e51b81526004016105f290611de1565b60008160800151600281111561167a5761167a611e09565b146116b95760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105f2565b60a08101516001600160a01b03161561077a5760208101516001600160a01b03166116f25760008281526002602052604081205561170e565b600060a082015261170281610caa565b50600082905260026020525b60a08101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000428161178b5761178b611d96565b047f000000000000000000000000000000000000000000000000000000000000000060015401106117f05760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105f2565b6117f981610caa565b600083815260026020526040902054146118255760405162461bcd60e51b81526004016105f290611de1565b60008160800151600281111561183d5761183d611e09565b1461187c5760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105f2565b60208101516001600160a01b03161561077a5760a08101516001600160a01b03166118b5576000828152600260205260408120556118d1565b600060208201526118c581610caa565b50600082905260026020525b60208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b6119316102c636839003830183611cd5565b6000838152600260205260409020541461195d5760405162461bcd60e51b81526004016105f290611de1565b600261196f60a0830160808401611e1f565b600281111561198057611980611e09565b146119c15760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016105f2565b600082815260026020526040808220829055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f1506106d793505060c0840191505060a08301611e3a565b600060c08284031215611a2d57600080fd5b50919050565b600060c08284031215611a4557600080fd5b611a4f8383611a1b565b9392505050565b60008060e08385031215611a6957600080fd5b82359150611a7a8460208501611a1b565b90509250929050565b600060208284031215611a9557600080fd5b5035919050565b60008060408385031215611aaf57600080fd5b50508035926020909101359150565b803567ffffffffffffffff81168114611ad657600080fd5b919050565b6001600160a01b0381168114611af057600080fd5b50565b8035611ad681611adb565b60008083601f840112611b1057600080fd5b50813567ffffffffffffffff811115611b2857600080fd5b602083019150836020828501011115611b4057600080fd5b9250929050565b60008060008060008060808789031215611b6057600080fd5b863567ffffffffffffffff80821115611b7857600080fd5b818901915089601f830112611b8c57600080fd5b813581811115611b9b57600080fd5b8a60208260051b8501011115611bb057600080fd5b60208301985080975050611bc660208a01611abe565b9550611bd460408a01611af3565b94506060890135915080821115611bea57600080fd5b50611bf789828a01611afe565b979a9699509497509295939492505050565b803563ffffffff81168114611ad657600080fd5b803560038110611ad657600080fd5b600060c08284031215611c3e57600080fd5b60405160c0810181811067ffffffffffffffff82111715611c6f57634e487b7160e01b600052604160045260246000fd5b60405282358152905080611c8560208401611af3565b6020820152611c9660408401611c09565b6040820152611ca760608401611c09565b6060820152611cb860808401611c1d565b6080820152611cc960a08401611af3565b60a08201525092915050565b600060c08284031215611ce757600080fd5b611a4f8383611c2c565b60008060006101008486031215611d0757600080fd5b8335925060208401359150611d1f8560408601611c2c565b90509250925092565b60008060e08385031215611d3b57600080fd5b82359150611a7a8460208501611c2c565b600060208284031215611d5e57600080fd5b611a4f82611c09565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d9057611d90611d67565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611dc957634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611d9057611d90611d67565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611e3157600080fd5b611a4f82611c1d565b600060208284031215611e4c57600080fd5b8135611a4f81611adb565b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b86815260006bffffffffffffffffffffffff19808860601b16602084015263ffffffff60e01b808860e01b166034850152808760e01b1660388501525060038510611f1a57634e487b7160e01b600052602160045260246000fd5b60f89490941b603c8301525060609190911b909116603d820152605101949350505050565b600060208284031215611f5157600080fd5b8151611a4f81611adb56fea2646970667358221220e99844252590a3c0a4de080b5fc134211eba93dcf44fe20c3e1f38ccdd908b7364736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063a53d3c26116100b6578063c299be331161006f578063c299be331461041d578063c4402e7f1461043d578063d0e30db014610471578063f3f480d9146104a5578063f939bad9146104d9578063fb0e722b146104f957600080fd5b8063a53d3c261461032e578063a557d91814610341578063aa22a1c614610361578063b044397e14610395578063b5b7a184146103c9578063bd7df3f9146103fd57600080fd5b806331d144571161010857806331d144571461027857806331ddf7431461028b57806334c75d72146102ab5780637ba7900c146102cb57806390df63b7146102eb5780639588eca21461031857600080fd5b806302d3e2361461015057806310e8f6bf146101a15780631c8ec299146101d15780632415855b146102135780632639c0601461023557806327ee6bdd14610262575b600080fd5b34801561015c57600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ad57600080fd5b506101c16101bc366004611a33565b61052d565b6040519015158152602001610198565b3480156101dd57600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610198565b34801561021f57600080fd5b5061023361022e366004611a56565b6105b4565b005b34801561024157600080fd5b50610205610250366004611a83565b60026020526000908152604090205481565b34801561026e57600080fd5b5061020560015481565b610233610286366004611a9c565b61077e565b34801561029757600080fd5b506102336102a6366004611b47565b610a0a565b3480156102b757600080fd5b506102056102c6366004611cd5565b610caa565b3480156102d757600080fd5b506102336102e6366004611cf1565b610cf7565b3480156102f757600080fd5b50610205610306366004611a83565b60036020526000908152604090205481565b34801561032457600080fd5b5061020560005481565b61023361033c366004611d28565b611071565b34801561034d57600080fd5b5061023361035c366004611d28565b6112b2565b34801561036d57600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a157600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d557600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b34801561040957600080fd5b50610233610418366004611d28565b611599565b34801561042957600080fd5b50610233610438366004611d28565b61175c565b34801561044957600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b34801561047d57600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b157600080fd5b506102057f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e557600080fd5b506102336104f4366004611a56565b61191f565b34801561050557600080fd5b506101847f000000000000000000000000000000000000000000000000000000000000000081565b600080600c6105426060850160408601611d4c565b6105529063ffffffff1642611d7d565b61055c9190611dac565b61056c6080850160608601611d4c565b63ffffffff1661057c9190611dce565b9050436105a97f000000000000000000000000000000000000000000000000000000000000000082611dce565b909111159392505050565b6105c66102c636839003830183611cd5565b600083815260026020526040902054146105fb5760405162461bcd60e51b81526004016105f290611de1565b60405180910390fd5b600161060d60a0830160808401611e1f565b600281111561061e5761061e611e09565b1461065b5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016105f2565b600082815260026020526040812081905561067c60c0830160a08401611e3a565b6001600160a01b031614610722576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f1506106d79350506040840191505060208301611e3a565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505050565b6107326040820160208301611e3a565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156107ee5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016105f2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108615760405162461bcd60e51b815260206004820152601860248201527724b73b30b634b2102a32b9ba3732ba1027b832b930ba37b960411b60448201526064016105f2565b817f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004203816108b3576108b3611d96565b04146108f25760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b60448201526064016105f2565b8061090f5760405162461bcd60e51b81526004016105f290611de1565b600082815260026020526040902054156109615760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016105f2565b6109be6040518060c00160405280838152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600060028111156109af576109af611e09565b81526000602090910152610caa565b600083815260026020908152604091829020929092555182815233917f91d697238e9aa9f3172d17522c9be529b94a892481554e1ea619369b5b12f39a91015b60405180910390a25050565b60408510610a4c5760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016105f2565b600084848484604051602001610a659493929190611e57565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610ae5576000888883818110610aa757610aa7611e99565b90506020020135905082811115610acc57826000528060205260406000209250610adc565b8060005282602052604060002092505b50600101610a8b565b508060005414610b285760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016105f2565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c60011615610b9d5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016105f2565b6000838152600360205260408082206001851b84179055516001600160a01b03891690610bcd9089908990611eaf565b6000604051808303816000865af19150503d8060008114610c0a576040519150601f19603f3d011682016040523d82523d6000602084013e610c0f565b606091505b5050905080610c605760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016105f2565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610cda979096959101611ebf565b604051602081830303815290604052805190602001209050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f00000000000000000000000000000000000000000000000000000000000000004281610d4b57610d4b611d96565b041115610d8d5760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105f2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611f3f565b9050336001600160a01b03821614610e5e5760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016105f2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190611f3f565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611f3f565b6001600160a01b031614610f905760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b60448201526064016105f2565b60015484118015610fa057508215155b15610fe357600184905560008390556040518481527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610fec82610caa565b60008581526002602052604090205414801561101d575060008260800151600281111561101b5761101b611e09565b145b1561106b5781518390036110375760016080830152611052565b60a08201516001600160a01b03161561105257600260808301525b61105b82610caa565b6000858152600260205260409020555b50505050565b61107a81610caa565b600083815260026020526040902054146110a65760405162461bcd60e51b81526004016105f290611de1565b60a08101516001600160a01b0316156111015760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016105f2565b7f00000000000000000000000000000000000000000000000000000000000000003410156111715760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016105f2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111e45760405162461bcd60e51b815260206004820152601860248201527724b73b30b634b2102a32b9ba3732ba1027b832b930ba37b960411b60448201526064016105f2565b7f0000000000000000000000000000000000000000000000000000000000000000816040015163ffffffff1601421061125f5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e0000000000000060448201526064016105f2565b3360a082015261126e81610caa565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d791016109fe565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f0000000000000000000000000000000000000000000000000000000000000000428161130657611306611d96565b0411156113485760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016105f2565b61135181610caa565b6000838152600260205260409020541461137d5760405162461bcd60e51b81526004016105f290611de1565b427f0000000000000000000000000000000000000000000000000000000000000000826040015163ffffffff1601106114065760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b60648201526084016105f2565b7f00000000000000000000000000000000000000000000000000000000000000004301600c826040015163ffffffff1642038161144557611445611d96565b04826060015163ffffffff160111156114d95760405162461bcd60e51b815260206004820152604a60248201527f546f6f206d616e79206d697373696e6720626c6f636b732e20506f737369626c60448201527f652063656e736f72736869702061747461636b2e205573652063616e6f6e696360648201526930b610313934b233b29760b11b608482015260a4016105f2565b60a08101516001600160a01b03161561152b5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016105f2565b60015482111561157357600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b6001608082015261158381610caa565b6000928352600260205260409092209190915550565b7f000000000000000000000000000000000000000000000000000000000000000042816115c8576115c8611d96565b047f0000000000000000000000000000000000000000000000000000000000000000600154011061162d5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105f2565b61163681610caa565b600083815260026020526040902054146116625760405162461bcd60e51b81526004016105f290611de1565b60008160800151600281111561167a5761167a611e09565b146116b95760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105f2565b60a08101516001600160a01b03161561077a5760208101516001600160a01b03166116f25760008281526002602052604081205561170e565b600060a082015261170281610caa565b50600082905260026020525b60a08101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000428161178b5761178b611d96565b047f000000000000000000000000000000000000000000000000000000000000000060015401106117f05760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016105f2565b6117f981610caa565b600083815260026020526040902054146118255760405162461bcd60e51b81526004016105f290611de1565b60008160800151600281111561183d5761183d611e09565b1461187c5760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016105f2565b60208101516001600160a01b03161561077a5760a08101516001600160a01b03166118b5576000828152600260205260408120556118d1565b600060208201526118c581610caa565b50600082905260026020525b60208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b6119316102c636839003830183611cd5565b6000838152600260205260409020541461195d5760405162461bcd60e51b81526004016105f290611de1565b600261196f60a0830160808401611e1f565b600281111561198057611980611e09565b146119c15760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016105f2565b600082815260026020526040808220829055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f1506106d793505060c0840191505060a08301611e3a565b600060c08284031215611a2d57600080fd5b50919050565b600060c08284031215611a4557600080fd5b611a4f8383611a1b565b9392505050565b60008060e08385031215611a6957600080fd5b82359150611a7a8460208501611a1b565b90509250929050565b600060208284031215611a9557600080fd5b5035919050565b60008060408385031215611aaf57600080fd5b50508035926020909101359150565b803567ffffffffffffffff81168114611ad657600080fd5b919050565b6001600160a01b0381168114611af057600080fd5b50565b8035611ad681611adb565b60008083601f840112611b1057600080fd5b50813567ffffffffffffffff811115611b2857600080fd5b602083019150836020828501011115611b4057600080fd5b9250929050565b60008060008060008060808789031215611b6057600080fd5b863567ffffffffffffffff80821115611b7857600080fd5b818901915089601f830112611b8c57600080fd5b813581811115611b9b57600080fd5b8a60208260051b8501011115611bb057600080fd5b60208301985080975050611bc660208a01611abe565b9550611bd460408a01611af3565b94506060890135915080821115611bea57600080fd5b50611bf789828a01611afe565b979a9699509497509295939492505050565b803563ffffffff81168114611ad657600080fd5b803560038110611ad657600080fd5b600060c08284031215611c3e57600080fd5b60405160c0810181811067ffffffffffffffff82111715611c6f57634e487b7160e01b600052604160045260246000fd5b60405282358152905080611c8560208401611af3565b6020820152611c9660408401611c09565b6040820152611ca760608401611c09565b6060820152611cb860808401611c1d565b6080820152611cc960a08401611af3565b60a08201525092915050565b600060c08284031215611ce757600080fd5b611a4f8383611c2c565b60008060006101008486031215611d0757600080fd5b8335925060208401359150611d1f8560408601611c2c565b90509250925092565b60008060e08385031215611d3b57600080fd5b82359150611a7a8460208501611c2c565b600060208284031215611d5e57600080fd5b611a4f82611c09565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d9057611d90611d67565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611dc957634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611d9057611d90611d67565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611e3157600080fd5b611a4f82611c1d565b600060208284031215611e4c57600080fd5b8135611a4f81611adb565b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b86815260006bffffffffffffffffffffffff19808860601b16602084015263ffffffff60e01b808860e01b166034850152808760e01b1660388501525060038510611f1a57634e487b7160e01b600052602160045260246000fd5b60f89490941b603c8301525060609190911b909116603d820152605101949350505050565b600060208284031215611f5157600080fd5b8151611a4f81611adb56fea2646970667358221220e99844252590a3c0a4de080b5fc134211eba93dcf44fe20c3e1f38ccdd908b7364736f6c63430008120033",
  "devdoc": {
    "events": {
      "Challenged(uint256,address)": {
        "details": "This event indicates that `sendSnapshot(epoch)` should be called in the inbox.",
        "params": {
          "challenger": "The address of the challenger.",
          "epoch": "The epoch associated with the challenged claim."
        }
      },
      "Claimed(address,bytes32)": {
        "details": "Watcher check this event to challenge fraud.",
        "params": {
          "claimer": "The address of the claimer.",
          "stateRoot": "The state root of the challenged claim."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "msgId": "The msgId of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "epoch": "The epoch that was verified."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_claimDelay": "The number of epochs a claim can be submitted for.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochPeriod": "The duration of each epoch.",
          "_inbox": "The address of the inbox contract on Ethereum.",
          "_maxMissingBlocks": "The maximum number of blocks that can be missing in a challenge period.",
          "_timeoutEpochs": "The epochs before the bridge is considered shutdown.",
          "_veaInbox": "The address of the inbox contract on Arbitrum."
        }
      },
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_stateRoot": "The true state root for the epoch.",
          "epoch": "The epoch to verify."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "message": "The message encoded with header from VeaInbox.",
          "msgId": "The zero based index of the message in the inbox.",
          "proof": "The merkle proof to prove the message.",
          "to": "The address of the contract on the receiving chain which receives the calldata."
        }
      },
      "validateSnapshot(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "notice": "Note: Access restricted to arbitrum  bridge."
      }
    },
    "notice": "Vea Bridge Outbox From Arbitrum to Ethereum.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9449,
        "contract": "src/testnets/arbitrumGoerliToGoerli/VeaOutboxArbGoerliToGoerli.sol:VeaOutboxArbGoerliToGoerli",
        "label": "stateRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 9451,
        "contract": "src/testnets/arbitrumGoerliToGoerli/VeaOutboxArbGoerliToGoerli.sol:VeaOutboxArbGoerliToGoerli",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9455,
        "contract": "src/testnets/arbitrumGoerliToGoerli/VeaOutboxArbGoerliToGoerli.sol:VeaOutboxArbGoerliToGoerli",
        "label": "claimHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 9459,
        "contract": "src/testnets/arbitrumGoerliToGoerli/VeaOutboxArbGoerliToGoerli.sol:VeaOutboxArbGoerliToGoerli",
        "label": "relayed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
