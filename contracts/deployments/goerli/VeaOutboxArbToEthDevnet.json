{
  "address": "0x9235A379950B9f01fb3e2961C06912A96DCcef0e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochClaimDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_veaInboxArbToEthDevnet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxMissingBlocks",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devnetOperator",
          "type": "address"
        }
      ],
      "name": "changeDevnetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateroot",
          "type": "bytes32"
        }
      ],
      "name": "devnetAdvanceState",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devnetOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "hashClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hashedClaim",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMissingBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "passedTest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "testPassed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeoutEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "validateSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaInboxArbToEth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawChallengerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blocknumber",
              "type": "uint32"
            },
            {
              "internalType": "enum Party",
              "name": "honest",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "internalType": "struct Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "withdrawClaimerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa450c2b14e8b8115b73ed7d3c50df227c82773559b2a2f52ac7e8b6f93d7cda8",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0x9235A379950B9f01fb3e2961C06912A96DCcef0e",
    "transactionIndex": 10,
    "gasUsed": "1901118",
    "logsBloom": "0x
    "blockHash": "0xeb32a690a77950b7793a1d47aa1666cd15fec5d677fb1276bae83ed734400ad3",
    "transactionHash": "0xa450c2b14e8b8115b73ed7d3c50df227c82773559b2a2f52ac7e8b6f93d7cda8",
    "logs": [],
    "blockNumber": 9050723,
    "cumulativeGasUsed": "2528110",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    1800,
    0,
    10000000000000,
    0,
    "0xA3FefC6FeE3fc66B9d9a8BEE794736ab71a74c55",
    "0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
    10000000000000
  ],
  "numDeployments": 7,
  "solcInputHash": "de8d57bf51a0c5c580c54a12eae49416",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochClaimDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_veaInboxArbToEthDevnet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMissingBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devnetOperator\",\"type\":\"address\"}],\"name\":\"changeDevnetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateroot\",\"type\":\"bytes32\"}],\"name\":\"devnetAdvanceState\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devnetOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"hashClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedClaim\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMissingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"passedTest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"testPassed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeoutEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"validateSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaInboxArbToEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawChallengerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocknumber\",\"type\":\"uint32\"},{\"internalType\":\"enum Party\",\"name\":\"honest\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"withdrawClaimerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Challenged(uint256,address)\":{\"details\":\"This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\",\"params\":{\"_challenger\":\"The address of the challenger.\",\"_epoch\":\"The epoch associated with the challenged claim.\"}},\"Claimed(address,bytes32)\":{\"details\":\"Watcher check this event to challenge fraud.\",\"params\":{\"_claimer\":\"The address of the claimer.\",\"_stateRoot\":\"The state root of the claim.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"_msgId\":\"The msgId of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"_epoch\":\"The epoch that was verified.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch of the claim to challenge.\"}},\"changeDevnetOperator(address)\":{\"details\":\"Changes the devnet operator.\",\"params\":{\"_devnetOperator\":\"The new testnet operator.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_bridge\":\"The address of the Arbitrum bridge contract on Ethereum.\",\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochClaimDelay\":\"The number of epochs a claim can be submitted for.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_maxMissingBlocks\":\"The maximum number of blocks that can be missing in a challenge period.\",\"_timeoutEpochs\":\"The epochs before the bridge is considered shutdown.\",\"_veaInboxArbToEthDevnet\":\"The address of the devnet vea inbox on Arbitrum to Ethereum.\"}},\"devnetAdvanceState(uint256,bytes32)\":{\"details\":\"Testnet operator utility function to claim, validate and withdraw.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateroot\":\"The state root to claim.\"}},\"hashClaim((bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Hashes the claim.\",\"params\":{\"_claim\":\"The claim to hash.\"},\"returns\":{\"hashedClaim\":\"The hash of the claim.\"}},\"passedTest((bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Claim passed censorship test\",\"params\":{\"_claim\":\"The claim to test.\"},\"returns\":{\"testPassed\":\"True if the claim passed the censorship test.\"}},\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch\",\"_epoch\":\"The epoch to verify.\",\"_stateRoot\":\"The true state root for the epoch.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"_message\":\"The message encoded with header from VeaInbox.\",\"_msgId\":\"The zero based index of the message in the inbox.\",\"_proof\":\"The merkle proof to prove the message.\",\"_to\":\"The address of the contract on Ethereum to call.\"}},\"validateSnapshot(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"_claim\":\"The claim associated with the epoch.\",\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))\":{\"notice\":\"Note: Access restricted to arbitrum  bridge.\"}},\"notice\":\"Vea Outbox From ArbitrumGoerli to Goerli. Note: This contract is deployed on Goerli. Note: This contract is permissioned for developer testing (devnet).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol\":\"VeaOutboxArbToEthDevnet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/arbitrumToEth/VeaOutboxArbToEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../canonical/arbitrum/IBridge.sol\\\";\\nimport \\\"../canonical/arbitrum/IOutbox.sol\\\";\\nimport \\\"../interfaces/outboxes/IVeaOutboxOnL1.sol\\\";\\n\\n/**\\n * Vea Outbox From Arbitrum to Ethereum.\\n * Note: This contract is deployed on Ethereum.\\n */\\ncontract VeaOutboxArbToEth is IVeaOutboxOnL1 {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    IBridge public immutable bridge; // The address of the Arbitrum bridge contract.\\n    address public immutable veaInboxArbToEth; // The address of the vea inbox on arbitrum.\\n\\n    uint256 public immutable deposit; // The deposit in wei required to submit a claim or challenge\\n    uint256 internal immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 internal immutable depositPlusReward; // 2 * deposit - burn\\n\\n    address internal constant BURN_ADDRESS = address(0); // address to send burned eth\\n    uint256 internal constant SLOT_TIME = 12; // Ethereum 12 second slot time\\n\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable challengePeriod; // Time window to challenge a claim.\\n    uint256 public immutable claimDelay; // Can only claim for epochs after this delay (seconds)\\n\\n    uint256 public immutable timeoutEpochs; // The number of epochs without forward progress before the bridge is considered shutdown.\\n    uint256 public immutable maxMissingBlocks; // The maximum number of blocks that can be missing in a challenge period.\\n\\n    bytes32 public stateRoot;\\n    uint256 public latestVerifiedEpoch;\\n\\n    mapping(uint256 => bytes32) public claimHashes; // epoch => claim\\n    mapping(uint256 => bytes32) public relayed; // msgId/256 => packed replay bitmap, preferred over a simple boolean mapping to save 15k gas per message\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Watcher check this event to challenge fraud.\\n     * @param _claimer The address of the claimer.\\n     * @param _stateRoot The state root of the claim.\\n     */\\n    event Claimed(address indexed _claimer, bytes32 _stateRoot);\\n\\n    /**\\n     * @dev This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\\n     * @param _epoch The epoch associated with the challenged claim.\\n     * @param _challenger The address of the challenger.\\n     */\\n    event Challenged(uint256 _epoch, address indexed _challenger);\\n\\n    /**\\n     * @dev This event indicates that a message has been relayed.\\n     * @param _msgId The msgId of the message that was relayed.\\n     */\\n    event MessageRelayed(uint64 _msgId);\\n\\n    /**\\n     * @dev This events indicates that verification has succeeded. The messages are ready to be relayed.\\n     * @param _epoch The epoch that was verified.\\n     */\\n    event Verified(uint256 _epoch);\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier OnlyBridgeRunning() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod <= latestVerifiedEpoch + timeoutEpochs, \\\"Bridge Shutdown.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod > latestVerifiedEpoch + timeoutEpochs, \\\"Bridge Running.\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * Note: epochPeriod must match the VeaInboxArbToEth contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n     * @param _claimDelay The number of epochs after which the claim can be submitted.\\n     * @param _veaInboxArbToEth The address of the inbox contract on Arbitrum.\\n     * @param _bridge The address of the arbitrum bridge contract on Ethereum.\\n     * @param _maxMissingBlocks The maximum number of blocks that can be missing in a challenge period.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        uint256 _claimDelay,\\n        address _veaInboxArbToEth,\\n        address _bridge,\\n        uint256 _maxMissingBlocks\\n    ) {\\n        deposit = _deposit;\\n        // epochPeriod must match the VeaInboxArbToEth contract deployment epochPeriod value.\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        timeoutEpochs = _timeoutEpochs;\\n        claimDelay = _claimDelay;\\n        veaInboxArbToEth = _veaInboxArbToEth;\\n        bridge = IBridge(_bridge);\\n        maxMissingBlocks = _maxMissingBlocks;\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n\\n        // claimDelay should never be set this high, but we santiy check to prevent underflow\\n        require(claimDelay <= block.timestamp, \\\"Invalid epochClaimDelay.\\\");\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Submit a claim about the _stateRoot at _epoch and submit a deposit.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateRoot The state root to claim.\\n     */\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external payable virtual {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n\\n        unchecked {\\n            require((block.timestamp - claimDelay) / epochPeriod == _epoch, \\\"Invalid epoch.\\\");\\n        }\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claimHashes[_epoch] == bytes32(0), \\\"Claim already made.\\\");\\n\\n        claimHashes[_epoch] = hashClaim(\\n            Claim({\\n                stateRoot: _stateRoot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n\\n        emit Claimed(msg.sender, _stateRoot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n     * @param _epoch The epoch of the claim to challenge.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function challenge(uint256 _epoch, Claim memory _claim) external payable virtual {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n\\n        unchecked {\\n            require(block.timestamp < uint256(_claim.timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n        }\\n\\n        _claim.challenger = msg.sender;\\n        claimHashes[_epoch] = hashClaim(_claim);\\n\\n        emit Challenged(_epoch, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch of the optimistic claim.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function validateSnapshot(uint256 _epoch, Claim memory _claim) external virtual OnlyBridgeRunning {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n\\n        unchecked {\\n            require(_claim.timestamp + challengePeriod < block.timestamp, \\\"Challenge period has not yet elapsed.\\\");\\n            require(\\n                // expected blocks <= actual blocks + maxMissingBlocks\\n                uint256(_claim.blocknumber) + (block.timestamp - uint256(_claim.timestamp)) / SLOT_TIME <=\\n                    block.number + maxMissingBlocks,\\n                \\\"Too many missing blocks. Possible censorship attack. Use canonical bridge.\\\"\\n            );\\n        }\\n\\n        require(_claim.challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _claim.stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        _claim.honest = Party.Claimer;\\n        claimHashes[_epoch] = hashClaim(_claim);\\n    }\\n\\n    /**\\n     * Note: Access restricted to arbitrum  bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch to verify.\\n     * @param _stateRoot The true state root for the epoch.\\n     * @param _claim The claim associated with the epoch\\n     */\\n    function resolveDisputedClaim(\\n        uint256 _epoch,\\n        bytes32 _stateRoot,\\n        Claim memory _claim\\n    ) external virtual OnlyBridgeRunning {\\n        // Arbitrum -> Ethereum message sender authentication\\n        // docs: https://developer.arbitrum.io/arbos/l2-to-l1-messaging/\\n        // example: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/dfef6a68ee18dbd2e1f5a099061a3b8a0e404485/contracts/crosschain/arbitrum/LibArbitrumL1.sol#L34\\n        // example: https://github.com/OffchainLabs/arbitrum-tutorials/blob/2c1b7d2db8f36efa496e35b561864c0f94123a5f/packages/greeter/contracts/ethereum/GreeterL1.sol#L50\\n        // note: we use the bridge address as a source of truth for the activeOutbox address\\n\\n        require(msg.sender == address(bridge), \\\"Not from bridge.\\\");\\n        require(IOutbox(bridge.activeOutbox()).l2ToL1Sender() == veaInboxArbToEth, \\\"veaInbox only.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        if (claimHashes[_epoch] == hashClaim(_claim) && _claim.honest == Party.None) {\\n            if (_claim.stateRoot == _stateRoot) {\\n                _claim.honest = Party.Claimer;\\n            } else if (_claim.challenger != address(0)) {\\n                _claim.honest = Party.Challenger;\\n            }\\n            claimHashes[_epoch] = hashClaim(_claim);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies and relays the message. UNTRUSTED.\\n     * @param _proof The merkle proof to prove the message.\\n     * @param _msgId The zero based index of the message in the inbox.\\n     * @param _to The address of the contract on Ethereum to call.\\n     * @param _message The message encoded with header from VeaInbox.\\n     */\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external {\\n        require(_proof.length < 64, \\\"Proof too long.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(_msgId, _to, _message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < _proof.length; i++) {\\n                bytes32 proofElement = _proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero-based index of the message in the inbox.\\n        // msgId is also used as an index in the relayed bitmap to prevent replay.\\n        // Note: a bitmap is used instead of a simple boolean mapping to save 15k gas per message.\\n\\n        uint256 relayIndex = _msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = _msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = _to.call(_message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(_msgId);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function withdrawClaimDeposit(uint256 _epoch, Claim calldata _claim) external virtual {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.Claimer, \\\"Claim failed.\\\");\\n\\n        delete claimHashes[_epoch];\\n\\n        if (_claim.challenger != address(0)) {\\n            payable(BURN_ADDRESS).send(burn);\\n            payable(_claim.claimer).send(depositPlusReward); // User is responsible for accepting ETH.\\n        } else {\\n            payable(_claim.claimer).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\\n     * @param _epoch The epoch associated with the challenge deposit to withraw.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function withdrawChallengeDeposit(uint256 _epoch, Claim calldata _claim) external {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.Challenger, \\\"Challenge failed.\\\");\\n\\n        delete claimHashes[_epoch];\\n\\n        payable(BURN_ADDRESS).send(burn); // half burnt\\n        payable(_claim.challenger).send(depositPlusReward); // User is responsible for accepting ETH.\\n    }\\n\\n    /**\\n     * @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function withdrawClaimerEscapeHatch(uint256 _epoch, Claim memory _claim) external OnlyBridgeShutdown {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (_claim.claimer != address(0)) {\\n            if (_claim.challenger == address(0)) {\\n                delete claimHashes[_epoch];\\n                payable(_claim.claimer).send(deposit); // User is responsible for accepting ETH.\\n            } else {\\n                address claimer = _claim.claimer;\\n                _claim.claimer = address(0);\\n                claimHashes[_epoch] == hashClaim(_claim);\\n                payable(claimer).send(deposit); // User is responsible for accepting ETH.\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function withdrawChallengerEscapeHatch(uint256 _epoch, Claim memory _claim) external OnlyBridgeShutdown {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        if (_claim.challenger != address(0)) {\\n            if (_claim.claimer == address(0)) {\\n                delete claimHashes[_epoch];\\n                payable(_claim.challenger).send(deposit); // User is responsible for accepting ETH.\\n            } else {\\n                address challenger = _claim.challenger;\\n                _claim.challenger = address(0);\\n                claimHashes[_epoch] == hashClaim(_claim);\\n                payable(challenger).send(deposit); // User is responsible for accepting ETH.\\n            }\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Pure / Views            * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Hashes the claim.\\n     * @param _claim The claim to hash.\\n     * @return hashedClaim The hash of the claim.\\n     */\\n    function hashClaim(Claim memory _claim) public pure returns (bytes32 hashedClaim) {\\n        return\\n            hashedClaim = keccak256(\\n                abi.encodePacked(\\n                    _claim.stateRoot,\\n                    _claim.claimer,\\n                    _claim.timestamp,\\n                    _claim.blocknumber,\\n                    _claim.honest,\\n                    _claim.challenger\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Claim passed censorship test\\n     * @param _claim The claim to test.\\n     * @return testPassed True if the claim passed the censorship test.\\n     */\\n    function passedTest(Claim calldata _claim) external view returns (bool testPassed) {\\n        uint256 expectedBlocks = uint256(_claim.blocknumber) + (block.timestamp - uint256(_claim.timestamp)) / SLOT_TIME;\\n        uint256 actualBlocks = block.number;\\n        testPassed = (expectedBlocks <= actualBlocks + maxMissingBlocks);\\n    }\\n}\\n\",\"keccak256\":\"0x18a1fe9cdf31d1076d303a66249f6b32602649a0a40d7175aaebf4440f112728\",\"license\":\"MIT\"},\"src/canonical/arbitrum/IBridge.sol\":{\"content\":\"// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IBridge.sol\\n// proxy: https://etherscan.io/address/0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a\\n// implementation: https://etherscan.io/address/0x1066cecc8880948fe55e427e94f1ff221d626591#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IBridge {\\n    function activeOutbox() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4087f2b5f4e9d2cdb2ebd352ba187f343c9c3ca7b20512b9d54ccf99a06692f5\"},\"src/canonical/arbitrum/IOutbox.sol\":{\"content\":\"// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IBridge.sol\\n// proxy: https://etherscan.io/address/0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840#code\\n// implementation: https://etherscan.io/address/0x0ea7372338a589e7f0b00e463a53aa464ef04e17#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IOutbox {\\n    /// @notice When l2ToL1Sender returns a nonzero address, the message was originated by an L2 account\\n    ///         When the return value is zero, that means this is a system message\\n    /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n    function l2ToL1Sender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f4b4815b49b6f5cea5c75ccd32a5166d04c398143c683049ffba35c051258fb\"},\"src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../../arbitrumToEth/VeaOutboxArbToEth.sol\\\";\\n\\n/**\\n * Vea Outbox From ArbitrumGoerli to Goerli.\\n * Note: This contract is deployed on Goerli.\\n * Note: This contract is permissioned for developer testing (devnet).\\n */\\ncontract VeaOutboxArbToEthDevnet is VeaOutboxArbToEth {\\n\\n    address public devnetOperator; // permissioned devnet operator\\n\\n    /** \\n     * @dev Requires that the sender is the devnet operator. \\n    */\\n    modifier onlyByDevnetOperator() {\\n        require(devnetOperator == msg.sender); \\n        _;\\n    }\\n\\n    /**\\n     * @dev Changes the devnet operator.\\n     * @param _devnetOperator The new testnet operator.\\n     */\\n    function changeDevnetOperator(address _devnetOperator) external onlyByDevnetOperator{\\n        require(msg.sender == devnetOperator, \\\"Invalid Testnet Operator\\\");\\n        devnetOperator = _devnetOperator;\\n    }\\n\\n    /**\\n     * @dev Submit a claim about the _stateRoot at _epoch and submit a deposit.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateRoot The state root to claim.\\n     */\\n    function claim(uint256 _epoch, bytes32 _stateRoot) public payable override onlyByDevnetOperator {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n\\n        unchecked {\\n            require((block.timestamp - claimDelay) / epochPeriod == _epoch, \\\"Invalid epoch.\\\");\\n        }\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claimHashes[_epoch] == bytes32(0), \\\"Claim already made.\\\");\\n\\n        claimHashes[_epoch] = hashClaim(\\n            Claim({\\n                stateRoot: _stateRoot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n\\n        emit Claimed(msg.sender, _stateRoot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n     * @param _epoch The epoch of the claim to challenge.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function challenge(uint256 _epoch, Claim memory _claim) external payable override onlyByDevnetOperator{\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n\\n        unchecked {\\n            require(block.timestamp < uint256(_claim.timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n        }\\n\\n        _claim.challenger = msg.sender;\\n        claimHashes[_epoch] = hashClaim(_claim);\\n\\n        emit Challenged(_epoch, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param _claim The claim associated with the epoch.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 _epoch, Claim memory _claim) public override {\\n        require(claimHashes[_epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n        require(_claim.honest == Party.Claimer, \\\"Claim failed.\\\");\\n\\n        delete claimHashes[_epoch];\\n\\n        if (_claim.challenger != address(0)) {\\n            payable(BURN_ADDRESS).send(burn);\\n            payable(_claim.claimer).send(depositPlusReward); // User is responsible for accepting ETH.\\n        } else {\\n            payable(_claim.claimer).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param epoch The epoch of the optimistic claim.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function validateSnapshot(uint256 epoch, Claim memory _claim) public override OnlyBridgeRunning {\\n        require(claimHashes[epoch] == hashClaim(_claim), \\\"Invalid claim.\\\");\\n\\n        unchecked {\\n            require(_claim.timestamp + challengePeriod <= block.timestamp, \\\"Challenge period has not yet elapsed.\\\");\\n            require(\\n                // expected blocks <= actual blocks + maxMissingBlocks\\n                uint256(_claim.blocknumber) + (block.timestamp - uint256(_claim.timestamp)) / SLOT_TIME <=\\n                    block.number + maxMissingBlocks,\\n                \\\"Too many missing blocks. Possible censorship attack. Use canonical bridge.\\\"\\n            );\\n        }\\n\\n        require(_claim.challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = epoch;\\n            stateRoot = _claim.stateRoot;\\n            emit Verified(epoch);\\n        }\\n\\n        _claim.honest = Party.Claimer;\\n        claimHashes[epoch] = hashClaim(_claim);\\n    }\\n\\n    /**\\n     * @dev Testnet operator utility function to claim, validate and withdraw.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateroot The state root to claim.\\n     */\\n    function devnetAdvanceState(uint256 _epoch, bytes32 _stateroot) external payable {\\n        claim(_epoch, _stateroot);\\n        validateSnapshot(\\n            _epoch,\\n            Claim({\\n                stateRoot: _stateroot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.None,\\n                challenger: address(0)\\n            })\\n        );\\n        withdrawClaimDeposit(\\n            _epoch,\\n            Claim({\\n                stateRoot: _stateroot,\\n                claimer: msg.sender,\\n                timestamp: uint32(block.timestamp),\\n                blocknumber: uint32(block.number),\\n                honest: Party.Claimer,\\n                challenger: address(0)\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n     * @param _epochClaimDelay The number of epochs a claim can be submitted for.\\n     * @param _veaInboxArbToEthDevnet The address of the devnet vea inbox on Arbitrum to Ethereum.\\n     * @param _bridge The address of the Arbitrum bridge contract on Ethereum.\\n     * @param _maxMissingBlocks The maximum number of blocks that can be missing in a challenge period.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        uint256 _epochClaimDelay,\\n        address _veaInboxArbToEthDevnet,\\n        address _bridge,\\n        uint256 _maxMissingBlocks\\n    )\\n        VeaOutboxArbToEth(\\n            _deposit,\\n            _epochPeriod,\\n            _challengePeriod,\\n            _timeoutEpochs,\\n            _epochClaimDelay,\\n            _veaInboxArbToEthDevnet,\\n            _bridge,\\n            _maxMissingBlocks\\n        )\\n    {\\n        devnetOperator = msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x8531b22520f32d44cac0750b3671724f39c22513ff048bf0e120e3079e720c1e\",\"license\":\"MIT\"},\"src/interfaces/outboxes/IVeaOutboxOnL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../types/VeaClaim.sol\\\";\\n\\n/**\\n * @dev Interface of the Vea Outbox on L1 chains like Ethereum, Gnosis, Polygon POS where storage is expensive.\\n */\\ninterface IVeaOutboxOnL1 {\\n    /**\\n     * Note: Gateways expect first argument of message call to be the arbitrum message sender, used for authentication.\\n     * @dev Verifies and relays the message.\\n     * @param _proof The merkle proof to prove the message.\\n     * @param _msgId The zero based index of the message in the inbox.\\n     * @param _to The address to send the message to.\\n     * @param _message The message to relay.\\n     */\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external;\\n\\n    /**\\n     * Note: Access restricted to canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n     * @param _epoch The epoch to verify.\\n     * @param _stateRoot The true state root for the epoch.\\n     * @param _claim The claim associated with the epoch.\\n     */\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot, Claim memory _claim) external;\\n}\\n\",\"keccak256\":\"0x0f96c2344dcdf78dc89359ba72e281a28cf8e47368eabf4bebc9a648ffc35163\",\"license\":\"MIT\"},\"src/interfaces/types/VeaClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity 0.8.18;\\n\\nenum Party {\\n    None,\\n    Claimer,\\n    Challenger\\n}\\n\\nstruct Claim {\\n    bytes32 stateRoot;\\n    address claimer;\\n    uint32 timestamp;\\n    uint32 blocknumber;\\n    Party honest;\\n    address challenger;\\n}\\n\",\"keccak256\":\"0x1bdda50afbf5f966278a867e7149397ed820de658c15dda4266e70c314df17d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b506040516200240038038062002400833981016040819052620000359162000162565b60c08890526101208790526101408690526101808590526101608490526001600160a01b0380841660a05282166080526101a0819052878787878787878762000080600289620001ea565b60e0819052620000928960026200020d565b6200009e91906200022d565b6101005261012051600190620000b59042620001ea565b620000c191906200022d565b600155610160514210156200011c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642065706f6368436c61696d44656c61792e0000000000000000604482015260640160405180910390fd5b5050600480546001600160a01b0319163317905550620002439c50505050505050505050505050565b80516001600160a01b03811681146200015d57600080fd5b919050565b600080600080600080600080610100898b0312156200018057600080fd5b8851975060208901519650604089015195506060890151945060808901519350620001ae60a08a0162000145565b9250620001be60c08a0162000145565b915060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b6000826200020857634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417620002275762000227620001d4565b92915050565b81810381811115620002275762000227620001d4565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516120926200036e600039600081816103e9015281816105d901526113b801526000818161041d01528181610cb6015281816112630152818161154b01526117570152600081816101cd015261084201526000818161054001528181611195015261132f0152600081816104510152818161082101528181610cdb0152818161128801528181611570015261177c01526000818161070e0152611ade0152600081816106c60152611a8b0152600081816104c50152818161075e015281816107b001528181611125015281816116b50152818161171c01526118c20152600081816102c70152610db70152600081816104f901528181610d550152610de101526120926000f3fe6080604052600436106101815760003560e01c80639588eca2116100d1578063bd7df3f91161008a578063e78cea9211610064578063e78cea92146104e7578063eedcf2a91461051b578063f3f480d91461052e578063f939bad91461056257600080fd5b8063bd7df3f914610473578063c299be3314610493578063d0e30db0146104b357600080fd5b80639588eca21461038e578063a53d3c26146103a4578063a557d918146103b7578063aa22a1c6146103d7578063b044397e1461040b578063b5b7a1841461043f57600080fd5b806331ddf7431161013e5780637ba7900c116101185780637ba7900c146103015780638a619a71146103215780638ad3a8f71461034157806390df63b71461036157600080fd5b806331ddf7431461027557806334c75d721461029557806369cd250d146102b557600080fd5b806310e8f6bf146101865780631c8ec299146101bb5780632415855b146101fd5780632639c0601461021f57806327ee6bdd1461024c57806331d1445714610262575b600080fd5b34801561019257600080fd5b506101a66101a1366004611b33565b610582565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101b2565b34801561020957600080fd5b5061021d610218366004611c4a565b610609565b005b34801561022b57600080fd5b506101ef61023a366004611c77565b60026020526000908152604090205481565b34801561025857600080fd5b506101ef60015481565b61021d610270366004611c90565b610797565b34801561028157600080fd5b5061021d610290366004611d13565b6109c7565b3480156102a157600080fd5b506101ef6102b0366004611dd5565b610c67565b3480156102c157600080fd5b506102e97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b2565b34801561030d57600080fd5b5061021d61031c366004611df1565b610cb4565b34801561032d57600080fd5b5061021d61033c366004611e28565b610fe9565b34801561034d57600080fd5b506004546102e9906001600160a01b031681565b34801561036d57600080fd5b506101ef61037c366004611c77565b60036020526000908152604090205481565b34801561039a57600080fd5b506101ef60005481565b61021d6103b2366004611c4a565b61107c565b3480156103c357600080fd5b5061021d6103d2366004611c4a565b611261565b3480156103e357600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561041757600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561044b57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047f57600080fd5b5061021d61048e366004611c4a565b611549565b34801561049f57600080fd5b5061021d6104ae366004611c4a565b611755565b3480156104bf57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f357600080fd5b506102e97f000000000000000000000000000000000000000000000000000000000000000081565b61021d610529366004611c90565b61190e565b34801561053a57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056e57600080fd5b5061021d61057d366004611e45565b6119d4565b600080600c6105976060850160408601611e69565b6105a79063ffffffff1642611e9a565b6105b19190611ec9565b6105c16080850160608601611e69565b63ffffffff166105d19190611eeb565b9050436105fe7f000000000000000000000000000000000000000000000000000000000000000082611eeb565b909111159392505050565b61061281610c67565b600083815260026020526040902054146106475760405162461bcd60e51b815260040161063e90611efe565b60405180910390fd5b60018160800151600281111561065f5761065f611f26565b1461069c5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b604482015260640161063e565b60008281526002602052604081205560a08101516001600160a01b031615610748576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150505060208301516040516001600160a01b0390911692507f000000000000000000000000000000000000000000000000000000000000000080156108fc029250906000818181858888f150505050505050565b60208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b5050565b6004546001600160a01b031633146107ae57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000034101561081e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e0000000000604482015260640161063e565b817f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000042038161087057610870611eb3565b04146108af5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b604482015260640161063e565b806108cc5760405162461bcd60e51b815260040161063e90611efe565b6000828152600260205260409020541561091e5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b604482015260640161063e565b61097b6040518060c00160405280838152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff1681526020016000600281111561096c5761096c611f26565b81526000602090910152610c67565b600083815260026020908152604091829020929092555182815233917f91d697238e9aa9f3172d17522c9be529b94a892481554e1ea619369b5b12f39a91015b60405180910390a25050565b60408510610a095760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b604482015260640161063e565b600084848484604051602001610a229493929190611f3c565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610aa2576000888883818110610a6457610a64611f7e565b90506020020135905082811115610a8957826000528060205260406000209250610a99565b8060005282602052604060002092505b50600101610a48565b508060005414610ae55760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b604482015260640161063e565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c60011615610b5a5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c61796564000000000000000000604482015260640161063e565b6000838152600360205260408082206001851b84179055516001600160a01b03891690610b8a9089908990611f94565b6000604051808303816000865af19150503d8060008114610bc7576040519150601f19603f3d011682016040523d82523d6000602084013e610bcc565b606091505b5050905080610c1d5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e7472616374000000000000000000604482015260640161063e565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610c97979096959101611fa4565b604051602081830303815290604052805190602001209050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f00000000000000000000000000000000000000000000000000000000000000004281610d0857610d08611eb3565b041115610d4a5760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161063e565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610db55760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b604482015260640161063e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e619190612024565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612024565b6001600160a01b031614610f095760405162461bcd60e51b815260206004820152600e60248201526d3b32b0a4b73137bc1037b7363c9760911b604482015260640161063e565b60015483118015610f1957508115155b15610f5c57600183905560008290556040518381527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610f6581610c67565b600084815260026020526040902054148015610f965750600081608001516002811115610f9457610f94611f26565b145b15610fe4578051829003610fb05760016080820152610fcb565b60a08101516001600160a01b031615610fcb57600260808201525b610fd481610c67565b6000848152600260205260409020555b505050565b6004546001600160a01b0316331461100057600080fd5b6004546001600160a01b0316331461105a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420546573746e6574204f70657261746f720000000000000000604482015260640161063e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b0316331461109357600080fd5b61109c81610c67565b600083815260026020526040902054146110c85760405162461bcd60e51b815260040161063e90611efe565b60a08101516001600160a01b0316156111235760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e00000000000000604482015260640161063e565b7f00000000000000000000000000000000000000000000000000000000000000003410156111935760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e00604482015260640161063e565b7f0000000000000000000000000000000000000000000000000000000000000000816040015163ffffffff1601421061120e5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e00000000000000604482015260640161063e565b3360a082015261121d81610c67565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d791016109bb565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f000000000000000000000000000000000000000000000000000000000000000042816112b5576112b5611eb3565b0411156112f75760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161063e565b61130081610c67565b6000838152600260205260409020541461132c5760405162461bcd60e51b815260040161063e90611efe565b427f0000000000000000000000000000000000000000000000000000000000000000826040015163ffffffff160111156113b65760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b606482015260840161063e565b7f00000000000000000000000000000000000000000000000000000000000000004301600c826040015163ffffffff164203816113f5576113f5611eb3565b04826060015163ffffffff160111156114895760405162461bcd60e51b815260206004820152604a60248201527f546f6f206d616e79206d697373696e6720626c6f636b732e20506f737369626c60448201527f652063656e736f72736869702061747461636b2e205573652063616e6f6e696360648201526930b610313934b233b29760b11b608482015260a40161063e565b60a08101516001600160a01b0316156114db5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b604482015260640161063e565b60015482111561152357600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b6001608082015261153381610c67565b6000928352600260205260409092209190915550565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f0000000000000000000000000000000000000000000000000000000000000000428161159d5761159d611eb3565b04116115dd5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b604482015260640161063e565b6115e681610c67565b600083815260026020526040902054146116125760405162461bcd60e51b815260040161063e90611efe565b60008160800151600281111561162a5761162a611f26565b146116695760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161063e565b60a08101516001600160a01b0316156107935760208101516001600160a01b03166116ed5760008281526002602052604080822082905560a083015190516001600160a01b03909116917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150505050505050565b60a081018051600090915261170182610c67565b50600083815260026020526040516001600160a01b038316917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f15050505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f000000000000000000000000000000000000000000000000000000000000000042816117a9576117a9611eb3565b04116117e95760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b604482015260640161063e565b6117f281610c67565b6000838152600260205260409020541461181e5760405162461bcd60e51b815260040161063e90611efe565b60008160800151600281111561183657611836611f26565b146118755760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161063e565b60208101516001600160a01b0316156107935760a08101516001600160a01b03166118fa5760008281526002602090815260408083208390559083015190516001600160a01b03909116917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150505050505050565b602081018051600090915261170182610c67565b6119188282610797565b611976826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff1681526020016000600281111561196757611967611f26565b81526000602090910152611261565b610793826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600160028111156119c5576119c5611f26565b81526000602090910152610609565b6119e66102b036839003830183611dd5565b60008381526002602052604090205414611a125760405162461bcd60e51b815260040161063e90611efe565b6002611a2460a0830160808401612041565b6002811115611a3557611a35611f26565b14611a765760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b604482015260640161063e565b600082815260026020526040808220829055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150611ad093505060c0840191505060a08301611e28565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505050565b600060c08284031215611b2d57600080fd5b50919050565b600060c08284031215611b4557600080fd5b611b4f8383611b1b565b9392505050565b6001600160a01b0381168114611b6b57600080fd5b50565b8035611b7981611b56565b919050565b803563ffffffff81168114611b7957600080fd5b803560038110611b7957600080fd5b600060c08284031215611bb357600080fd5b60405160c0810181811067ffffffffffffffff82111715611be457634e487b7160e01b600052604160045260246000fd5b60405282358152905080611bfa60208401611b6e565b6020820152611c0b60408401611b7e565b6040820152611c1c60608401611b7e565b6060820152611c2d60808401611b92565b6080820152611c3e60a08401611b6e565b60a08201525092915050565b60008060e08385031215611c5d57600080fd5b82359150611c6e8460208501611ba1565b90509250929050565b600060208284031215611c8957600080fd5b5035919050565b60008060408385031215611ca357600080fd5b50508035926020909101359150565b803567ffffffffffffffff81168114611b7957600080fd5b60008083601f840112611cdc57600080fd5b50813567ffffffffffffffff811115611cf457600080fd5b602083019150836020828501011115611d0c57600080fd5b9250929050565b60008060008060008060808789031215611d2c57600080fd5b863567ffffffffffffffff80821115611d4457600080fd5b818901915089601f830112611d5857600080fd5b813581811115611d6757600080fd5b8a60208260051b8501011115611d7c57600080fd5b60208301985080975050611d9260208a01611cb2565b9550611da060408a01611b6e565b94506060890135915080821115611db657600080fd5b50611dc389828a01611cca565b979a9699509497509295939492505050565b600060c08284031215611de757600080fd5b611b4f8383611ba1565b60008060006101008486031215611e0757600080fd5b8335925060208401359150611e1f8560408601611ba1565b90509250925092565b600060208284031215611e3a57600080fd5b8135611b4f81611b56565b60008060e08385031215611e5857600080fd5b82359150611c6e8460208501611b1b565b600060208284031215611e7b57600080fd5b611b4f82611b7e565b634e487b7160e01b600052601160045260246000fd5b81810381811115611ead57611ead611e84565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611ee657634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611ead57611ead611e84565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b86815260006bffffffffffffffffffffffff19808860601b16602084015263ffffffff60e01b808860e01b166034850152808760e01b1660388501525060038510611fff57634e487b7160e01b600052602160045260246000fd5b60f89490941b603c8301525060609190911b909116603d820152605101949350505050565b60006020828403121561203657600080fd5b8151611b4f81611b56565b60006020828403121561205357600080fd5b611b4f82611b9256fea2646970667358221220c58db01aa6f8f437a1c44fc8c56245e951bedd4f4b6ec3ce4d070476cca0e52064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80639588eca2116100d1578063bd7df3f91161008a578063e78cea9211610064578063e78cea92146104e7578063eedcf2a91461051b578063f3f480d91461052e578063f939bad91461056257600080fd5b8063bd7df3f914610473578063c299be3314610493578063d0e30db0146104b357600080fd5b80639588eca21461038e578063a53d3c26146103a4578063a557d918146103b7578063aa22a1c6146103d7578063b044397e1461040b578063b5b7a1841461043f57600080fd5b806331ddf7431161013e5780637ba7900c116101185780637ba7900c146103015780638a619a71146103215780638ad3a8f71461034157806390df63b71461036157600080fd5b806331ddf7431461027557806334c75d721461029557806369cd250d146102b557600080fd5b806310e8f6bf146101865780631c8ec299146101bb5780632415855b146101fd5780632639c0601461021f57806327ee6bdd1461024c57806331d1445714610262575b600080fd5b34801561019257600080fd5b506101a66101a1366004611b33565b610582565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101b2565b34801561020957600080fd5b5061021d610218366004611c4a565b610609565b005b34801561022b57600080fd5b506101ef61023a366004611c77565b60026020526000908152604090205481565b34801561025857600080fd5b506101ef60015481565b61021d610270366004611c90565b610797565b34801561028157600080fd5b5061021d610290366004611d13565b6109c7565b3480156102a157600080fd5b506101ef6102b0366004611dd5565b610c67565b3480156102c157600080fd5b506102e97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b2565b34801561030d57600080fd5b5061021d61031c366004611df1565b610cb4565b34801561032d57600080fd5b5061021d61033c366004611e28565b610fe9565b34801561034d57600080fd5b506004546102e9906001600160a01b031681565b34801561036d57600080fd5b506101ef61037c366004611c77565b60036020526000908152604090205481565b34801561039a57600080fd5b506101ef60005481565b61021d6103b2366004611c4a565b61107c565b3480156103c357600080fd5b5061021d6103d2366004611c4a565b611261565b3480156103e357600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561041757600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561044b57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047f57600080fd5b5061021d61048e366004611c4a565b611549565b34801561049f57600080fd5b5061021d6104ae366004611c4a565b611755565b3480156104bf57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f357600080fd5b506102e97f000000000000000000000000000000000000000000000000000000000000000081565b61021d610529366004611c90565b61190e565b34801561053a57600080fd5b506101ef7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056e57600080fd5b5061021d61057d366004611e45565b6119d4565b600080600c6105976060850160408601611e69565b6105a79063ffffffff1642611e9a565b6105b19190611ec9565b6105c16080850160608601611e69565b63ffffffff166105d19190611eeb565b9050436105fe7f000000000000000000000000000000000000000000000000000000000000000082611eeb565b909111159392505050565b61061281610c67565b600083815260026020526040902054146106475760405162461bcd60e51b815260040161063e90611efe565b60405180910390fd5b60018160800151600281111561065f5761065f611f26565b1461069c5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b604482015260640161063e565b60008281526002602052604081205560a08101516001600160a01b031615610748576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150505060208301516040516001600160a01b0390911692507f000000000000000000000000000000000000000000000000000000000000000080156108fc029250906000818181858888f150505050505050565b60208101516040516001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b5050565b6004546001600160a01b031633146107ae57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000034101561081e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e0000000000604482015260640161063e565b817f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000042038161087057610870611eb3565b04146108af5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b604482015260640161063e565b806108cc5760405162461bcd60e51b815260040161063e90611efe565b6000828152600260205260409020541561091e5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b604482015260640161063e565b61097b6040518060c00160405280838152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff1681526020016000600281111561096c5761096c611f26565b81526000602090910152610c67565b600083815260026020908152604091829020929092555182815233917f91d697238e9aa9f3172d17522c9be529b94a892481554e1ea619369b5b12f39a91015b60405180910390a25050565b60408510610a095760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b604482015260640161063e565b600084848484604051602001610a229493929190611f3c565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610aa2576000888883818110610a6457610a64611f7e565b90506020020135905082811115610a8957826000528060205260406000209250610a99565b8060005282602052604060002092505b50600101610a48565b508060005414610ae55760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b604482015260640161063e565b600885901c66ffffffffffffff1660008181526003602052604090205460ff87169080821c60011615610b5a5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c61796564000000000000000000604482015260640161063e565b6000838152600360205260408082206001851b84179055516001600160a01b03891690610b8a9089908990611f94565b6000604051808303816000865af19150503d8060008114610bc7576040519150601f19603f3d011682016040523d82523d6000602084013e610bcc565b606091505b5050905080610c1d5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e7472616374000000000000000000604482015260640161063e565b60405167ffffffffffffffff8a1681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a15050505050505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610c97979096959101611fa4565b604051602081830303815290604052805190602001209050919050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f00000000000000000000000000000000000000000000000000000000000000004281610d0857610d08611eb3565b041115610d4a5760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161063e565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610db55760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b604482015260640161063e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e619190612024565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612024565b6001600160a01b031614610f095760405162461bcd60e51b815260206004820152600e60248201526d3b32b0a4b73137bc1037b7363c9760911b604482015260640161063e565b60015483118015610f1957508115155b15610f5c57600183905560008290556040518381527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b610f6581610c67565b600084815260026020526040902054148015610f965750600081608001516002811115610f9457610f94611f26565b145b15610fe4578051829003610fb05760016080820152610fcb565b60a08101516001600160a01b031615610fcb57600260808201525b610fd481610c67565b6000848152600260205260409020555b505050565b6004546001600160a01b0316331461100057600080fd5b6004546001600160a01b0316331461105a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420546573746e6574204f70657261746f720000000000000000604482015260640161063e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b0316331461109357600080fd5b61109c81610c67565b600083815260026020526040902054146110c85760405162461bcd60e51b815260040161063e90611efe565b60a08101516001600160a01b0316156111235760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e00000000000000604482015260640161063e565b7f00000000000000000000000000000000000000000000000000000000000000003410156111935760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e00604482015260640161063e565b7f0000000000000000000000000000000000000000000000000000000000000000816040015163ffffffff1601421061120e5760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e00000000000000604482015260640161063e565b3360a082015261121d81610c67565b600083815260026020908152604091829020929092555183815233917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d791016109bb565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f000000000000000000000000000000000000000000000000000000000000000042816112b5576112b5611eb3565b0411156112f75760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b604482015260640161063e565b61130081610c67565b6000838152600260205260409020541461132c5760405162461bcd60e51b815260040161063e90611efe565b427f0000000000000000000000000000000000000000000000000000000000000000826040015163ffffffff160111156113b65760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b606482015260840161063e565b7f00000000000000000000000000000000000000000000000000000000000000004301600c826040015163ffffffff164203816113f5576113f5611eb3565b04826060015163ffffffff160111156114895760405162461bcd60e51b815260206004820152604a60248201527f546f6f206d616e79206d697373696e6720626c6f636b732e20506f737369626c60448201527f652063656e736f72736869702061747461636b2e205573652063616e6f6e696360648201526930b610313934b233b29760b11b608482015260a40161063e565b60a08101516001600160a01b0316156114db5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b604482015260640161063e565b60015482111561152357600182905580516000556040518281527ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f79060200160405180910390a15b6001608082015261153381610c67565b6000928352600260205260409092209190915550565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f0000000000000000000000000000000000000000000000000000000000000000428161159d5761159d611eb3565b04116115dd5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b604482015260640161063e565b6115e681610c67565b600083815260026020526040902054146116125760405162461bcd60e51b815260040161063e90611efe565b60008160800151600281111561162a5761162a611f26565b146116695760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161063e565b60a08101516001600160a01b0316156107935760208101516001600160a01b03166116ed5760008281526002602052604080822082905560a083015190516001600160a01b03909116917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150505050505050565b60a081018051600090915261170182610c67565b50600083815260026020526040516001600160a01b038316917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f15050505050505050565b7f0000000000000000000000000000000000000000000000000000000000000000600154017f000000000000000000000000000000000000000000000000000000000000000042816117a9576117a9611eb3565b04116117e95760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b604482015260640161063e565b6117f281610c67565b6000838152600260205260409020541461181e5760405162461bcd60e51b815260040161063e90611efe565b60008160800151600281111561183657611836611f26565b146118755760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b604482015260640161063e565b60208101516001600160a01b0316156107935760a08101516001600160a01b03166118fa5760008281526002602090815260408083208390559083015190516001600160a01b03909116917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150505050505050565b602081018051600090915261170182610c67565b6119188282610797565b611976826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff1681526020016000600281111561196757611967611f26565b81526000602090910152611261565b610793826040518060c00160405280848152602001336001600160a01b031681526020014263ffffffff1681526020014363ffffffff168152602001600160028111156119c5576119c5611f26565b81526000602090910152610609565b6119e66102b036839003830183611dd5565b60008381526002602052604090205414611a125760405162461bcd60e51b815260040161063e90611efe565b6002611a2460a0830160808401612041565b6002811115611a3557611a35611f26565b14611a765760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b604482015260640161063e565b600082815260026020526040808220829055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150611ad093505060c0840191505060a08301611e28565b6001600160a01b03166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f150505050505050565b600060c08284031215611b2d57600080fd5b50919050565b600060c08284031215611b4557600080fd5b611b4f8383611b1b565b9392505050565b6001600160a01b0381168114611b6b57600080fd5b50565b8035611b7981611b56565b919050565b803563ffffffff81168114611b7957600080fd5b803560038110611b7957600080fd5b600060c08284031215611bb357600080fd5b60405160c0810181811067ffffffffffffffff82111715611be457634e487b7160e01b600052604160045260246000fd5b60405282358152905080611bfa60208401611b6e565b6020820152611c0b60408401611b7e565b6040820152611c1c60608401611b7e565b6060820152611c2d60808401611b92565b6080820152611c3e60a08401611b6e565b60a08201525092915050565b60008060e08385031215611c5d57600080fd5b82359150611c6e8460208501611ba1565b90509250929050565b600060208284031215611c8957600080fd5b5035919050565b60008060408385031215611ca357600080fd5b50508035926020909101359150565b803567ffffffffffffffff81168114611b7957600080fd5b60008083601f840112611cdc57600080fd5b50813567ffffffffffffffff811115611cf457600080fd5b602083019150836020828501011115611d0c57600080fd5b9250929050565b60008060008060008060808789031215611d2c57600080fd5b863567ffffffffffffffff80821115611d4457600080fd5b818901915089601f830112611d5857600080fd5b813581811115611d6757600080fd5b8a60208260051b8501011115611d7c57600080fd5b60208301985080975050611d9260208a01611cb2565b9550611da060408a01611b6e565b94506060890135915080821115611db657600080fd5b50611dc389828a01611cca565b979a9699509497509295939492505050565b600060c08284031215611de757600080fd5b611b4f8383611ba1565b60008060006101008486031215611e0757600080fd5b8335925060208401359150611e1f8560408601611ba1565b90509250925092565b600060208284031215611e3a57600080fd5b8135611b4f81611b56565b60008060e08385031215611e5857600080fd5b82359150611c6e8460208501611b1b565b600060208284031215611e7b57600080fd5b611b4f82611b7e565b634e487b7160e01b600052601160045260246000fd5b81810381811115611ead57611ead611e84565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611ee657634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611ead57611ead611e84565b6020808252600e908201526d24b73b30b634b21031b630b4b69760911b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b86815260006bffffffffffffffffffffffff19808860601b16602084015263ffffffff60e01b808860e01b166034850152808760e01b1660388501525060038510611fff57634e487b7160e01b600052602160045260246000fd5b60f89490941b603c8301525060609190911b909116603d820152605101949350505050565b60006020828403121561203657600080fd5b8151611b4f81611b56565b60006020828403121561205357600080fd5b611b4f82611b9256fea2646970667358221220c58db01aa6f8f437a1c44fc8c56245e951bedd4f4b6ec3ce4d070476cca0e52064736f6c63430008120033",
  "devdoc": {
    "events": {
      "Challenged(uint256,address)": {
        "details": "This event indicates that `sendSnapshot(epoch)` should be called in the inbox.",
        "params": {
          "_challenger": "The address of the challenger.",
          "_epoch": "The epoch associated with the challenged claim."
        }
      },
      "Claimed(address,bytes32)": {
        "details": "Watcher check this event to challenge fraud.",
        "params": {
          "_claimer": "The address of the claimer.",
          "_stateRoot": "The state root of the claim."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "_msgId": "The msgId of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "_epoch": "The epoch that was verified."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch of the claim to challenge."
        }
      },
      "changeDevnetOperator(address)": {
        "details": "Changes the devnet operator.",
        "params": {
          "_devnetOperator": "The new testnet operator."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_bridge": "The address of the Arbitrum bridge contract on Ethereum.",
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochClaimDelay": "The number of epochs a claim can be submitted for.",
          "_epochPeriod": "The duration of each epoch.",
          "_maxMissingBlocks": "The maximum number of blocks that can be missing in a challenge period.",
          "_timeoutEpochs": "The epochs before the bridge is considered shutdown.",
          "_veaInboxArbToEthDevnet": "The address of the devnet vea inbox on Arbitrum to Ethereum."
        }
      },
      "devnetAdvanceState(uint256,bytes32)": {
        "details": "Testnet operator utility function to claim, validate and withdraw.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateroot": "The state root to claim."
        }
      },
      "hashClaim((bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Hashes the claim.",
        "params": {
          "_claim": "The claim to hash."
        },
        "returns": {
          "hashedClaim": "The hash of the claim."
        }
      },
      "passedTest((bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Claim passed censorship test",
        "params": {
          "_claim": "The claim to test."
        },
        "returns": {
          "testPassed": "True if the claim passed the censorship test."
        }
      },
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch",
          "_epoch": "The epoch to verify.",
          "_stateRoot": "The true state root for the epoch."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "_message": "The message encoded with header from VeaInbox.",
          "_msgId": "The zero based index of the message in the inbox.",
          "_proof": "The merkle proof to prove the message.",
          "_to": "The address of the contract on Ethereum to call."
        }
      },
      "validateSnapshot(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimerEscapeHatch(uint256,(bytes32,address,uint32,uint32,uint8,address))": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "_claim": "The claim associated with the epoch.",
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32,(bytes32,address,uint32,uint32,uint8,address))": {
        "notice": "Note: Access restricted to arbitrum  bridge."
      }
    },
    "notice": "Vea Outbox From ArbitrumGoerli to Goerli. Note: This contract is deployed on Goerli. Note: This contract is permissioned for developer testing (devnet).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 39,
        "contract": "src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol:VeaOutboxArbToEthDevnet",
        "label": "stateRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 41,
        "contract": "src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol:VeaOutboxArbToEthDevnet",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 45,
        "contract": "src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol:VeaOutboxArbToEthDevnet",
        "label": "claimHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 49,
        "contract": "src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol:VeaOutboxArbToEthDevnet",
        "label": "relayed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 2273,
        "contract": "src/devnets/arbitrumToEth/VeaOutboxArbToEthDevnet.sol:VeaOutboxArbToEthDevnet",
        "label": "devnetOperator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
