{
  "address": "0xD035Ccf1FC71A879d9F6E10215c5297489A40B46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochClaimWindow",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_veaInbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "ChallengeDepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "ChallengeDepositWithdrawnTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        }
      ],
      "name": "ClaimDepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        }
      ],
      "name": "ClaimDepositWithdrawnTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "claimedStateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "honest",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "honest",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositMinusOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositPlusReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochClaimWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "heartbeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "validateSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaInbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaOutboxInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "latestVerifiedEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "latestHeartbeatTimestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengeDepositTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimDepositTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc66a4f1dd1aabc4dcdc86f1931008baf935d1c74c2d1e4f51176382a5aa0d2ec",
  "receipt": {
    "to": null,
    "from": "0x209469C921db9d5Bd77084370e80B63d5cdD63C1",
    "contractAddress": "0xD035Ccf1FC71A879d9F6E10215c5297489A40B46",
    "transactionIndex": 81,
    "gasUsed": "1965085",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa740c13f31377f711699d5092b4f7d57396be350e30f24a3e8eb77729c2d5a08",
    "transactionHash": "0xc66a4f1dd1aabc4dcdc86f1931008baf935d1c74c2d1e4f51176382a5aa0d2ec",
    "logs": [],
    "blockNumber": 8823379,
    "cumulativeGasUsed": "19634626",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000000",
    1800,
    1800,
    21600,
    2,
    "0xD2d4174A971b2AE58F23F7d4F5e4DE9d97bDda31",
    "0x6BEbC4925716945D46F0Ec336D5C2564F419682C"
  ],
  "numDeployments": 5,
  "solcInputHash": "e81e406ef20ae74df36acf20ccfdbd2a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochClaimWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_veaInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"ChallengeDepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"ChallengeDepositWithdrawnTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"}],\"name\":\"ClaimDepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"}],\"name\":\"ClaimDepositWithdrawnTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"claimedStateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"honest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"honest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositMinusOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPlusReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochClaimWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"heartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"validateSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaInbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaOutboxInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"latestVerifiedEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestHeartbeatTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengeDepositTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimDepositTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ChallengeDepositWithdrawn(uint256,address)\":{\"details\":\"This event indicates that the challenge deposit has been withdrawn.\",\"params\":{\"challenger\":\"The recipient of the challenge deposit.\",\"epoch\":\"The epoch associated with the challenge.\"}},\"ChallengeDepositWithdrawnTimeout(uint256,address)\":{\"details\":\"This event indicates that the challenge deposit has been withdrawn.\",\"params\":{\"challenger\":\"The recipient of the challenge deposit.\",\"epoch\":\"The epoch associated with the challenge.\"}},\"Challenged(uint256)\":{\"details\":\"This event indicates that `sendSafeFallback()` should be called on the sending side.\",\"params\":{\"epoch\":\"The epoch associated with the challenged claim.\"}},\"ClaimDepositWithdrawn(uint256,address)\":{\"details\":\"This event indicates that the claim deposit has been withdrawn.\",\"params\":{\"bridger\":\"The recipient of the claim deposit.\",\"epoch\":\"The epoch associated with the claim.\"}},\"ClaimDepositWithdrawnTimeout(uint256,address)\":{\"details\":\"This event indicates that the claim deposit has been withdrawn.\",\"params\":{\"bridger\":\"The recipient of the claim deposit.\",\"epoch\":\"The epoch associated with the claim.\"}},\"Claimed(uint256,bytes32)\":{\"details\":\"The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\",\"params\":{\"claimedStateRoot\":\"The claimed state root of the inbox snapshot.\",\"epoch\":\"The epoch for which the the claim was made.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"msgId\":\"The msgId of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"epoch\":\"The epoch associated with the verified inbox state root snapshot.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256)\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochClaimWindow\":\"The number of epochs a claim can be submitted for.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_inbox\":\"The address of the inbox contract on Ethereum.\",\"_timeout\":\"The seconds before the bridge is considered shutdown.\",\"_veaInbox\":\"The address of the inbox contract on Ethereum.\"}},\"heartbeat(uint256)\":{\"details\":\"Keeps bridge alive.\",\"params\":{\"timestamp\":\"The timestamp of the heartbeat.\"}},\"resolveDisputedClaim(uint256,bytes32)\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch to verify.\",\"_stateRoot\":\"The true state root for the epoch.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"message\":\"The message encoded with header from VeaInbox.\",\"msgId\":\"The zero based index of the message in the inbox.\",\"proof\":\"The merkle proof to prove the message.\",\"to\":\"The address of the contract on the receiving chain which receives the calldata.\"}},\"validateSnapshot(uint256)\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengeDepositTimeout(uint256)\":{\"details\":\"Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawClaimDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDepositTimeout(uint256)\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32)\":{\"notice\":\"Note: Access restricted to arbitrum  bridge.\"}},\"notice\":\"Vea Bridge Outbox From Arbitrum to Ethereum.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ArbToEth/VeaOutboxArbToEth.sol\":\"VeaOutboxArbToEth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ArbToEth/VeaOutboxArbToEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../canonical/arbitrum/IInbox.sol\\\";\\nimport \\\"../canonical/arbitrum/IOutbox.sol\\\";\\nimport \\\"../interfaces/IVeaOutbox.sol\\\";\\n\\n/**\\n * Vea Bridge Outbox From Arbitrum to Ethereum.\\n */\\ncontract VeaOutboxArbToEth is IVeaOutbox {\\n    struct Claim {\\n        bytes32 stateRoot;\\n        address bridger;\\n        uint64 timestamp;\\n        bool honest;\\n    }\\n\\n    struct Challenge {\\n        address challenger;\\n        bool honest;\\n    }\\n\\n    struct VeaOutboxInfo {\\n        uint64 latestVerifiedEpoch;\\n        uint64 latestHeartbeatTimestamp;\\n    }\\n\\n    IInbox public immutable inbox; // The address of the Arbitrum Inbox contract.\\n    address public immutable veaInbox; // The address of the veaInbox on arbitrum.\\n\\n    uint256 public immutable deposit; // The deposit required to submit a claim or challenge\\n    uint256 public immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 public immutable depositPlusReward; // 2 * deposit - burn\\n    uint256 public immutable depositMinusOne; // deposit - 1\\n    address public constant burnAddress = address(0x0000000000000000000000000000000000000000);\\n\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable challengePeriod; // Claim challenge timewindow.\\n    uint256 public immutable epochClaimWindow; // The number of past epochs a claim can be submitted for. eg 1 => 2 epoch claims possible epochNow, epochNow - 1\\n\\n    uint256 public immutable timeout; // The seconds before the bridge is considered shutdown.\\n\\n    bytes32 public stateRoot;\\n    VeaOutboxInfo public veaOutboxInfo;\\n\\n    mapping(uint256 => Claim) public claims; // epoch => claim\\n    mapping(uint256 => Challenge) public challenges; // epoch => challenge\\n    mapping(uint256 => bytes32) public relayed; // msgId/256 => packed replay bitmap\\n\\n    /**\\n     * @dev The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\\n     * @param epoch The epoch for which the the claim was made.\\n     * @param claimedStateRoot The claimed state root of the inbox snapshot.\\n     */\\n    event Claimed(uint256 indexed epoch, bytes32 claimedStateRoot);\\n\\n    /**\\n     * @dev This event indicates that `sendSafeFallback()` should be called on the sending side.\\n     * @param epoch The epoch associated with the challenged claim.\\n     */\\n    event Challenged(uint256 indexed epoch);\\n\\n    /**\\n     * @dev This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.\\n     * @param epoch The epoch associated with the verified inbox state root snapshot.\\n     */\\n    event Verified(uint256 indexed epoch);\\n\\n    /**\\n     * @dev This event indicates that the claim deposit has been withdrawn.\\n     * @param epoch The epoch associated with the claim.\\n     * @param bridger The recipient of the claim deposit.\\n     */\\n    event ClaimDepositWithdrawn(uint256 indexed epoch, address bridger);\\n\\n    /**\\n     * @dev This event indicates that the challenge deposit has been withdrawn.\\n     * @param epoch The epoch associated with the challenge.\\n     * @param challenger The recipient of the challenge deposit.\\n     */\\n    event ChallengeDepositWithdrawn(uint256 indexed epoch, address challenger);\\n\\n    /**\\n     * @dev This event indicates that the claim deposit has been withdrawn.\\n     * @param epoch The epoch associated with the claim.\\n     * @param bridger The recipient of the claim deposit.\\n     */\\n    event ClaimDepositWithdrawnTimeout(uint256 indexed epoch, address bridger);\\n\\n    /**\\n     * @dev This event indicates that the challenge deposit has been withdrawn.\\n     * @param epoch The epoch associated with the challenge.\\n     * @param challenger The recipient of the challenge deposit.\\n     */\\n    event ChallengeDepositWithdrawnTimeout(uint256 indexed epoch, address challenger);\\n\\n    /**\\n     * @dev This event indicates that a message has been relayed.\\n     * @param msgId The msgId of the message that was relayed.\\n     */\\n    event MessageRelayed(uint64 indexed msgId);\\n\\n    modifier OnlyBridgeRunning() {\\n        require(block.timestamp < veaOutboxInfo.latestHeartbeatTimestamp + timeout, \\\"Bridge Shutdown.\\\");\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        require(block.timestamp >= veaOutboxInfo.latestHeartbeatTimestamp + timeout, \\\"Bridge Running.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _timeout The seconds before the bridge is considered shutdown.\\n     * @param _epochClaimWindow The number of epochs a claim can be submitted for.\\n     * @param _veaInbox The address of the inbox contract on Ethereum.\\n     * @param _inbox The address of the inbox contract on Ethereum.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeout,\\n        uint256 _epochClaimWindow,\\n        address _veaInbox,\\n        address _inbox\\n    ) {\\n        deposit = _deposit;\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        timeout = _timeout;\\n        epochClaimWindow = _epochClaimWindow;\\n        veaInbox = _veaInbox;\\n        inbox = IInbox(_inbox);\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        // calculating depositMinusOne once saves gas\\n        depositMinusOne = _deposit - 1;\\n\\n        veaOutboxInfo.latestVerifiedEpoch = uint64(block.timestamp / epochPeriod) - 1;\\n        veaOutboxInfo.latestHeartbeatTimestamp = uint64(block.timestamp);\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Submit a claim about the the _stateRoot at _epoch and submit a deposit.\\n     * @param _epoch The epoch for which the claim is made.\\n     * @param _stateRoot The state root to claim.\\n     */\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external payable {\\n        // msg.value >= deposit <=> msg.value > deposit - 1\\n        // precalculated depositMinusOne = deposit - 1 in constructor saves gas\\n        require(msg.value > depositMinusOne, \\\"Insufficient claim deposit.\\\");\\n\\n        uint256 time = block.timestamp;\\n\\n        unchecked {\\n            uint256 epochNow = time / epochPeriod;\\n            require(_epoch <= epochNow && _epoch > epochNow - epochClaimWindow, \\\"Invalid epoch.\\\");\\n        }\\n\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claims[_epoch].bridger == address(0), \\\"Claim already made.\\\");\\n\\n        claims[_epoch] = Claim({stateRoot: _stateRoot, bridger: msg.sender, timestamp: uint64(time), honest: false});\\n\\n        emit Claimed(_epoch, _stateRoot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n     * @param epoch The epoch of the claim to challenge.\\n     */\\n    function challenge(uint256 epoch) external payable {\\n        // msg.value >= deposit <=> msg.value > deposit - 1\\n        // precalculated depositMinusOne = deposit - 1 in constructor saves gas\\n        require(msg.value > depositMinusOne, \\\"Insufficient challenge deposit.\\\");\\n\\n        require(claims[epoch].bridger != address(0), \\\"No claim to challenge.\\\");\\n        require(challenges[epoch].challenger == address(0), \\\"Claim already challenged.\\\");\\n\\n        unchecked {\\n            require(block.timestamp < uint256(claims[epoch].timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n        }\\n\\n        challenges[epoch] = Challenge({challenger: msg.sender, honest: false});\\n\\n        emit Challenged(epoch);\\n    }\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param epoch The epoch of the optimistic claim.\\n     */\\n    function validateSnapshot(uint256 epoch) external OnlyBridgeRunning {\\n        Claim storage claim = claims[epoch];\\n        require(claim.bridger != address(0), \\\"Invalid epoch, no claim to verify.\\\");\\n\\n        unchecked {\\n            require(block.timestamp > claim.timestamp + challengePeriod, \\\"Challenge period has not yet elapsed.\\\");\\n        }\\n\\n        require(challenges[epoch].challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (epoch > uint256(veaOutboxInfo.latestVerifiedEpoch)) {\\n            veaOutboxInfo.latestVerifiedEpoch = uint64(epoch);\\n            stateRoot = claim.stateRoot;\\n        }\\n\\n        claim.honest = true;\\n\\n        emit Verified(epoch);\\n    }\\n\\n    /**\\n     * Note: Access restricted to arbitrum  bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch to verify.\\n     * @param _stateRoot The true state root for the epoch.\\n     */\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot) external virtual OnlyBridgeRunning {\\n        IBridge bridge = inbox.bridge();\\n        require(msg.sender == address(bridge), \\\"Not from bridge.\\\");\\n        require(IOutbox(bridge.activeOutbox()).l2ToL1Sender() == veaInbox, \\\"Sender only.\\\");\\n\\n        if (_epoch > veaOutboxInfo.latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            veaOutboxInfo.latestVerifiedEpoch = uint64(_epoch);\\n            stateRoot = _stateRoot;\\n        }\\n\\n        Claim storage claim = claims[_epoch];\\n        Challenge storage challenge = challenges[_epoch];\\n\\n        if (claim.bridger != address(0) && claim.stateRoot == _stateRoot) {\\n            claim.honest = true;\\n        } else if (challenge.challenger != address(0)) {\\n            challenge.honest = true;\\n        }\\n\\n        emit Verified(_epoch);\\n    }\\n\\n    function heartbeat(uint256 timestamp) external OnlyBridgeRunning {\\n        IBridge bridge = inbox.bridge();\\n        require(msg.sender == address(bridge), \\\"Not from bridge.\\\");\\n        require(IOutbox(bridge.activeOutbox()).l2ToL1Sender() == veaInbox, \\\"Sender only.\\\");\\n\\n        if (timestamp > veaOutboxInfo.latestHeartbeatTimestamp) {\\n            veaOutboxInfo.latestHeartbeatTimestamp = uint64(timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies and relays the message. UNTRUSTED.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address of the contract on the receiving chain which receives the calldata.\\n     * @param message The message encoded with header from VeaInbox.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external {\\n        require(proof.length < 64, \\\"Proof too long.\\\");\\n        require(uint256(msgId) < 2 ** proof.length, \\\"Path not minimal.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(msgId, to, message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                bytes32 proofElement = proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero based index of the message in the inbox and is the same index to prevent replay\\n\\n        uint256 relayIndex = msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = to.call(message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(msgId);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 epoch) external {\\n        require(claims[epoch].honest == true, \\\"Claim failed.\\\");\\n\\n        address bridger = claims[epoch].bridger;\\n\\n        // redundant check\\n        // honest == true and challenger != address(0) are equivalent\\n        require(bridger != address(0), \\\"Claim does not exist\\\");\\n\\n        delete claims[epoch];\\n\\n        if (challenges[epoch].challenger != address(0)) {\\n            delete challenges[epoch];\\n            payable(burnAddress).send(burn);\\n            payable(bridger).send(depositPlusReward); // User is responsibility for accepting ETH.\\n        } else {\\n            payable(bridger).send(deposit); // User is responsibility for accepting ETH.\\n        }\\n\\n        emit ClaimDepositWithdrawn(epoch, bridger);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDeposit(uint256 epoch) external {\\n        require(challenges[epoch].honest == true, \\\"Challenge failed.\\\");\\n\\n        address challenger = challenges[epoch].challenger;\\n\\n        // redundant check\\n        // honest == true and challenger != address(0) are equivalent\\n        require(challenger != address(0), \\\"Challenge does not exist\\\");\\n\\n        delete challenges[epoch];\\n        delete claims[epoch];\\n\\n        payable(burnAddress).send(burn); // half burnt\\n        payable(challenger).send(depositPlusReward); // User is responsibility for accepting ETH.\\n\\n        emit ChallengeDepositWithdrawn(epoch, challenger);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDepositTimeout(uint256 epoch) external OnlyBridgeShutdown {\\n        address bridger = claims[epoch].bridger;\\n\\n        require(bridger != address(0), \\\"Claim does not exist\\\");\\n        require(claims[epoch].honest == false && challenges[epoch].honest == false, \\\"Invalid timeout withdrawal.\\\");\\n\\n        delete claims[epoch];\\n\\n        payable(bridger).send(deposit); // User is responsibility for accepting ETH.\\n\\n        emit ClaimDepositWithdrawnTimeout(epoch, bridger);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDepositTimeout(uint256 epoch) external OnlyBridgeShutdown {\\n        address challenger = challenges[epoch].challenger;\\n\\n        require(challenger != address(0), \\\"Challenge does not exist\\\");\\n        require(claims[epoch].honest == false && challenges[epoch].honest == false, \\\"Invalid timeout withdrawal.\\\");\\n\\n        delete challenges[epoch];\\n\\n        payable(challenger).send(deposit); // User is responsibility for accepting ETH.\\n\\n        emit ChallengeDepositWithdrawnTimeout(epoch, challenger);\\n    }\\n}\\n\",\"keccak256\":\"0x741bfe6403cd7c13c7e9fbc31310a037d75ad06c723e841480067571a265d889\",\"license\":\"MIT\"},\"src/canonical/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.7.0;\\n\\ninterface IInbox {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n}\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0xb567e54805f44ea8405231284583880a38e8a22bfe619528a4f8ec7550f11d1b\",\"license\":\"Apache-2.0\"},\"src/canonical/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.7.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(uint256 indexed batchNum, uint256 outboxIndex, bytes32 outputRoot, uint256 numInBatch);\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths) external;\\n}\\n\",\"keccak256\":\"0xdc4952b5238d6c6282595b2eab4058c86d2d232b99a2d67556c02d6c11eea94f\",\"license\":\"Apache-2.0\"},\"src/interfaces/IVeaOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVeaOutbox {\\n    /**\\n     * Note: Gateways expect first argument of message call to be the inbox sender, used for authenitcation.\\n     * @dev Verifies and relays the message.\\n     * @param proof The merkle proof to prove the message.\\n     * @param msgId The zero based index of the message in the inbox.\\n     * @param to The address to send the message to.\\n     * @param message The message to relay.\\n     */\\n    function sendMessage(bytes32[] calldata proof, uint64 msgId, address to, bytes calldata message) external;\\n\\n    /**\\n     * Note: Access restricted to canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n     * @param epoch The epoch to verify.\\n     * @param stateRoot The true state root for the epoch.\\n     */\\n    function resolveDisputedClaim(uint256 epoch, bytes32 stateRoot) external;\\n\\n    /**\\n     * @dev Keeps bridge alive.\\n     * @param timestamp The timestamp of the heartbeat.\\n     */\\n    function heartbeat(uint256 timestamp) external;\\n}\\n\",\"keccak256\":\"0x71130c6a7b73293e7135b5d3fd4503ad930d5c7e2ec10b2964927ed94cd29ad9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b506040516200255f3803806200255f833981016040819052620000359162000122565b60c08790526101408690526101608590526101a08490526101808390526001600160a01b0380831660a052811660805262000072600288620001a0565b60e081905262000084886002620001c3565b620000909190620001e5565b61010052620000a1600188620001e5565b6101205261014051600190620000b89042620001a0565b620000c49190620001ff565b60018054426001600160401b0390811668010000000000000000026001600160801b0319909216931692909217919091179055506200022a95505050505050565b80516001600160a01b03811681146200011d57600080fd5b919050565b600080600080600080600060e0888a0312156200013e57600080fd5b87519650602088015195506040880151945060608801519350608088015192506200016c60a0890162000105565b91506200017c60c0890162000105565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600082620001be57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620001e057620001e06200018a565b500290565b600082821015620001fa57620001fa6200018a565b500390565b60006001600160401b03838116908316818110156200022257620002226200018a565b039392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a05161221f620003406000396000818161037d0152818161068001528181611010015281816112150152818161144d015261172201526000818161022b015261093f015260008181610601015281816112f30152611be601526000818161059901526109020152600081816101e9015281816108900152611a8f0152600081816103fc01528181610f4a0152611e070152600081816102b401528181610f090152611dc60152600081816105cd0152818161081601528181610f97015261119c015260008181610198015281816115820152611857015260008181610655015281816114a40152611779015261221f6000f3fe6080604052600436106101815760003560e01c8063723d330a116100d1578063a888c2cd1161008a578063d0e30db011610064578063d0e30db0146105bb578063f3f480d9146105ef578063f4cf751b14610623578063fb0e722b1461064357600080fd5b8063a888c2cd146104e2578063ab82d9a014610574578063b5b7a1841461058757600080fd5b8063723d330a1461039f578063836e344b146103ea5780638caeb7a81461041e5780638f1d37761461043e57806390df63b71461049f5780639588eca2146104cc57600080fd5b806344df8e701161013e5780635fb2f7f5116101185780635fb2f7f5146103165780636e029ad11461033657806370d5ae051461035657806370dea79a1461036b57600080fd5b806344df8e70146102a257806350b81dbe146102d657806354dd1fbb146102f657600080fd5b806302d3e2361461018657806304dd2359146101d757806324ab8c17146102195780632d011ff11461024d57806331d144571461026f57806331ddf74314610282575b600080fd5b34801561019257600080fd5b506101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e357600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101ce565b34801561022557600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561025957600080fd5b5061026d610268366004611e7a565b610677565b005b61026d61027d366004611e93565b61088e565b34801561028e57600080fd5b5061026d61029d366004611f3c565b610b05565b3480156102ae57600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102e257600080fd5b5061026d6102f1366004611e7a565b610df2565b34801561030257600080fd5b5061026d610311366004611e7a565b611007565b34801561032257600080fd5b5061026d610331366004611e7a565b61120c565b34801561034257600080fd5b5061026d610351366004611e7a565b611444565b34801561036257600080fd5b506101ba600081565b34801561037757600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ab57600080fd5b506001546103ca906001600160401b0380821691600160401b90041682565b604080516001600160401b039384168152929091166020830152016101ce565b3480156103f657600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042a57600080fd5b5061026d610439366004611e93565b611719565b34801561044a57600080fd5b50610480610459366004611e7a565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016101ce565b3480156104ab57600080fd5b5061020b6104ba366004611e7a565b60046020526000908152604090205481565b3480156104d857600080fd5b5061020b60005481565b3480156104ee57600080fd5b5061053c6104fd366004611e7a565b600260205260009081526040902080546001909101546001600160a01b03811690600160a01b81046001600160401b031690600160e01b900460ff1684565b604080519485526001600160a01b0390931660208501526001600160401b0390911691830191909152151560608201526080016101ce565b61026d610582366004611e7a565b611a8d565b34801561059357600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c757600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105fb57600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561062f57600080fd5b5061026d61063e366004611e7a565b611cca565b34801561064f57600080fd5b506101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6001546106b5907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b4210156106fb5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064015b60405180910390fd5b6000818152600260205260409020600101546001600160a01b03168061075a5760405162461bcd60e51b815260206004820152601460248201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016106f2565b600082815260026020526040902060010154600160e01b900460ff161580156107995750600082815260036020526040902054600160a01b900460ff16155b6107e55760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642074696d656f7574207769746864726177616c2e000000000060448201526064016106f2565b60008281526002602052604080822082815560010180546001600160e81b0319169055516001600160a01b038316917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150506040516001600160a01b03851681528593507f7e6b142a218f73ba6036268baf59b969ebd7af9300bdd903d4b60dcdadf3ef15925060200190505b60405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000034116108fd5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016106f2565b4260007f0000000000000000000000000000000000000000000000000000000000000000828161092f5761092f61202b565b04905080841115801561096357507f0000000000000000000000000000000000000000000000000000000000000000810384115b6109a05760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b60448201526064016106f2565b50816109df5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b60448201526064016106f2565b6000838152600260205260409020600101546001600160a01b031615610a3d5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016106f2565b604080516080810182528381523360208083019182526001600160401b038086168486019081526000606086018181528a825260029094528690209451855592516001949094018054935192511515600160e01b0260ff60e01b1993909216600160a01b026001600160e01b03199094166001600160a01b03959095169490941792909217161790555183907fd5a2476fc450083bbb092dd3f4be92698ffdc2d213e6f1e730c7f44a52f1ccfc90610af89085815260200190565b60405180910390a2505050565b60408510610b475760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016106f2565b610b52856002612127565b846001600160401b031610610b9d5760405162461bcd60e51b81526020600482015260116024820152702830ba34103737ba1036b4b734b6b0b61760791b60448201526064016106f2565b600084848484604051602001610bb6949392919061213a565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610c36576000888883818110610bf857610bf861217c565b90506020020135905082811115610c1d57826000528060205260406000209250610c2d565b8060005282602052604060002092505b50600101610bdc565b508060005414610c795760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016106f2565b600885901c66ffffffffffffff1660008181526004602052604090205460ff87169080821c60011615610cee5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016106f2565b6000838152600460205260408082206001851b84179055516001600160a01b03891690610d1e9089908990612192565b6000604051808303816000865af19150503d8060008114610d5b576040519150601f19603f3d011682016040523d82523d6000602084013e610d60565b606091505b5050905080610db15760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016106f2565b6040516001600160401b038a16907f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c4294390600090a25050505050505050505050565b6000818152600260205260409020600190810154600160e01b900460ff16151514610e4f5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016106f2565b6000818152600260205260409020600101546001600160a01b031680610eae5760405162461bcd60e51b815260206004820152601460248201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016106f2565b600082815260026020908152604080832083815560010180546001600160e81b031916905560039091529020546001600160a01b031615610f875760008281526003602052604080822080546001600160a81b0319169055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f1935050505050610fcc565b6040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b6040516001600160a01b038216815282907f3d8490b2b1cee24079fde68fd6a415c1f12e9a76e8090ac027dad29b6660261990602001610882565b600154611045907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b4210156110865760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106f2565b6000818152600360205260409020546001600160a01b0316806110e65760405162461bcd60e51b815260206004820152601860248201527710da185b1b195b99d948191bd95cc81b9bdd08195e1a5cdd60421b60448201526064016106f2565b600082815260026020526040902060010154600160e01b900460ff161580156111255750600082815260036020526040902054600160a01b900460ff16155b6111715760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642074696d656f7574207769746864726177616c2e000000000060448201526064016106f2565b60008281526003602052604080822080546001600160a81b0319169055516001600160a01b038316917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150506040516001600160a01b03851681528593507f57a2aac8eeee60703f0470427b3a7ebeeaadf37120646ffe230c1ed17a5b08b892506020019050610882565b60015461124a907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b42106112685760405162461bcd60e51b81526004016106f2906121a2565b600081815260026020526040902060018101546001600160a01b03166112db5760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642065706f63682c206e6f20636c61696d20746f2076657269666044820152613c9760f11b60648201526084016106f2565b60018101546001600160401b03600160a01b909104167f000000000000000000000000000000000000000000000000000000000000000001421161136f5760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b60648201526084016106f2565b6000828152600360205260409020546001600160a01b0316156113cb5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016106f2565b6001546001600160401b0316821115611400576001805467ffffffffffffffff19166001600160401b03841617905580546000555b60018101805460ff60e01b1916600160e01b17905560405182907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a25050565b600154611482907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b42106114a05760405162461bcd60e51b81526004016106f2906121a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153391906121cc565b9050336001600160a01b038216146115805760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016106f2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e357600080fd5b505afa1580156115f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161b91906121cc565b6001600160a01b03166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561165357600080fd5b505afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b91906121cc565b6001600160a01b0316146116d05760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b60448201526064016106f2565b600154600160401b90046001600160401b031682111561171557600180546fffffffffffffffff00000000000000001916600160401b6001600160401b038516021790555b5050565b600154611757907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b42106117755760405162461bcd60e51b81526004016106f2906121a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156117d057600080fd5b505afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180891906121cc565b9050336001600160a01b038216146118555760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016106f2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b857600080fd5b505afa1580156118cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f091906121cc565b6001600160a01b03166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196091906121cc565b6001600160a01b0316146119a55760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b60448201526064016106f2565b6001546001600160401b0316831180156119be57508115155b156119e5576001805467ffffffffffffffff19166001600160401b03851617905560008290555b6000838152600260209081526040808320600390925290912060018201546001600160a01b031615801590611a1a5750815484145b15611a395760018201805460ff60e01b1916600160e01b179055611a5b565b80546001600160a01b031615611a5b57805460ff60a01b1916600160a01b1781555b60405185907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a25050505050565b7f00000000000000000000000000000000000000000000000000000000000000003411611afc5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016106f2565b6000818152600260205260409020600101546001600160a01b0316611b5c5760405162461bcd60e51b815260206004820152601660248201527527379031b630b4b6903a379031b430b63632b733b29760511b60448201526064016106f2565b6000818152600360205260409020546001600160a01b031615611bc15760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016106f2565b6000818152600260205260409020600101546001600160401b03600160a01b909104167f0000000000000000000000000000000000000000000000000000000000000000014210611c545760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e0000000000000060448201526064016106f2565b6040805180820182523381526000602080830182815285835260039091528382209251835491511515600160a01b026001600160a81b03199092166001600160a01b03919091161717909155905182917fce8523abf4f233988e032510f5de6ab0a96edd7bfcd5d0eb347d207bd67b334491a250565b600081815260036020526040902054600160a01b900460ff161515600114611d285760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016106f2565b6000818152600360205260409020546001600160a01b031680611d885760405162461bcd60e51b815260206004820152601860248201527710da185b1b195b99d948191bd95cc81b9bdd08195e1a5cdd60421b60448201526064016106f2565b600082815260036020908152604080832080546001600160a81b0319169055600290915280822082815560010180546001600160e81b0319169055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150506040516001600160a01b03851681528593507f9e0ea87919796fe5ad8e4362a6a3ff07f6a73e0731b94f451d7184e4928f313b92506020019050610882565b600060208284031215611e8c57600080fd5b5035919050565b60008060408385031215611ea657600080fd5b50508035926020909101359150565b80356001600160401b0381168114611ecc57600080fd5b919050565b6001600160a01b0381168114611ee657600080fd5b50565b8035611ecc81611ed1565b60008083601f840112611f0657600080fd5b5081356001600160401b03811115611f1d57600080fd5b602083019150836020828501011115611f3557600080fd5b9250929050565b60008060008060008060808789031215611f5557600080fd5b86356001600160401b0380821115611f6c57600080fd5b818901915089601f830112611f8057600080fd5b813581811115611f8f57600080fd5b8a60208260051b8501011115611fa457600080fd5b60208301985080975050611fba60208a01611eb5565b9550611fc860408a01611ee9565b94506060890135915080821115611fde57600080fd5b50611feb89828a01611ef4565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561202657612026611ffd565b500190565b634e487b7160e01b600052601260045260246000fd5b600181815b8085111561207c57816000190482111561206257612062611ffd565b8085161561206f57918102915b93841c9390800290612046565b509250929050565b60008261209357506001612121565b816120a057506000612121565b81600181146120b657600281146120c0576120dc565b6001915050612121565b60ff8411156120d1576120d1611ffd565b50506001821b612121565b5060208310610133831016604e8410600b84101617156120ff575081810a612121565b6121098383612041565b806000190482111561211d5761211d611ffd565b0290505b92915050565b60006121338383612084565b9392505050565b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b60208082526010908201526f213934b233b29029b43aba3237bbb71760811b604082015260600190565b6000602082840312156121de57600080fd5b815161213381611ed156fea26469706673582212208d1c2d4bb0bc851d52929a4be8d5b7a2732b922c568afc7ca807a8ecf790cd9764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c8063723d330a116100d1578063a888c2cd1161008a578063d0e30db011610064578063d0e30db0146105bb578063f3f480d9146105ef578063f4cf751b14610623578063fb0e722b1461064357600080fd5b8063a888c2cd146104e2578063ab82d9a014610574578063b5b7a1841461058757600080fd5b8063723d330a1461039f578063836e344b146103ea5780638caeb7a81461041e5780638f1d37761461043e57806390df63b71461049f5780639588eca2146104cc57600080fd5b806344df8e701161013e5780635fb2f7f5116101185780635fb2f7f5146103165780636e029ad11461033657806370d5ae051461035657806370dea79a1461036b57600080fd5b806344df8e70146102a257806350b81dbe146102d657806354dd1fbb146102f657600080fd5b806302d3e2361461018657806304dd2359146101d757806324ab8c17146102195780632d011ff11461024d57806331d144571461026f57806331ddf74314610282575b600080fd5b34801561019257600080fd5b506101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e357600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101ce565b34801561022557600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561025957600080fd5b5061026d610268366004611e7a565b610677565b005b61026d61027d366004611e93565b61088e565b34801561028e57600080fd5b5061026d61029d366004611f3c565b610b05565b3480156102ae57600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102e257600080fd5b5061026d6102f1366004611e7a565b610df2565b34801561030257600080fd5b5061026d610311366004611e7a565b611007565b34801561032257600080fd5b5061026d610331366004611e7a565b61120c565b34801561034257600080fd5b5061026d610351366004611e7a565b611444565b34801561036257600080fd5b506101ba600081565b34801561037757600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ab57600080fd5b506001546103ca906001600160401b0380821691600160401b90041682565b604080516001600160401b039384168152929091166020830152016101ce565b3480156103f657600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042a57600080fd5b5061026d610439366004611e93565b611719565b34801561044a57600080fd5b50610480610459366004611e7a565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016101ce565b3480156104ab57600080fd5b5061020b6104ba366004611e7a565b60046020526000908152604090205481565b3480156104d857600080fd5b5061020b60005481565b3480156104ee57600080fd5b5061053c6104fd366004611e7a565b600260205260009081526040902080546001909101546001600160a01b03811690600160a01b81046001600160401b031690600160e01b900460ff1684565b604080519485526001600160a01b0390931660208501526001600160401b0390911691830191909152151560608201526080016101ce565b61026d610582366004611e7a565b611a8d565b34801561059357600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c757600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105fb57600080fd5b5061020b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561062f57600080fd5b5061026d61063e366004611e7a565b611cca565b34801561064f57600080fd5b506101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6001546106b5907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b4210156106fb5760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064015b60405180910390fd5b6000818152600260205260409020600101546001600160a01b03168061075a5760405162461bcd60e51b815260206004820152601460248201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016106f2565b600082815260026020526040902060010154600160e01b900460ff161580156107995750600082815260036020526040902054600160a01b900460ff16155b6107e55760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642074696d656f7574207769746864726177616c2e000000000060448201526064016106f2565b60008281526002602052604080822082815560010180546001600160e81b0319169055516001600160a01b038316917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150506040516001600160a01b03851681528593507f7e6b142a218f73ba6036268baf59b969ebd7af9300bdd903d4b60dcdadf3ef15925060200190505b60405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000034116108fd5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016106f2565b4260007f0000000000000000000000000000000000000000000000000000000000000000828161092f5761092f61202b565b04905080841115801561096357507f0000000000000000000000000000000000000000000000000000000000000000810384115b6109a05760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b60448201526064016106f2565b50816109df5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b60448201526064016106f2565b6000838152600260205260409020600101546001600160a01b031615610a3d5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016106f2565b604080516080810182528381523360208083019182526001600160401b038086168486019081526000606086018181528a825260029094528690209451855592516001949094018054935192511515600160e01b0260ff60e01b1993909216600160a01b026001600160e01b03199094166001600160a01b03959095169490941792909217161790555183907fd5a2476fc450083bbb092dd3f4be92698ffdc2d213e6f1e730c7f44a52f1ccfc90610af89085815260200190565b60405180910390a2505050565b60408510610b475760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016106f2565b610b52856002612127565b846001600160401b031610610b9d5760405162461bcd60e51b81526020600482015260116024820152702830ba34103737ba1036b4b734b6b0b61760791b60448201526064016106f2565b600084848484604051602001610bb6949392919061213a565b604051602081830303815290604052805190602001209050806000526020600020905060005b86811015610c36576000888883818110610bf857610bf861217c565b90506020020135905082811115610c1d57826000528060205260406000209250610c2d565b8060005282602052604060002092505b50600101610bdc565b508060005414610c795760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016106f2565b600885901c66ffffffffffffff1660008181526004602052604090205460ff87169080821c60011615610cee5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016106f2565b6000838152600460205260408082206001851b84179055516001600160a01b03891690610d1e9089908990612192565b6000604051808303816000865af19150503d8060008114610d5b576040519150601f19603f3d011682016040523d82523d6000602084013e610d60565b606091505b5050905080610db15760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016106f2565b6040516001600160401b038a16907f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c4294390600090a25050505050505050505050565b6000818152600260205260409020600190810154600160e01b900460ff16151514610e4f5760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b60448201526064016106f2565b6000818152600260205260409020600101546001600160a01b031680610eae5760405162461bcd60e51b815260206004820152601460248201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016106f2565b600082815260026020908152604080832083815560010180546001600160e81b031916905560039091529020546001600160a01b031615610f875760008281526003602052604080822080546001600160a81b0319169055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f1935050505050610fcc565b6040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505b6040516001600160a01b038216815282907f3d8490b2b1cee24079fde68fd6a415c1f12e9a76e8090ac027dad29b6660261990602001610882565b600154611045907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b4210156110865760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106f2565b6000818152600360205260409020546001600160a01b0316806110e65760405162461bcd60e51b815260206004820152601860248201527710da185b1b195b99d948191bd95cc81b9bdd08195e1a5cdd60421b60448201526064016106f2565b600082815260026020526040902060010154600160e01b900460ff161580156111255750600082815260036020526040902054600160a01b900460ff16155b6111715760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642074696d656f7574207769746864726177616c2e000000000060448201526064016106f2565b60008281526003602052604080822080546001600160a81b0319169055516001600160a01b038316917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150506040516001600160a01b03851681528593507f57a2aac8eeee60703f0470427b3a7ebeeaadf37120646ffe230c1ed17a5b08b892506020019050610882565b60015461124a907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b42106112685760405162461bcd60e51b81526004016106f2906121a2565b600081815260026020526040902060018101546001600160a01b03166112db5760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642065706f63682c206e6f20636c61696d20746f2076657269666044820152613c9760f11b60648201526084016106f2565b60018101546001600160401b03600160a01b909104167f000000000000000000000000000000000000000000000000000000000000000001421161136f5760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b60648201526084016106f2565b6000828152600360205260409020546001600160a01b0316156113cb5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016106f2565b6001546001600160401b0316821115611400576001805467ffffffffffffffff19166001600160401b03841617905580546000555b60018101805460ff60e01b1916600160e01b17905560405182907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a25050565b600154611482907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b42106114a05760405162461bcd60e51b81526004016106f2906121a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153391906121cc565b9050336001600160a01b038216146115805760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016106f2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e357600080fd5b505afa1580156115f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161b91906121cc565b6001600160a01b03166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561165357600080fd5b505afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b91906121cc565b6001600160a01b0316146116d05760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b60448201526064016106f2565b600154600160401b90046001600160401b031682111561171557600180546fffffffffffffffff00000000000000001916600160401b6001600160401b038516021790555b5050565b600154611757907f000000000000000000000000000000000000000000000000000000000000000090600160401b90046001600160401b0316612013565b42106117755760405162461bcd60e51b81526004016106f2906121a2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b1580156117d057600080fd5b505afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180891906121cc565b9050336001600160a01b038216146118555760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064016106f2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b857600080fd5b505afa1580156118cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f091906121cc565b6001600160a01b03166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196091906121cc565b6001600160a01b0316146119a55760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b60448201526064016106f2565b6001546001600160401b0316831180156119be57508115155b156119e5576001805467ffffffffffffffff19166001600160401b03851617905560008290555b6000838152600260209081526040808320600390925290912060018201546001600160a01b031615801590611a1a5750815484145b15611a395760018201805460ff60e01b1916600160e01b179055611a5b565b80546001600160a01b031615611a5b57805460ff60a01b1916600160a01b1781555b60405185907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a25050505050565b7f00000000000000000000000000000000000000000000000000000000000000003411611afc5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016106f2565b6000818152600260205260409020600101546001600160a01b0316611b5c5760405162461bcd60e51b815260206004820152601660248201527527379031b630b4b6903a379031b430b63632b733b29760511b60448201526064016106f2565b6000818152600360205260409020546001600160a01b031615611bc15760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064016106f2565b6000818152600260205260409020600101546001600160401b03600160a01b909104167f0000000000000000000000000000000000000000000000000000000000000000014210611c545760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e0000000000000060448201526064016106f2565b6040805180820182523381526000602080830182815285835260039091528382209251835491511515600160a01b026001600160a81b03199092166001600160a01b03919091161717909155905182917fce8523abf4f233988e032510f5de6ab0a96edd7bfcd5d0eb347d207bd67b334491a250565b600081815260036020526040902054600160a01b900460ff161515600114611d285760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b60448201526064016106f2565b6000818152600360205260409020546001600160a01b031680611d885760405162461bcd60e51b815260206004820152601860248201527710da185b1b195b99d948191bd95cc81b9bdd08195e1a5cdd60421b60448201526064016106f2565b600082815260036020908152604080832080546001600160a81b0319169055600290915280822082815560010180546001600160e81b0319169055517f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150506040516001600160a01b03851681528593507f9e0ea87919796fe5ad8e4362a6a3ff07f6a73e0731b94f451d7184e4928f313b92506020019050610882565b600060208284031215611e8c57600080fd5b5035919050565b60008060408385031215611ea657600080fd5b50508035926020909101359150565b80356001600160401b0381168114611ecc57600080fd5b919050565b6001600160a01b0381168114611ee657600080fd5b50565b8035611ecc81611ed1565b60008083601f840112611f0657600080fd5b5081356001600160401b03811115611f1d57600080fd5b602083019150836020828501011115611f3557600080fd5b9250929050565b60008060008060008060808789031215611f5557600080fd5b86356001600160401b0380821115611f6c57600080fd5b818901915089601f830112611f8057600080fd5b813581811115611f8f57600080fd5b8a60208260051b8501011115611fa457600080fd5b60208301985080975050611fba60208a01611eb5565b9550611fc860408a01611ee9565b94506060890135915080821115611fde57600080fd5b50611feb89828a01611ef4565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561202657612026611ffd565b500190565b634e487b7160e01b600052601260045260246000fd5b600181815b8085111561207c57816000190482111561206257612062611ffd565b8085161561206f57918102915b93841c9390800290612046565b509250929050565b60008261209357506001612121565b816120a057506000612121565b81600181146120b657600281146120c0576120dc565b6001915050612121565b60ff8411156120d1576120d1611ffd565b50506001821b612121565b5060208310610133831016604e8410600b84101617156120ff575081810a612121565b6121098383612041565b806000190482111561211d5761211d611ffd565b0290505b92915050565b60006121338383612084565b9392505050565b60c085901b6001600160c01b0319168152606084901b6bffffffffffffffffffffffff191660088201528183601c83013760009101601c019081529392505050565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b60208082526010908201526f213934b233b29029b43aba3237bbb71760811b604082015260600190565b6000602082840312156121de57600080fd5b815161213381611ed156fea26469706673582212208d1c2d4bb0bc851d52929a4be8d5b7a2732b922c568afc7ca807a8ecf790cd9764736f6c63430008090033",
  "devdoc": {
    "events": {
      "ChallengeDepositWithdrawn(uint256,address)": {
        "details": "This event indicates that the challenge deposit has been withdrawn.",
        "params": {
          "challenger": "The recipient of the challenge deposit.",
          "epoch": "The epoch associated with the challenge."
        }
      },
      "ChallengeDepositWithdrawnTimeout(uint256,address)": {
        "details": "This event indicates that the challenge deposit has been withdrawn.",
        "params": {
          "challenger": "The recipient of the challenge deposit.",
          "epoch": "The epoch associated with the challenge."
        }
      },
      "Challenged(uint256)": {
        "details": "This event indicates that `sendSafeFallback()` should be called on the sending side.",
        "params": {
          "epoch": "The epoch associated with the challenged claim."
        }
      },
      "ClaimDepositWithdrawn(uint256,address)": {
        "details": "This event indicates that the claim deposit has been withdrawn.",
        "params": {
          "bridger": "The recipient of the claim deposit.",
          "epoch": "The epoch associated with the claim."
        }
      },
      "ClaimDepositWithdrawnTimeout(uint256,address)": {
        "details": "This event indicates that the claim deposit has been withdrawn.",
        "params": {
          "bridger": "The recipient of the claim deposit.",
          "epoch": "The epoch associated with the claim."
        }
      },
      "Claimed(uint256,bytes32)": {
        "details": "The Fast Bridge participants watch for these events to decide if a challenge should be submitted.",
        "params": {
          "claimedStateRoot": "The claimed state root of the inbox snapshot.",
          "epoch": "The epoch for which the the claim was made."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "msgId": "The msgId of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "epoch": "The epoch associated with the verified inbox state root snapshot."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256)": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochClaimWindow": "The number of epochs a claim can be submitted for.",
          "_epochPeriod": "The duration of each epoch.",
          "_inbox": "The address of the inbox contract on Ethereum.",
          "_timeout": "The seconds before the bridge is considered shutdown.",
          "_veaInbox": "The address of the inbox contract on Ethereum."
        }
      },
      "heartbeat(uint256)": {
        "details": "Keeps bridge alive.",
        "params": {
          "timestamp": "The timestamp of the heartbeat."
        }
      },
      "resolveDisputedClaim(uint256,bytes32)": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch to verify.",
          "_stateRoot": "The true state root for the epoch."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "message": "The message encoded with header from VeaInbox.",
          "msgId": "The zero based index of the message in the inbox.",
          "proof": "The merkle proof to prove the message.",
          "to": "The address of the contract on the receiving chain which receives the calldata."
        }
      },
      "validateSnapshot(uint256)": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256)": {
        "details": "Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengeDepositTimeout(uint256)": {
        "details": "Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256)": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDepositTimeout(uint256)": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32)": {
        "notice": "Note: Access restricted to arbitrum  bridge."
      }
    },
    "notice": "Vea Bridge Outbox From Arbitrum to Ethereum.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 466,
        "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
        "label": "stateRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 469,
        "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
        "label": "veaOutboxInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(VeaOutboxInfo)437_storage"
      },
      {
        "astId": 474,
        "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
        "label": "claims",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Claim)427_storage)"
      },
      {
        "astId": 479,
        "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
        "label": "challenges",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Challenge)432_storage)"
      },
      {
        "astId": 483,
        "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
        "label": "relayed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Challenge)432_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VeaOutboxArbToEth.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)432_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)427_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VeaOutboxArbToEth.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)427_storage"
      },
      "t_struct(Challenge)432_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutboxArbToEth.Challenge",
        "members": [
          {
            "astId": 429,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 431,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "honest",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Claim)427_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutboxArbToEth.Claim",
        "members": [
          {
            "astId": 420,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "stateRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 422,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "bridger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 424,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "timestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 426,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "honest",
            "offset": 28,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VeaOutboxInfo)437_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutboxArbToEth.VeaOutboxInfo",
        "members": [
          {
            "astId": 434,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "latestVerifiedEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 436,
            "contract": "src/ArbToEth/VeaOutboxArbToEth.sol:VeaOutboxArbToEth",
            "label": "latestHeartbeatTimestamp",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
