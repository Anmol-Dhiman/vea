{
  "address": "0x5163B30Bb835E9bbae1eAf2eFA9051A68409f796",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numEpochTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochClaimWindow",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_veaInbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "ChallengeDepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "ChallengeDepositWithdrawnTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_bridger",
          "type": "address"
        }
      ],
      "name": "ClaimDepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_bridger",
          "type": "address"
        }
      ],
      "name": "ClaimDepositWithdrawnTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_batchMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "honest",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "depositAndRewardWithdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochClaim",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateroot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "stateroot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "honest",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "depositAndRewardWithdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochClaimWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numEpochTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaInbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "verifyAndRelayMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "verifyStateroot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengeDepositTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimDepositTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1f325f94660a7a4a3a252210406726b2f86ecd0596b0e232dbe92a829eec0a3",
  "receipt": {
    "to": null,
    "from": "0x209469C921db9d5Bd77084370e80B63d5cdD63C1",
    "contractAddress": "0x5163B30Bb835E9bbae1eAf2eFA9051A68409f796",
    "transactionIndex": 72,
    "gasUsed": "1758592",
    "logsBloom": "0x
    "blockHash": "0xab8c54c93873fd3b7093bd2476576861e9cbff60ede7fecbdaeb9765020efd2a",
    "transactionHash": "0xe1f325f94660a7a4a3a252210406726b2f86ecd0596b0e232dbe92a829eec0a3",
    "logs": [],
    "blockNumber": 8730984,
    "cumulativeGasUsed": "7224387",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000000",
    1800,
    1800,
    12,
    2,
    "0x40Aee52130959241C8b1bB95648Db110bD864923",
    "0x6BEbC4925716945D46F0Ec336D5C2564F419682C"
  ],
  "numDeployments": 2,
  "solcInputHash": "33f65c96cdead37c6efb303c324555f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numEpochTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochClaimWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_veaInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"ChallengeDepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"ChallengeDepositWithdrawnTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bridger\",\"type\":\"address\"}],\"name\":\"ClaimDepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bridger\",\"type\":\"address\"}],\"name\":\"ClaimDepositWithdrawnTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"honest\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositAndRewardWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochClaim\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateroot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateroot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"honest\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositAndRewardWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochClaimWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numEpochTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaInbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"verifyAndRelayMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"verifyStateroot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengeDepositTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimDepositTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ChallengeDepositWithdrawn(uint256,address)\":{\"details\":\"This event indicates that the challenge deposit has been withdrawn.\",\"params\":{\"_challenger\":\"The recipient of the challenge deposit.\",\"_epoch\":\"The epoch associated with the batch.\"}},\"ChallengeDepositWithdrawnTimeout(uint256,address)\":{\"details\":\"This event indicates that the challenge deposit has been withdrawn.\",\"params\":{\"_challenger\":\"The recipient of the challenge deposit.\",\"_epoch\":\"The epoch associated with the batch.\"}},\"Challenged(uint256)\":{\"details\":\"This event indicates that `sendSafeFallback()` should be called on the sending side.\",\"params\":{\"_epoch\":\"The epoch associated with the challenged claim.\"}},\"ClaimDepositWithdrawn(uint256,address)\":{\"details\":\"This event indicates that the claim deposit has been withdrawn.\",\"params\":{\"_bridger\":\"The recipient of the claim deposit.\",\"_epoch\":\"The epoch associated with the batch.\"}},\"ClaimDepositWithdrawnTimeout(uint256,address)\":{\"details\":\"This event indicates that the claim deposit has been withdrawn.\",\"params\":{\"_bridger\":\"The recipient of the claim deposit.\",\"_epoch\":\"The epoch associated with the batch.\"}},\"Claimed(uint256,bytes32)\":{\"details\":\"The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\",\"params\":{\"_batchMerkleRoot\":\"The timestamp of the claim creation.\",\"_epoch\":\"The epoch for which the the claim was made.\"}},\"MessageRelayed(uint256)\":{\"details\":\"This event indicates that a message has been relayed for the batch in this `_epoch`.\",\"params\":{\"_nonce\":\"The nonce of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"_epoch\":\"The epoch associated with the batch.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256)\":{\"details\":\"Submit a challenge for the claim of the current epoch's Fast Bridge batch merkleroot state and submit a deposit. The `batchMerkleRoot` in the claim already made for the last finalized epoch should be different from the one on the sending side, otherwise the sender will lose his deposit.\",\"params\":{\"_epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the the _stateroot at _epoch and submit a deposit.\",\"params\":{\"_stateroot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochClaimWindow\":\"The number of epochs a claim can be submitted for.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_inbox\":\"The address of the inbox contract on Ethereum.\",\"_numEpochTimeout\":\"The number of epochs after which the bridge is considered to be frozen.\",\"_veaInbox\":\"The address of the inbox contract on Ethereum.\"}},\"resolveChallenge(uint256,bytes32)\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch to verify.\",\"_stateRoot\":\"The true batch merkle root for the epoch.\"}},\"verifyAndRelayMessage(bytes32[],bytes)\":{\"details\":\"Verifies and relays the message.\",\"params\":{\"_message\":\"The data of the message.\",\"_proof\":\"The merkle proof to prove the message.\"}},\"verifyStateroot(uint256)\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengeDepositTimeout(uint256)\":{\"details\":\"Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawClaimDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDepositTimeout(uint256)\":{\"details\":\"Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveChallenge(uint256,bytes32)\":{\"notice\":\"Note: Access restricted to arbitrum canonical bridge.\"}},\"notice\":\"Vea Bridge Outbox On L1 Ethereum\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/VeaOutbox.sol\":\"VeaOutbox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/VeaOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./canonical/arbitrum/IInbox.sol\\\";\\nimport \\\"./canonical/arbitrum/IOutbox.sol\\\";\\nimport \\\"./interfaces/IVeaOutbox.sol\\\";\\n\\n/**\\n * Vea Bridge Outbox On L1 Ethereum\\n */\\ncontract VeaOutbox is IVeaOutbox{\\n\\n    struct Claim {\\n        bytes32 stateroot;\\n        address bridger;\\n        uint32 timestamp;\\n        bool honest;\\n        bool depositAndRewardWithdrawn;\\n    }\\n\\n    struct Challenge {\\n        address challenger;\\n        bool honest;\\n        bool depositAndRewardWithdrawn;\\n    }\\n\\n    IInbox public immutable inbox; // The address of the Arbitrum Inbox contract.\\n    uint256 public immutable deposit; // The deposit required to submit a claim or challenge\\n    uint256 public immutable numEpochTimeout; // The number unresolved epochs before the bridge is considered to be timed out\\n    uint256 public immutable epochClaimWindow; // The number of epochs a claim can be submitted for\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential batches of messages.\\n    uint256 public immutable challengePeriod; // Claim challenge timewindow.\\n    address public immutable veaInbox; // The address of the veaInbox on ethereum.\\n\\n    bytes32 public stateRoot;\\n    uint256 public latestVerifiedEpoch;\\n\\n    mapping(uint256 => Claim) public claims; // epoch => claim\\n    mapping(uint256 => Challenge) public challenges; // epoch => challenge\\n    mapping(uint256 => bytes32) public relayed; // nonce/256 => packed replay bitmap\\n\\n    /**\\n     * @dev The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\\n     * @param _epoch The epoch for which the the claim was made.\\n     * @param _batchMerkleRoot The timestamp of the claim creation.\\n     */\\n    event Claimed(uint256 indexed _epoch, bytes32 _batchMerkleRoot);\\n\\n    /**\\n     * @dev This event indicates that `sendSafeFallback()` should be called on the sending side.\\n     * @param _epoch The epoch associated with the challenged claim.\\n     */\\n    event Challenged(uint256 indexed _epoch);\\n\\n    /**\\n     * @dev This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.\\n     * @param _epoch The epoch associated with the batch.\\n     */\\n    event Verified(uint256 indexed _epoch);\\n\\n    /**\\n     * @dev This event indicates that the claim deposit has been withdrawn.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _bridger The recipient of the claim deposit.\\n     */\\n    event ClaimDepositWithdrawn(uint256 indexed _epoch, address indexed _bridger);\\n\\n    /**\\n     * @dev This event indicates that the claim deposit has been withdrawn.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _bridger The recipient of the claim deposit.\\n     */\\n    event ClaimDepositWithdrawnTimeout(uint256 indexed _epoch, address indexed _bridger);\\n\\n    /**\\n     * @dev This event indicates that the challenge deposit has been withdrawn.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _challenger The recipient of the challenge deposit.\\n     */\\n    event ChallengeDepositWithdrawn(uint256 indexed _epoch, address indexed _challenger);\\n\\n    /**\\n     * @dev This event indicates that the challenge deposit has been withdrawn.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _challenger The recipient of the challenge deposit.\\n     */\\n    event ChallengeDepositWithdrawnTimeout(uint256 indexed _epoch, address indexed _challenger);\\n\\n    /**\\n     * @dev This event indicates that a message has been relayed for the batch in this `_epoch`.\\n     * @param _nonce The nonce of the message that was relayed.\\n     */\\n    event MessageRelayed(uint256 indexed _nonce);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _deposit The deposit amount to submit a claim in wei.\\n     * @param _epochPeriod The duration of each epoch.\\n     * @param _challengePeriod The duration of the period allowing to challenge a claim.\\n     * @param _numEpochTimeout The number of epochs after which the bridge is considered to be frozen.\\n     * @param _epochClaimWindow The number of epochs a claim can be submitted for.\\n     * @param _veaInbox The address of the inbox contract on Ethereum.\\n     * @param _inbox The address of the inbox contract on Ethereum.\\n     */\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _numEpochTimeout,\\n        uint256 _epochClaimWindow,\\n        address _veaInbox,\\n        address _inbox\\n    ) {\\n        deposit = _deposit;\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        numEpochTimeout = _numEpochTimeout;\\n        epochClaimWindow = _epochClaimWindow;\\n        veaInbox = _veaInbox;\\n        inbox = IInbox(_inbox);\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n    }\\n\\n    modifier NotFrozen() {\\n         require(block.timestamp/epochPeriod < latestVerifiedEpoch + numEpochTimeout, \\\"Bridge Frozen\\\");\\n         _;\\n     }\\n\\n    modifier Frozen() {\\n         require(block.timestamp/epochPeriod > latestVerifiedEpoch + numEpochTimeout, \\\"Bridge Not Frozen\\\");\\n         _;\\n     }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Submit a claim about the the _stateroot at _epoch and submit a deposit.\\n     * @param _stateroot The state root to claim.\\n     */\\n    function claim(uint256 _epochClaim, bytes32 _stateroot) external payable NotFrozen() {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n        uint256 epoch = block.timestamp / epochPeriod;\\n        require(_epochClaim <= epoch && _epochClaim + epochClaimWindow >= epoch, \\\"Invalid epoch.\\\");\\n        require(_stateroot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claims[_epochClaim].bridger == address(0), \\\"Claim already made.\\\");\\n\\n        claims[_epochClaim] = Claim({\\n            stateroot: _stateroot,\\n            bridger: msg.sender,\\n            timestamp: uint32(block.timestamp),\\n            honest: false,\\n            depositAndRewardWithdrawn: false\\n        });\\n        emit Claimed(_epochClaim, _stateroot);\\n    }\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the current epoch's Fast Bridge batch merkleroot state and submit a deposit. The `batchMerkleRoot` in the claim already made for the last finalized epoch should be different from the one on the sending side, otherwise the sender will lose his deposit.\\n     * @param _epoch The epoch of the claim to challenge.\\n     */\\n    function challenge(uint256 _epoch) external payable {\\n        require(msg.value >= deposit, \\\"Not enough claim deposit\\\");\\n\\n        // Can only challenge the only active claim, about the previous epoch\\n        require(claims[_epoch].bridger != address(0), \\\"No claim to challenge.\\\");\\n        require(challenges[_epoch].challenger == address(0), \\\"Claim already challenged.\\\");\\n        require(block.timestamp < uint256(claims[_epoch].timestamp) + challengePeriod, \\\"Challenge period elapsed.\\\");\\n\\n        challenges[_epoch] = Challenge({\\n            challenger: msg.sender,\\n            honest: false,\\n            depositAndRewardWithdrawn: false\\n        });\\n\\n        emit Challenged(_epoch);\\n    }\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch of the optimistic claim.\\n     */\\n    function verifyStateroot(uint256 _epoch) external {\\n        Claim storage claim = claims[_epoch];\\n        require(claim.bridger != address(0), \\\"Invalid epoch, no claim to verify.\\\");\\n        require(block.timestamp > uint256(claims[_epoch].timestamp) + challengePeriod, \\\"Challenge period has not yet elapsed.\\\");\\n        require(challenges[_epoch].challenger == address(0), \\\"Claim is challenged.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = claim.stateroot;\\n        }\\n        claim.honest = true;\\n\\n        emit Verified(_epoch);\\n    }\\n\\n    /**\\n     * Note: Access restricted to arbitrum canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch to verify.\\n     * @param _stateRoot The true batch merkle root for the epoch.\\n     */\\n    function resolveChallenge(uint256 _epoch, bytes32 _stateRoot) external virtual{\\n        IBridge bridge = inbox.bridge();\\n        require(msg.sender == address(bridge), \\\"Not from bridge.\\\");\\n        require(IOutbox(bridge.activeOutbox()).l2ToL1Sender() == veaInbox, \\\"Sender only.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _stateRoot;\\n        }\\n        \\n        if (claims[_epoch].bridger != address(0)) {\\n            if (_stateRoot == claims[_epoch].stateroot) {\\n                claims[_epoch].honest = true;\\n            } else {\\n                challenges[_epoch].honest = true;\\n            }\\n        }\\n\\n        emit Verified(_epoch);\\n    }\\n\\n    /**\\n     * @dev Verifies and relays the message.\\n     * @param _proof The merkle proof to prove the message.\\n     * @param _message The data of the message.\\n     */\\n    function verifyAndRelayMessage(\\n        bytes32[] calldata _proof,\\n        bytes calldata _message\\n    ) external {\\n        bytes32 singleHash = keccak256(_message);\\n        bytes32 msgHash; // double hashed\\n        assembly {\\n            // efficient hash\\n            mstore(0x00, singleHash)\\n            mstore(0x20, singleHash)\\n            msgHash := keccak256(0x00, 0x40)\\n        }\\n        require(stateRoot == calculateRoot(_proof, msgHash), \\\"Invalid proof.\\\");\\n\\n        (uint256 nonce, address receiver, bytes memory data) = abi.decode(_message, (uint256, address, bytes));\\n\\n        uint256 index = nonce / 256;\\n        uint256 offset = nonce % 256;\\n        bytes32 replay = relayed[index];\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[index] = replay | bytes32(1 << offset);\\n        (bool success, ) = receiver.call(data);\\n\\n        require(success, \\\"Failed to call contract\\\");\\n        emit MessageRelayed(nonce);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 _epoch) external {\\n        Claim storage claim = claims[_epoch];\\n\\n        require(claim.bridger != address(0), \\\"Claim does not exist\\\");\\n        require(claim.honest == true, \\\"Claim failed.\\\");\\n        require(claim.depositAndRewardWithdrawn == false, \\\"Claim deposit and any rewards already withdrawn.\\\");\\n\\n        claim.depositAndRewardWithdrawn = true;\\n\\n        uint256 amount = deposit;\\n\\n        if (challenges[_epoch].challenger != address(0)) {\\n            uint256 burn = deposit / 2;\\n            amount += deposit - burn;\\n            payable(address(0xdEad)).send(burn); // half burnt\\n        }\\n\\n        address bridger = claim.bridger;\\n        payable(bridger).send(amount); // Use of send to prevent reverting fallback. User is responsibility for accepting ETH.\\n        // Checks-Effects-Interaction\\n\\n        emit ClaimDepositWithdrawn(_epoch, bridger);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param _epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDeposit(uint256 _epoch) external {\\n        Challenge storage challenge = challenges[_epoch];\\n\\n        require(challenge.challenger != address(0), \\\"Challenge does not exist\\\");\\n        require(challenge.honest == true, \\\"Challenge failed.\\\");\\n        require(challenge.depositAndRewardWithdrawn == false, \\\"Challenge deposit and rewards already withdrawn.\\\");\\n\\n        challenge.depositAndRewardWithdrawn = true;\\n\\n        uint256 burn = deposit / 2;\\n        payable(address(0xdEad)).send(burn); // half burnt\\n\\n        uint256 amount = deposit + deposit - burn;    \\n        address challenger = challenge.challenger;    \\n        payable(challenger).send(amount - burn); // Use of send to prevent reverting fallback. User is responsibility for accepting ETH.\\n        \\n        emit ChallengeDepositWithdrawn(_epoch, challenger);\\n        // Checks-Effects-Interaction\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDepositTimeout(uint256 _epoch) external Frozen {\\n        require (_epoch > latestVerifiedEpoch, \\\"Claim not made in timeout period\\\") ;\\n        \\n        Claim storage claim = claims[_epoch];\\n\\n        require(claim.bridger != address(0), \\\"Claim does not exist\\\");\\n\\n        address bridger = claim.bridger;\\n        delete claims[_epoch];\\n\\n        payable(bridger).send(deposit); // Use of send to prevent reverting fallback. User is responsibility for accepting ETH.\\n        // Checks-Effects-Interaction\\n\\n        emit ClaimDepositWithdrawnTimeout(_epoch, claim.bridger);\\n    }\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param _epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDepositTimeout(uint256 _epoch) external Frozen{\\n        require (_epoch > latestVerifiedEpoch, \\\"Claim not made in timeout period\\\") ;\\n\\n        Challenge storage challenge = challenges[_epoch];\\n\\n        require(challenge.challenger != address(0), \\\"Challenge does not exist\\\");\\n\\n        address challenger = challenge.challenger;\\n        delete challenges[_epoch];\\n        \\n        payable(challenger).send(deposit); // Use of send to prevent reverting fallback. User is responsibility for accepting ETH.\\n        \\n        emit ChallengeDepositWithdrawnTimeout(_epoch, challenger);\\n        // Checks-Effects-Interaction\\n    }\\n\\n    // ********************************** //\\n    // *         Merkle Proof           * //\\n    // ********************************** //\\n\\n    /**\\n     * @dev Calculates merkle root from proof.\\n     * @param proof The merkle proof.\\n     * @param leaf The leaf to validate membership in merkle tree.\\n     */\\n    function calculateRoot(bytes32[] memory proof, bytes32 leaf) private pure returns (bytes32) {\\n        uint256 proofLength = proof.length;\\n        require(proofLength <= 32, \\\"Invalid Proof\\\");\\n        bytes32 h = leaf;\\n        for (uint256 i = 0; i < proofLength; i++) {\\n            bytes32 proofElement = proof[i];\\n            // effecient hash\\n            if (proofElement > h)\\n                assembly {\\n                    mstore(0x00, h)\\n                    mstore(0x20, proofElement)\\n                    h := keccak256(0x00, 0x40)\\n                }\\n            else\\n                assembly {\\n                    mstore(0x00, proofElement)\\n                    mstore(0x20, h)\\n                    h := keccak256(0x00, 0x40)\\n                }\\n        }\\n        return h;\\n    }\\n}\\n\",\"keccak256\":\"0xf88a8a774dd26d2794b990bb7d4d7cc9e8ee1c42cdf5f4036dc4ebfcda10061d\",\"license\":\"MIT\"},\"src/canonical/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.7.0;\\n\\ninterface IInbox {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n}\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0xb567e54805f44ea8405231284583880a38e8a22bfe619528a4f8ec7550f11d1b\",\"license\":\"Apache-2.0\"},\"src/canonical/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.7.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(uint256 indexed batchNum, uint256 outboxIndex, bytes32 outputRoot, uint256 numInBatch);\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths) external;\\n}\\n\",\"keccak256\":\"0xdc4952b5238d6c6282595b2eab4058c86d2d232b99a2d67556c02d6c11eea94f\",\"license\":\"Apache-2.0\"},\"src/interfaces/IVeaOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVeaOutbox {\\n    /**\\n     * @dev Verifies merkle proof for the given message and associated nonce for the epoch and relays the message.\\n     * @param _proof The merkle proof to prove the membership of the message and nonce in the merkle tree for the epoch.\\n     * @param _message The data of the message.\\n     */\\n    function verifyAndRelayMessage(\\n        bytes32[] calldata _proof,\\n        bytes calldata _message\\n    ) external;\\n\\n    /**\\n     * Note: Access restricted to arbitrum canonical bridge.\\n     * @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch to verify.\\n     * @param _stateRoot The true state root for the epoch.\\n     */\\n    function resolveChallenge(uint256 _epoch, bytes32 _stateRoot) external;\\n}\",\"keccak256\":\"0x1d447e5d4b446f1c3baeb0a6018232cd7df98d5d9f1fc42edb87402aac086e60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80638f1d3776116100ab578063b5b7a1841161006f578063b5b7a18414610414578063d0e30db014610448578063dbad86e21461047c578063f3f480d9146104b0578063f4cf751b146104e4578063fb0e722b1461050457600080fd5b80638f1d3776146102ad57806390df63b7146103205780639588eca21461034d578063a888c2cd14610363578063ab82d9a01461040157600080fd5b806331d14457116100f257806331d144571461021a5780634cd34a861461022d57806350b81dbe1461024d57806354dd1fbb1461026d57806368615f621461028d57600080fd5b806302d3e2361461012f57806313aa81331461018057806324ab8c17146101a257806327ee6bdd146101e45780632d011ff1146101fa575b600080fd5b34801561013b57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018c57600080fd5b506101a061019b366004611b1d565b610538565b005b3480156101ae57600080fd5b506101d67f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610177565b3480156101f057600080fd5b506101d660015481565b34801561020657600080fd5b506101a0610215366004611b3f565b61082f565b6101a0610228366004611b1d565b610a29565b34801561023957600080fd5b506101a0610248366004611b58565b610d55565b34801561025957600080fd5b506101a0610268366004611b3f565b610f96565b34801561027957600080fd5b506101a0610288366004611b3f565b6111fc565b34801561029957600080fd5b506101a06102a8366004611b3f565b6113e5565b3480156102b957600080fd5b506102f96102c8366004611b3f565b6003602052600090815260409020546001600160a01b0381169060ff600160a01b8204811691600160a81b90041683565b604080516001600160a01b0390941684529115156020840152151590820152606001610177565b34801561032c57600080fd5b506101d661033b366004611b3f565b60046020526000908152604090205481565b34801561035957600080fd5b506101d660005481565b34801561036f57600080fd5b506103c461037e366004611b3f565b600260205260009081526040902080546001909101546001600160a01b0381169063ffffffff600160a01b8204169060ff600160c01b8204811691600160c81b90041685565b604080519586526001600160a01b03909416602086015263ffffffff9092169284019290925290151560608301521515608082015260a001610177565b6101a061040f366004611b3f565b6115b3565b34801561042057600080fd5b506101d67f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b506101d67f000000000000000000000000000000000000000000000000000000000000000081565b34801561048857600080fd5b506101d67f000000000000000000000000000000000000000000000000000000000000000081565b3480156104bc57600080fd5b506101d67f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f057600080fd5b506101a06104ff366004611b3f565b611819565b34801561051057600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e78cea926040518163ffffffff1660e01b815260040160206040518083038186803b15801561059357600080fd5b505afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190611c35565b9050336001600160a01b0382161461061d5760405162461bcd60e51b815260206004820152601060248201526f2737ba10333937b690313934b233b29760811b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190611c35565b6001600160a01b03166380648b026040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611c35565b6001600160a01b03161461076d5760405162461bcd60e51b815260206004820152600c60248201526b29b2b73232b91037b7363c9760a11b6044820152606401610614565b60015483111561078257600183905560008290555b6000838152600260205260409020600101546001600160a01b0316156107ff576000838152600260205260409020548214156107df576000838152600260205260409020600101805460ff60c01b1916600160c01b1790556107ff565b6000838152600360205260409020805460ff60a01b1916600160a01b1790555b60405183907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a2505050565b7f000000000000000000000000000000000000000000000000000000000000000060015461085d9190611c6f565b6108877f000000000000000000000000000000000000000000000000000000000000000042611c9d565b116108c85760405162461bcd60e51b8152602060048201526011602482015270213934b233b2902737ba10233937bd32b760791b6044820152606401610614565b60015481116109195760405162461bcd60e51b815260206004820181905260248201527f436c61696d206e6f74206d61646520696e2074696d656f757420706572696f646044820152606401610614565b600081815260026020526040902060018101546001600160a01b03166109785760405162461bcd60e51b815260206004820152601460248201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610614565b60018082015460008481526002602052604080822082815590930180546001600160d01b031916905591516001600160a01b039091169182917f000000000000000000000000000000000000000000000000000000000000000080156108fc0292909190818181858888f150505060018401546040516001600160a01b0390911692508591507f7e6b142a218f73ba6036268baf59b969ebd7af9300bdd903d4b60dcdadf3ef1590600090a3505050565b7f0000000000000000000000000000000000000000000000000000000000000000600154610a579190611c6f565b610a817f000000000000000000000000000000000000000000000000000000000000000042611c9d565b10610abe5760405162461bcd60e51b815260206004820152600d60248201526c213934b233b290233937bd32b760991b6044820152606401610614565b7f0000000000000000000000000000000000000000000000000000000000000000341015610b2e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e00000000006044820152606401610614565b6000610b5a7f000000000000000000000000000000000000000000000000000000000000000042611c9d565b9050808311158015610b95575080610b927f000000000000000000000000000000000000000000000000000000000000000085611c6f565b10155b610bd25760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21032b837b1b41760911b6044820152606401610614565b81610c105760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b6044820152606401610614565b6000838152600260205260409020600101546001600160a01b031615610c6e5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b6044820152606401610614565b6040805160a08101825283815233602080830191825263ffffffff428116848601908152600060608601818152608087018281528b835260029095529087902095518655935160019590950180549151945193511515600160c81b0260ff60c81b19941515600160c01b029490941661ffff60c01b1995909316600160a01b026001600160c01b03199092166001600160a01b0396909616959095171792909216919091171790555183907fd5a2476fc450083bbb092dd3f4be92698ffdc2d213e6f1e730c7f44a52f1ccfc90610d489085815260200190565b60405180910390a2505050565b60008282604051610d67929190611cb1565b604051809103902090506000816000528160205260406000209050610dc0868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250611a65915050565b60005414610e015760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b6044820152606401610614565b60008080610e1186880188611cd7565b919450925090506000610e2661010085611c9d565b90506000610e3661010086611da4565b60008381526004602052604090205490915080821c60011615610e9b5760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c617965640000000000000000006044820152606401610614565b6000838152600460205260408082206001851b84179055516001600160a01b03871690610ec9908790611db8565b6000604051808303816000865af19150503d8060008114610f06576040519150601f19603f3d011682016040523d82523d6000602084013e610f0b565b606091505b5050905080610f5c5760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e74726163740000000000000000006044820152606401610614565b60405187907ff258436627a433127b0f4cd94e816d2c577f69116e5b0f9f1540f0d2aef9b23990600090a250505050505050505050505050565b600081815260026020526040902060018101546001600160a01b0316610ff55760405162461bcd60e51b815260206004820152601460248201527310db185a5b48191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610614565b600181810154600160c01b900460ff161515146110445760405162461bcd60e51b815260206004820152600d60248201526c21b630b4b6903330b4b632b21760991b6044820152606401610614565b6001810154600160c81b900460ff16156110b95760405162461bcd60e51b815260206004820152603060248201527f436c61696d206465706f73697420616e6420616e79207265776172647320616c60448201526f3932b0b23c903bb4ba34323930bbb71760811b6064820152608401610614565b60018101805460ff60c81b1916600160c81b1790556000828152600360205260409020547f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03161561119357600061113a60027f0000000000000000000000000000000000000000000000000000000000000000611c9d565b9050611166817f0000000000000000000000000000000000000000000000000000000000000000611df3565b6111709083611c6f565b60405190925061dead9082156108fc029083906000818181858888f15050505050505b60018201546040516001600160a01b0390911690819083156108fc029084906000818181858888f150506040516001600160a01b03851693508792507f3d8490b2b1cee24079fde68fd6a415c1f12e9a76e8090ac027dad29b666026199150600090a350505050565b7f000000000000000000000000000000000000000000000000000000000000000060015461122a9190611c6f565b6112547f000000000000000000000000000000000000000000000000000000000000000042611c9d565b116112955760405162461bcd60e51b8152602060048201526011602482015270213934b233b2902737ba10233937bd32b760791b6044820152606401610614565b60015481116112e65760405162461bcd60e51b815260206004820181905260248201527f436c61696d206e6f74206d61646520696e2074696d656f757420706572696f646044820152606401610614565b600081815260036020526040902080546001600160a01b03166113465760405162461bcd60e51b815260206004820152601860248201527710da185b1b195b99d948191bd95cc81b9bdd08195e1a5cdd60421b6044820152606401610614565b805460008381526003602052604080822080546001600160b01b0319169055516001600160a01b039092169182917f000000000000000000000000000000000000000000000000000000000000000080156108fc02929091818181858888f150506040516001600160a01b03851693508692507f57a2aac8eeee60703f0470427b3a7ebeeaadf37120646ffe230c1ed17a5b08b89150600090a3505050565b600081815260026020526040902060018101546001600160a01b03166114585760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642065706f63682c206e6f20636c61696d20746f2076657269666044820152613c9760f11b6064820152608401610614565b6000828152600260205260409020600101546114a2907f000000000000000000000000000000000000000000000000000000000000000090600160a01b900463ffffffff16611c6f565b42116114fe5760405162461bcd60e51b815260206004820152602560248201527f4368616c6c656e676520706572696f6420686173206e6f742079657420656c616044820152643839b2b21760d91b6064820152608401610614565b6000828152600360205260409020546001600160a01b03161561155a5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b6044820152606401610614565b60015482111561156f57600182905580546000555b60018101805460ff60c01b1916600160c01b17905560405182907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a25050565b7f00000000000000000000000000000000000000000000000000000000000000003410156116235760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820636c61696d206465706f73697400000000000000006044820152606401610614565b6000818152600260205260409020600101546001600160a01b03166116835760405162461bcd60e51b815260206004820152601660248201527527379031b630b4b6903a379031b430b63632b733b29760511b6044820152606401610614565b6000818152600360205260409020546001600160a01b0316156116e85760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e000000000000006044820152606401610614565b600081815260026020526040902060010154611732907f000000000000000000000000000000000000000000000000000000000000000090600160a01b900463ffffffff16611c6f565b42106117805760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f6420656c61707365642e000000000000006044820152606401610614565b6040805160608101825233815260006020808301828152838501838152868452600390925284832093518454915192511515600160a81b0260ff60a81b19931515600160a01b026001600160a81b03199093166001600160a01b039290921691909117919091179190911617909155905182917fce8523abf4f233988e032510f5de6ab0a96edd7bfcd5d0eb347d207bd67b334491a250565b600081815260036020526040902080546001600160a01b03166118795760405162461bcd60e51b815260206004820152601860248201527710da185b1b195b99d948191bd95cc81b9bdd08195e1a5cdd60421b6044820152606401610614565b8054600160a01b900460ff1615156001146118ca5760405162461bcd60e51b815260206004820152601160248201527021b430b63632b733b2903330b4b632b21760791b6044820152606401610614565b8054600160a81b900460ff161561193c5760405162461bcd60e51b815260206004820152603060248201527f4368616c6c656e6765206465706f73697420616e64207265776172647320616c60448201526f3932b0b23c903bb4ba34323930bbb71760811b6064820152608401610614565b805460ff60a81b1916600160a81b178155600061197a60027f0000000000000000000000000000000000000000000000000000000000000000611c9d565b60405190915061dead9082156108fc029083906000818181858888f19350505050506000817f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119eb9190611c6f565b6119f59190611df3565b83549091506001600160a01b0316806108fc611a118585611df3565b6040518115909202916000818181858888f150506040516001600160a01b03851693508892507f9e0ea87919796fe5ad8e4362a6a3ff07f6a73e0731b94f451d7184e4928f313b9150600090a35050505050565b81516000906020811115611aab5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b6044820152606401610614565b8260005b82811015611b14576000868281518110611acb57611acb611e0a565b6020026020010151905082811115611af157826000528060205260406000209250611b01565b8060005282602052604060002092505b5080611b0c81611e20565b915050611aaf565b50949350505050565b60008060408385031215611b3057600080fd5b50508035926020909101359150565b600060208284031215611b5157600080fd5b5035919050565b60008060008060408587031215611b6e57600080fd5b843567ffffffffffffffff80821115611b8657600080fd5b818701915087601f830112611b9a57600080fd5b813581811115611ba957600080fd5b8860208260051b8501011115611bbe57600080fd5b602092830196509450908601359080821115611bd957600080fd5b818701915087601f830112611bed57600080fd5b813581811115611bfc57600080fd5b886020828501011115611c0e57600080fd5b95989497505060200194505050565b6001600160a01b0381168114611c3257600080fd5b50565b600060208284031215611c4757600080fd5b8151611c5281611c1d565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611c8257611c82611c59565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611cac57611cac611c87565b500490565b8183823760009101908152919050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215611cec57600080fd5b833592506020840135611cfe81611c1d565b9150604084013567ffffffffffffffff80821115611d1b57600080fd5b818601915086601f830112611d2f57600080fd5b813581811115611d4157611d41611cc1565b604051601f8201601f19908116603f01168101908382118183101715611d6957611d69611cc1565b81604052828152896020848701011115611d8257600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600082611db357611db3611c87565b500690565b6000825160005b81811015611dd95760208186018101518583015201611dbf565b81811115611de8576000828501525b509190910192915050565b600082821015611e0557611e05611c59565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611e3457611e34611c59565b506001019056fea2646970667358221220543274eb715d1fcd36d150d48382cb00f81ac730ca033b4995dd838dc8f7cbe264736f6c63430008090033",
  "devdoc": {
    "events": {
      "ChallengeDepositWithdrawn(uint256,address)": {
        "details": "This event indicates that the challenge deposit has been withdrawn.",
        "params": {
          "_challenger": "The recipient of the challenge deposit.",
          "_epoch": "The epoch associated with the batch."
        }
      },
      "ChallengeDepositWithdrawnTimeout(uint256,address)": {
        "details": "This event indicates that the challenge deposit has been withdrawn.",
        "params": {
          "_challenger": "The recipient of the challenge deposit.",
          "_epoch": "The epoch associated with the batch."
        }
      },
      "Challenged(uint256)": {
        "details": "This event indicates that `sendSafeFallback()` should be called on the sending side.",
        "params": {
          "_epoch": "The epoch associated with the challenged claim."
        }
      },
      "ClaimDepositWithdrawn(uint256,address)": {
        "details": "This event indicates that the claim deposit has been withdrawn.",
        "params": {
          "_bridger": "The recipient of the claim deposit.",
          "_epoch": "The epoch associated with the batch."
        }
      },
      "ClaimDepositWithdrawnTimeout(uint256,address)": {
        "details": "This event indicates that the claim deposit has been withdrawn.",
        "params": {
          "_bridger": "The recipient of the claim deposit.",
          "_epoch": "The epoch associated with the batch."
        }
      },
      "Claimed(uint256,bytes32)": {
        "details": "The Fast Bridge participants watch for these events to decide if a challenge should be submitted.",
        "params": {
          "_batchMerkleRoot": "The timestamp of the claim creation.",
          "_epoch": "The epoch for which the the claim was made."
        }
      },
      "MessageRelayed(uint256)": {
        "details": "This event indicates that a message has been relayed for the batch in this `_epoch`.",
        "params": {
          "_nonce": "The nonce of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "_epoch": "The epoch associated with the batch."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256)": {
        "details": "Submit a challenge for the claim of the current epoch's Fast Bridge batch merkleroot state and submit a deposit. The `batchMerkleRoot` in the claim already made for the last finalized epoch should be different from the one on the sending side, otherwise the sender will lose his deposit.",
        "params": {
          "_epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the the _stateroot at _epoch and submit a deposit.",
        "params": {
          "_stateroot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochClaimWindow": "The number of epochs a claim can be submitted for.",
          "_epochPeriod": "The duration of each epoch.",
          "_inbox": "The address of the inbox contract on Ethereum.",
          "_numEpochTimeout": "The number of epochs after which the bridge is considered to be frozen.",
          "_veaInbox": "The address of the inbox contract on Ethereum."
        }
      },
      "resolveChallenge(uint256,bytes32)": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch to verify.",
          "_stateRoot": "The true batch merkle root for the epoch."
        }
      },
      "verifyAndRelayMessage(bytes32[],bytes)": {
        "details": "Verifies and relays the message.",
        "params": {
          "_message": "The data of the message.",
          "_proof": "The merkle proof to prove the message."
        }
      },
      "verifyStateroot(uint256)": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256)": {
        "details": "Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "_epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengeDepositTimeout(uint256)": {
        "details": "Sends the deposit back to the Challenger if their challenge is successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "_epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256)": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDepositTimeout(uint256)": {
        "details": "Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveChallenge(uint256,bytes32)": {
        "notice": "Note: Access restricted to arbitrum canonical bridge."
      }
    },
    "notice": "Vea Bridge Outbox On L1 Ethereum",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 406,
        "contract": "src/VeaOutbox.sol:VeaOutbox",
        "label": "stateRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 408,
        "contract": "src/VeaOutbox.sol:VeaOutbox",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 413,
        "contract": "src/VeaOutbox.sol:VeaOutbox",
        "label": "claims",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Claim)382_storage)"
      },
      {
        "astId": 418,
        "contract": "src/VeaOutbox.sol:VeaOutbox",
        "label": "challenges",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Challenge)389_storage)"
      },
      {
        "astId": 422,
        "contract": "src/VeaOutbox.sol:VeaOutbox",
        "label": "relayed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Challenge)389_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VeaOutbox.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)389_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)382_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VeaOutbox.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)382_storage"
      },
      "t_struct(Challenge)389_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutbox.Challenge",
        "members": [
          {
            "astId": 384,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 386,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "honest",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 388,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "depositAndRewardWithdrawn",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Claim)382_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutbox.Claim",
        "members": [
          {
            "astId": 373,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "stateroot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 375,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "bridger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 377,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "timestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 379,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "honest",
            "offset": 24,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 381,
            "contract": "src/VeaOutbox.sol:VeaOutbox",
            "label": "depositAndRewardWithdrawn",
            "offset": 25,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
