/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IRouterToGnosis, IRouterToGnosisInterface } from "../../../interfaces/routers/IRouterToGnosis";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_epoch",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_stateRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "stateRoot",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "timestampClaimed",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "timestampVerification",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "blocknumberVerification",
            type: "uint32",
          },
          {
            internalType: "enum Party",
            name: "honest",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "challenger",
            type: "address",
          },
        ],
        internalType: "struct Claim",
        name: "_claim",
        type: "tuple",
      },
    ],
    name: "route",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IRouterToGnosis__factory {
  static readonly abi = _abi;
  static createInterface(): IRouterToGnosisInterface {
    return new utils.Interface(_abi) as IRouterToGnosisInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IRouterToGnosis {
    return new Contract(address, _abi, signerOrProvider) as IRouterToGnosis;
  }
}
