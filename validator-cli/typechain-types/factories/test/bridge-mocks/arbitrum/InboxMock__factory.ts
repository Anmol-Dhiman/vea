/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { InboxMock, InboxMockInterface } from "../../../../test/bridge-mocks/arbitrum/InboxMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "arbBridge",
    outputs: [
      {
        internalType: "contract IBridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract IBridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "l2CallValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSubmissionCost",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "excessFeeRefundAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "callValueRefundAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxFeePerGas",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createRetryableTicket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161026f38038061026f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101dc806100936000396000f3fe6080604052600436106100345760003560e01c8063134efddf14610039578063679b6ded14610076578063e78cea92146100a1575b600080fd5b34801561004557600080fd5b50600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100936100843660046100db565b60009998505050505050505050565b60405190815260200161006d565b3480156100ad57600080fd5b506000546001600160a01b0316610059565b80356001600160a01b03811681146100d657600080fd5b919050565b60008060008060008060008060006101008a8c0312156100fa57600080fd5b6101038a6100bf565b985060208a0135975060408a0135965061011f60608b016100bf565b955061012d60808b016100bf565b945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff8082111561015857600080fd5b818c0191508c601f83011261016c57600080fd5b81358181111561017b57600080fd5b8d602082850101111561018d57600080fd5b602083019450809350505050929598509295985092959856fea264697066735822122098d5187f1c52781f72bbe39977d28cc185ac17ff9abafabd1a1edbd25363afa564736f6c63430008120033";

type InboxMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: InboxMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class InboxMock__factory extends ContractFactory {
  constructor(...args: InboxMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InboxMock> {
    return super.deploy(_bridge, overrides || {}) as Promise<InboxMock>;
  }
  override getDeployTransaction(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bridge, overrides || {});
  }
  override attach(address: string): InboxMock {
    return super.attach(address) as InboxMock;
  }
  override connect(signer: Signer): InboxMock__factory {
    return super.connect(signer) as InboxMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InboxMockInterface {
    return new utils.Interface(_abi) as InboxMockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): InboxMock {
    return new Contract(address, _abi, signerOrProvider) as InboxMock;
  }
}
