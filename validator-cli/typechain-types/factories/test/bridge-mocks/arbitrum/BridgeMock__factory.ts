/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { BridgeMock, BridgeMockInterface } from "../../../../test/bridge-mocks/arbitrum/BridgeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_outbox",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sequencerInbox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "activeOutbox",
    outputs: [
      {
        internalType: "address",
        name: "_outbox",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "allowedDelayedInboxList",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "outbox",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sequencerInbox",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101d83803806101d883398101604081905261002f9161007f565b600180546001600160a01b039283166001600160a01b031991821617909155600080549390921692169190911790556100b2565b80516001600160a01b038116811461007a57600080fd5b919050565b6000806040838503121561009257600080fd5b61009b83610063565b91506100a960208401610063565b90509250929050565b610117806100c16000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c8063ab5d894314604b578063ce11e6ab146074578063e76f5c8d146086578063ee35f327146095575b600080fd5b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6000546058906001600160a01b031681565b6058609136600460c9565b60a7565b6001546058906001600160a01b031681565b60008160000360c15750506001546001600160a01b031690565b506000919050565b60006020828403121560da57600080fd5b503591905056fea2646970667358221220a4e49cfae8fdc8e832418006ac4af51c03dd7fb09d783f000ae4df656112004164736f6c63430008120033";

type BridgeMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: BridgeMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class BridgeMock__factory extends ContractFactory {
  constructor(...args: BridgeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _outbox: PromiseOrValue<string>,
    _sequencerInbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeMock> {
    return super.deploy(_outbox, _sequencerInbox, overrides || {}) as Promise<BridgeMock>;
  }
  override getDeployTransaction(
    _outbox: PromiseOrValue<string>,
    _sequencerInbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_outbox, _sequencerInbox, overrides || {});
  }
  override attach(address: string): BridgeMock {
    return super.attach(address) as BridgeMock;
  }
  override connect(signer: Signer): BridgeMock__factory {
    return super.connect(signer) as BridgeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeMockInterface {
    return new utils.Interface(_abi) as BridgeMockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): BridgeMock {
    return new Contract(address, _abi, signerOrProvider) as BridgeMock;
  }
}
