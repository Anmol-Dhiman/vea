/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { MockAMB, MockAMBInterface } from "../../../../test/bridge-mocks/gnosis/MockAMB";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "MessagePassed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encodedData",
        type: "bytes",
      },
    ],
    name: "MockedEvent",
    type: "event",
  },
  {
    inputs: [],
    name: "destinationChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_messageId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "executeMessageCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "failedMessageDataHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "failedMessageReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "failedMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxGasPerTx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "messageCallStatus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messageId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messageSourceChainId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "requireToConfirmMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_requestSelector",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "requireToGetInformation",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "requireToPassMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setMaxGasPerTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "transactionHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506108bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806394643f71116100a2578063cb08a10c11610071578063cb08a10c1461022d578063d67bdd2514610260578063dc8601b314610273578063e37c328914610286578063e5789d03146102a657600080fd5b806394643f71146101e45780639e307dff146101f7578063affed0e014610200578063b07506111461012c57600080fd5b8063525ea937116100de578063525ea9371461019d578063669f618b146101b35780637bac29c7146101bc57806394275963146101d157600080fd5b80630ac1c313146101105780631544298e1461012c5780633f9a8e7e146101335780634a610b0414610174575b600080fd5b61011960025481565b6040519081526020015b60405180910390f35b6000610119565b61015c610141366004610530565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610123565b61015c610182366004610530565b6007602052600090815260409020546001600160a01b031681565b6101196101ab3660046105ec565b600092915050565b61011960035481565b6101cf6101ca366004610530565b600155565b005b6101cf6101df36600461064f565b6102af565b6101196101f23660046106bf565b6103d3565b61011960055481565b6004546102149067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610123565b61025061023b366004610530565b60066020526000908152604090205460ff1681565b6040519015158152602001610123565b60005461015c906001600160a01b031681565b6101196102813660046106bf565b6103ea565b610119610294366004610530565b60096020526000908152604090205481565b61011960015481565b600080546001600160a01b0319166001600160a01b03868116919091178255600384905560028490556105396005556040519087169083906102f2908790610756565b60006040518083038160008787f1925050503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b606091505b5050600080546001600160a01b0319168155600381905560028190556005819055848152600660205260409020805460ff19168215151790559050806103cb5783516020808601919091206000858152600983526040808220929092556008835281812080546001600160a01b03808c166001600160a01b03199283161790925560079094529190208054918816919092161790555b505050505050565b60006103e284848460806103f5565b949350505050565b60006103e284848460005b6003546000901561040557600080fd5b60405161053960f01b60208201526bffffffffffffffffffffffff193060601b16602282015260009060360160408051601f1981840301815291905280516020909101206004805468010000000000000000600160e01b03909216925067ffffffffffffffff9091168083176304488cd160e21b179160019160009061048c908490610772565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000813389886002808a61053961053a8f6040516020016104dc9a999897969594939291906107a8565b6040516020818303038152906040529050817ffba1d61c8783fe6430101e1c17b86283d23c953c4be9abb813603b4744d4851e8260405161051d9190610856565b60405180910390a2509695505050505050565b60006020828403121561054257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261057057600080fd5b813567ffffffffffffffff8082111561058b5761058b610549565b604051601f8301601f19908116603f011681019082821181831017156105b3576105b3610549565b816040528381528660208588010111156105cc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156105ff57600080fd5b82359150602083013567ffffffffffffffff81111561061d57600080fd5b6106298582860161055f565b9150509250929050565b80356001600160a01b038116811461064a57600080fd5b919050565b600080600080600060a0868803121561066757600080fd5b61067086610633565b945061067e60208701610633565b9350604086013567ffffffffffffffff81111561069a57600080fd5b6106a68882890161055f565b9598949750949560608101359550608001359392505050565b6000806000606084860312156106d457600080fd5b6106dd84610633565b9250602084013567ffffffffffffffff8111156106f957600080fd5b6107058682870161055f565b925050604084013590509250925092565b60005b83811015610731578181015183820152602001610719565b50506000910152565b6000815161074c818560208601610716565b9290920192915050565b60008251610768818460208701610716565b9190910192915050565b67ffffffffffffffff8181168382160190808211156107a157634e487b7160e01b600052601160045260246000fd5b5092915050565b8a81526bffffffffffffffffffffffff1960608b811b821660208401528a901b1660348201526001600160e01b031960e089901b1660488201526001600160f81b031960f888811b8216604c84015287811b8216604d84015286901b16604e8201526001600160f01b031960f085901b16604f8201526000610839605183018560f01b6001600160f01b0319169052565b610846605383018461073a565b9c9b505050505050505050505050565b6020815260008251806020840152610875816040850160208701610716565b601f01601f1916919091016040019291505056fea2646970667358221220dfb98c5b40c0519e71178faf0a174bf62f2cbfe46305122678f352a603238bdf64736f6c63430008120033";

type MockAMBConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockAMBConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockAMB__factory extends ContractFactory {
  constructor(...args: MockAMBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MockAMB> {
    return super.deploy(overrides || {}) as Promise<MockAMB>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAMB {
    return super.attach(address) as MockAMB;
  }
  override connect(signer: Signer): MockAMB__factory {
    return super.connect(signer) as MockAMB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAMBInterface {
    return new utils.Interface(_abi) as MockAMBInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockAMB {
    return new Contract(address, _abi, signerOrProvider) as MockAMB;
  }
}
