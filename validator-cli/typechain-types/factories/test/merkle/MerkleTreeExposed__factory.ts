/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MerkleTreeExposed, MerkleTreeExposedInterface } from "../../../test/merkle/MerkleTreeExposed";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_leaf",
        type: "bytes",
      },
    ],
    name: "appendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMerkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102d4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063495906571461003b5780635e6b593514610055575b600080fd5b61004361006a565b60405190815260200160405180910390f35b6100686100633660046101d7565b610079565b005b600061007461008c565b905090565b610089818051906020012061011a565b50565b60405460009081905b80156100ce57806001166001036100c257600082604081106100b9576100b9610288565b015492506100ce565b6001918201911c610095565b60011c5b801561011557600191820191818116900361010d5760008083604081106100fb576100fb610288565b01549050610109818561018d565b9350505b60011c6100d2565b505090565b6000908152602081206040549091906001015b8060011660000361016957600080836040811061014c5761014c610288565b0154905061015a818561018d565b9350506001918201911c61012d565b50816000826040811061017e5761017e610288565b01555050604080546001019055565b6000818311156101ab578160005282602052604060002090506101bb565b8260005281602052604060002090505b92915050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101e957600080fd5b813567ffffffffffffffff8082111561020157600080fd5b818401915084601f83011261021557600080fd5b813581811115610227576102276101c1565b604051601f8201601f19908116603f0116810190838211818310171561024f5761024f6101c1565b8160405282815287602084870101111561026857600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a9e300ee02ea1d22f94b235a7ebe000687799bc2996df5892292d9bd3d92ab6d64736f6c63430008120033";

type MerkleTreeExposedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MerkleTreeExposedConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MerkleTreeExposed__factory extends ContractFactory {
  constructor(...args: MerkleTreeExposedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MerkleTreeExposed> {
    return super.deploy(overrides || {}) as Promise<MerkleTreeExposed>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTreeExposed {
    return super.attach(address) as MerkleTreeExposed;
  }
  override connect(signer: Signer): MerkleTreeExposed__factory {
    return super.connect(signer) as MerkleTreeExposed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeExposedInterface {
    return new utils.Interface(_abi) as MerkleTreeExposedInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MerkleTreeExposed {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeExposed;
  }
}
