/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export type ClaimStruct = {
  stateRoot: PromiseOrValue<BytesLike>;
  claimer: PromiseOrValue<string>;
  timestampClaimed: PromiseOrValue<BigNumberish>;
  timestampVerification: PromiseOrValue<BigNumberish>;
  blocknumberVerification: PromiseOrValue<BigNumberish>;
  honest: PromiseOrValue<BigNumberish>;
  challenger: PromiseOrValue<string>;
};

export type ClaimStructOutput = [string, string, number, number, number, number, string] & {
  stateRoot: string;
  claimer: string;
  timestampClaimed: number;
  timestampVerification: number;
  blocknumberVerification: number;
  honest: number;
  challenger: string;
};

export interface RouterArbToGnosisInterface extends utils.Interface {
  functions: {
    "amb()": FunctionFragment;
    "bridge()": FunctionFragment;
    "executeSequencerDelayLimitDecreaseRequest()": FunctionFragment;
    "route(uint256,bytes32,uint256,(bytes32,address,uint32,uint32,uint32,uint8,address))": FunctionFragment;
    "sequencerDelayLimit()": FunctionFragment;
    "sequencerDelayLimitDecreaseRequest()": FunctionFragment;
    "updatesequencerDelayLimit()": FunctionFragment;
    "veaInboxArbToGnosis()": FunctionFragment;
    "veaOutboxArbToGnosis()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amb"
      | "bridge"
      | "executeSequencerDelayLimitDecreaseRequest"
      | "route"
      | "sequencerDelayLimit"
      | "sequencerDelayLimitDecreaseRequest"
      | "updatesequencerDelayLimit"
      | "veaInboxArbToGnosis"
      | "veaOutboxArbToGnosis"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "amb", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "executeSequencerDelayLimitDecreaseRequest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "route",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>, ClaimStruct]
  ): string;
  encodeFunctionData(functionFragment: "sequencerDelayLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "sequencerDelayLimitDecreaseRequest", values?: undefined): string;
  encodeFunctionData(functionFragment: "updatesequencerDelayLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "veaInboxArbToGnosis", values?: undefined): string;
  encodeFunctionData(functionFragment: "veaOutboxArbToGnosis", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeSequencerDelayLimitDecreaseRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "route", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequencerDelayLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequencerDelayLimitDecreaseRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatesequencerDelayLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veaInboxArbToGnosis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veaOutboxArbToGnosis", data: BytesLike): Result;

  events: {
    "Routed(uint256,bytes32)": EventFragment;
    "sequencerDelayLimitDecreaseRequested(uint256)": EventFragment;
    "sequencerDelayLimitSent(bytes32)": EventFragment;
    "sequencerDelayLimitUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Routed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerDelayLimitDecreaseRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerDelayLimitSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerDelayLimitUpdated"): EventFragment;
}

export interface RoutedEventObject {
  _epoch: BigNumber;
  _ticketID: string;
}
export type RoutedEvent = TypedEvent<[BigNumber, string], RoutedEventObject>;

export type RoutedEventFilter = TypedEventFilter<RoutedEvent>;

export interface sequencerDelayLimitDecreaseRequestedEventObject {
  _requestedSequencerDelayLimit: BigNumber;
}
export type sequencerDelayLimitDecreaseRequestedEvent = TypedEvent<
  [BigNumber],
  sequencerDelayLimitDecreaseRequestedEventObject
>;

export type sequencerDelayLimitDecreaseRequestedEventFilter =
  TypedEventFilter<sequencerDelayLimitDecreaseRequestedEvent>;

export interface sequencerDelayLimitSentEventObject {
  _ticketID: string;
}
export type sequencerDelayLimitSentEvent = TypedEvent<[string], sequencerDelayLimitSentEventObject>;

export type sequencerDelayLimitSentEventFilter = TypedEventFilter<sequencerDelayLimitSentEvent>;

export interface sequencerDelayLimitUpdatedEventObject {
  _newSequencerDelayLimit: BigNumber;
}
export type sequencerDelayLimitUpdatedEvent = TypedEvent<[BigNumber], sequencerDelayLimitUpdatedEventObject>;

export type sequencerDelayLimitUpdatedEventFilter = TypedEventFilter<sequencerDelayLimitUpdatedEvent>;

export interface RouterArbToGnosis extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterArbToGnosisInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amb(overrides?: CallOverrides): Promise<[string]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    executeSequencerDelayLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _claim: ClaimStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        requestedSequencerLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    updatesequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    veaInboxArbToGnosis(overrides?: CallOverrides): Promise<[string]>;

    veaOutboxArbToGnosis(overrides?: CallOverrides): Promise<[string]>;
  };

  amb(overrides?: CallOverrides): Promise<string>;

  bridge(overrides?: CallOverrides): Promise<string>;

  executeSequencerDelayLimitDecreaseRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  route(
    _epoch: PromiseOrValue<BigNumberish>,
    _stateroot: PromiseOrValue<BytesLike>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _claim: ClaimStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sequencerDelayLimit(overrides?: CallOverrides): Promise<BigNumber>;

  sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      requestedSequencerLimit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  updatesequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  veaInboxArbToGnosis(overrides?: CallOverrides): Promise<string>;

  veaOutboxArbToGnosis(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amb(overrides?: CallOverrides): Promise<string>;

    bridge(overrides?: CallOverrides): Promise<string>;

    executeSequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<void>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _claim: ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        requestedSequencerLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    updatesequencerDelayLimit(overrides?: CallOverrides): Promise<void>;

    veaInboxArbToGnosis(overrides?: CallOverrides): Promise<string>;

    veaOutboxArbToGnosis(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Routed(uint256,bytes32)"(_epoch?: PromiseOrValue<BigNumberish> | null, _ticketID?: null): RoutedEventFilter;
    Routed(_epoch?: PromiseOrValue<BigNumberish> | null, _ticketID?: null): RoutedEventFilter;

    "sequencerDelayLimitDecreaseRequested(uint256)"(
      _requestedSequencerDelayLimit?: null
    ): sequencerDelayLimitDecreaseRequestedEventFilter;
    sequencerDelayLimitDecreaseRequested(
      _requestedSequencerDelayLimit?: null
    ): sequencerDelayLimitDecreaseRequestedEventFilter;

    "sequencerDelayLimitSent(bytes32)"(_ticketID?: null): sequencerDelayLimitSentEventFilter;
    sequencerDelayLimitSent(_ticketID?: null): sequencerDelayLimitSentEventFilter;

    "sequencerDelayLimitUpdated(uint256)"(_newSequencerDelayLimit?: null): sequencerDelayLimitUpdatedEventFilter;
    sequencerDelayLimitUpdated(_newSequencerDelayLimit?: null): sequencerDelayLimitUpdatedEventFilter;
  };

  estimateGas: {
    amb(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    executeSequencerDelayLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _claim: ClaimStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<BigNumber>;

    updatesequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    veaInboxArbToGnosis(overrides?: CallOverrides): Promise<BigNumber>;

    veaOutboxArbToGnosis(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeSequencerDelayLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _claim: ClaimStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatesequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    veaInboxArbToGnosis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veaOutboxArbToGnosis(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
