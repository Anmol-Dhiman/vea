/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";

export interface RouterGnosisToArbInterface extends utils.Interface {
  functions: {
    "L2GasBalance(address)": FunctionFragment;
    "amb()": FunctionFragment;
    "bridge()": FunctionFragment;
    "deposit()": FunctionFragment;
    "executeSequencerDelayLimitDecreaseRequest()": FunctionFragment;
    "executeSequencerFutureLimitDecreaseRequest()": FunctionFragment;
    "route(uint256,bytes32,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "sendSequencerDelayLimit(uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "sendSequencerFutureLimit(uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "sequencerDelayLimit()": FunctionFragment;
    "sequencerDelayLimitDecreaseRequest()": FunctionFragment;
    "sequencerFutureLimit()": FunctionFragment;
    "sequencerFutureLimitDecreaseRequest()": FunctionFragment;
    "updateSequencerDelayLimit()": FunctionFragment;
    "updateSequencerFutureLimit()": FunctionFragment;
    "veaInboxGnosisToArb()": FunctionFragment;
    "veaOutboxGnosisToArb()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "L2GasBalance"
      | "amb"
      | "bridge"
      | "deposit"
      | "executeSequencerDelayLimitDecreaseRequest"
      | "executeSequencerFutureLimitDecreaseRequest"
      | "route"
      | "sendSequencerDelayLimit"
      | "sendSequencerFutureLimit"
      | "sequencerDelayLimit"
      | "sequencerDelayLimitDecreaseRequest"
      | "sequencerFutureLimit"
      | "sequencerFutureLimitDecreaseRequest"
      | "updateSequencerDelayLimit"
      | "updateSequencerFutureLimit"
      | "veaInboxGnosisToArb"
      | "veaOutboxGnosisToArb"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "L2GasBalance", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "amb", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "executeSequencerDelayLimitDecreaseRequest", values?: undefined): string;
  encodeFunctionData(functionFragment: "executeSequencerFutureLimitDecreaseRequest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "route",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendSequencerDelayLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendSequencerFutureLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "sequencerDelayLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "sequencerDelayLimitDecreaseRequest", values?: undefined): string;
  encodeFunctionData(functionFragment: "sequencerFutureLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "sequencerFutureLimitDecreaseRequest", values?: undefined): string;
  encodeFunctionData(functionFragment: "updateSequencerDelayLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "updateSequencerFutureLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "veaInboxGnosisToArb", values?: undefined): string;
  encodeFunctionData(functionFragment: "veaOutboxGnosisToArb", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "L2GasBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeSequencerDelayLimitDecreaseRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeSequencerFutureLimitDecreaseRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "route", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendSequencerDelayLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendSequencerFutureLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequencerDelayLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequencerDelayLimitDecreaseRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequencerFutureLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequencerFutureLimitDecreaseRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateSequencerDelayLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateSequencerFutureLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veaInboxGnosisToArb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veaOutboxGnosisToArb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Routed(uint256,uint256)": EventFragment;
    "sequencerDelayLimitDecreaseRequested(uint256)": EventFragment;
    "sequencerDelayLimitSent(uint256)": EventFragment;
    "sequencerDelayLimitUpdated(uint256)": EventFragment;
    "sequencerFutureLimitDecreaseRequested(uint256)": EventFragment;
    "sequencerFutureLimitSent(uint256)": EventFragment;
    "sequencerFutureLimitUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Routed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerDelayLimitDecreaseRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerDelayLimitSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerDelayLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerFutureLimitDecreaseRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerFutureLimitSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sequencerFutureLimitUpdated"): EventFragment;
}

export interface RoutedEventObject {
  _epoch: BigNumber;
  _ticketID: BigNumber;
}
export type RoutedEvent = TypedEvent<[BigNumber, BigNumber], RoutedEventObject>;

export type RoutedEventFilter = TypedEventFilter<RoutedEvent>;

export interface sequencerDelayLimitDecreaseRequestedEventObject {
  _requestedSequencerDelayLimit: BigNumber;
}
export type sequencerDelayLimitDecreaseRequestedEvent = TypedEvent<
  [BigNumber],
  sequencerDelayLimitDecreaseRequestedEventObject
>;

export type sequencerDelayLimitDecreaseRequestedEventFilter =
  TypedEventFilter<sequencerDelayLimitDecreaseRequestedEvent>;

export interface sequencerDelayLimitSentEventObject {
  _ticketID: BigNumber;
}
export type sequencerDelayLimitSentEvent = TypedEvent<[BigNumber], sequencerDelayLimitSentEventObject>;

export type sequencerDelayLimitSentEventFilter = TypedEventFilter<sequencerDelayLimitSentEvent>;

export interface sequencerDelayLimitUpdatedEventObject {
  _newSequencerDelayLimit: BigNumber;
}
export type sequencerDelayLimitUpdatedEvent = TypedEvent<[BigNumber], sequencerDelayLimitUpdatedEventObject>;

export type sequencerDelayLimitUpdatedEventFilter = TypedEventFilter<sequencerDelayLimitUpdatedEvent>;

export interface sequencerFutureLimitDecreaseRequestedEventObject {
  _requestedSequencerFutureLimit: BigNumber;
}
export type sequencerFutureLimitDecreaseRequestedEvent = TypedEvent<
  [BigNumber],
  sequencerFutureLimitDecreaseRequestedEventObject
>;

export type sequencerFutureLimitDecreaseRequestedEventFilter =
  TypedEventFilter<sequencerFutureLimitDecreaseRequestedEvent>;

export interface sequencerFutureLimitSentEventObject {
  _ticketID: BigNumber;
}
export type sequencerFutureLimitSentEvent = TypedEvent<[BigNumber], sequencerFutureLimitSentEventObject>;

export type sequencerFutureLimitSentEventFilter = TypedEventFilter<sequencerFutureLimitSentEvent>;

export interface sequencerFutureLimitUpdatedEventObject {
  _newSequencerFutureLimit: BigNumber;
}
export type sequencerFutureLimitUpdatedEvent = TypedEvent<[BigNumber], sequencerFutureLimitUpdatedEventObject>;

export type sequencerFutureLimitUpdatedEventFilter = TypedEventFilter<sequencerFutureLimitUpdatedEvent>;

export interface RouterGnosisToArb extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterGnosisToArbInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    L2GasBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    amb(overrides?: CallOverrides): Promise<[string]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    executeSequencerDelayLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeSequencerFutureLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendSequencerDelayLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendSequencerFutureLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        requestedSequencerLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    sequencerFutureLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    sequencerFutureLimitDecreaseRequest(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        requestedSequencerLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    updateSequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateSequencerFutureLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    veaInboxGnosisToArb(overrides?: CallOverrides): Promise<[string]>;

    veaOutboxGnosisToArb(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  L2GasBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  amb(overrides?: CallOverrides): Promise<string>;

  bridge(overrides?: CallOverrides): Promise<string>;

  deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  executeSequencerDelayLimitDecreaseRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeSequencerFutureLimitDecreaseRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  route(
    _epoch: PromiseOrValue<BigNumberish>,
    _stateroot: PromiseOrValue<BytesLike>,
    _inboxIndex: PromiseOrValue<BigNumberish>,
    _maxSubmissionCost: PromiseOrValue<BigNumberish>,
    _excessFeeRefundAddress: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _maxFeePerGas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendSequencerDelayLimit(
    _inboxIndex: PromiseOrValue<BigNumberish>,
    _maxSubmissionCost: PromiseOrValue<BigNumberish>,
    _excessFeeRefundAddress: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _maxFeePerGas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendSequencerFutureLimit(
    _inboxIndex: PromiseOrValue<BigNumberish>,
    _maxSubmissionCost: PromiseOrValue<BigNumberish>,
    _excessFeeRefundAddress: PromiseOrValue<string>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _maxFeePerGas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sequencerDelayLimit(overrides?: CallOverrides): Promise<BigNumber>;

  sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      requestedSequencerLimit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  sequencerFutureLimit(overrides?: CallOverrides): Promise<BigNumber>;

  sequencerFutureLimitDecreaseRequest(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      requestedSequencerLimit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  updateSequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateSequencerFutureLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  veaInboxGnosisToArb(overrides?: CallOverrides): Promise<string>;

  veaOutboxGnosisToArb(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    L2GasBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    amb(overrides?: CallOverrides): Promise<string>;

    bridge(overrides?: CallOverrides): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    executeSequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<void>;

    executeSequencerFutureLimitDecreaseRequest(overrides?: CallOverrides): Promise<void>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendSequencerDelayLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendSequencerFutureLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        requestedSequencerLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    sequencerFutureLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerFutureLimitDecreaseRequest(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        requestedSequencerLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    updateSequencerDelayLimit(overrides?: CallOverrides): Promise<void>;

    updateSequencerFutureLimit(overrides?: CallOverrides): Promise<void>;

    veaInboxGnosisToArb(overrides?: CallOverrides): Promise<string>;

    veaOutboxGnosisToArb(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Routed(uint256,uint256)"(_epoch?: PromiseOrValue<BigNumberish> | null, _ticketID?: null): RoutedEventFilter;
    Routed(_epoch?: PromiseOrValue<BigNumberish> | null, _ticketID?: null): RoutedEventFilter;

    "sequencerDelayLimitDecreaseRequested(uint256)"(
      _requestedSequencerDelayLimit?: null
    ): sequencerDelayLimitDecreaseRequestedEventFilter;
    sequencerDelayLimitDecreaseRequested(
      _requestedSequencerDelayLimit?: null
    ): sequencerDelayLimitDecreaseRequestedEventFilter;

    "sequencerDelayLimitSent(uint256)"(_ticketID?: null): sequencerDelayLimitSentEventFilter;
    sequencerDelayLimitSent(_ticketID?: null): sequencerDelayLimitSentEventFilter;

    "sequencerDelayLimitUpdated(uint256)"(_newSequencerDelayLimit?: null): sequencerDelayLimitUpdatedEventFilter;
    sequencerDelayLimitUpdated(_newSequencerDelayLimit?: null): sequencerDelayLimitUpdatedEventFilter;

    "sequencerFutureLimitDecreaseRequested(uint256)"(
      _requestedSequencerFutureLimit?: null
    ): sequencerFutureLimitDecreaseRequestedEventFilter;
    sequencerFutureLimitDecreaseRequested(
      _requestedSequencerFutureLimit?: null
    ): sequencerFutureLimitDecreaseRequestedEventFilter;

    "sequencerFutureLimitSent(uint256)"(_ticketID?: null): sequencerFutureLimitSentEventFilter;
    sequencerFutureLimitSent(_ticketID?: null): sequencerFutureLimitSentEventFilter;

    "sequencerFutureLimitUpdated(uint256)"(_newSequencerFutureLimit?: null): sequencerFutureLimitUpdatedEventFilter;
    sequencerFutureLimitUpdated(_newSequencerFutureLimit?: null): sequencerFutureLimitUpdatedEventFilter;
  };

  estimateGas: {
    L2GasBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    amb(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    executeSequencerDelayLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeSequencerFutureLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendSequencerDelayLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendSequencerFutureLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerFutureLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerFutureLimitDecreaseRequest(overrides?: CallOverrides): Promise<BigNumber>;

    updateSequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateSequencerFutureLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    veaInboxGnosisToArb(overrides?: CallOverrides): Promise<BigNumber>;

    veaOutboxGnosisToArb(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    L2GasBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    executeSequencerDelayLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeSequencerFutureLimitDecreaseRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    route(
      _epoch: PromiseOrValue<BigNumberish>,
      _stateroot: PromiseOrValue<BytesLike>,
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendSequencerDelayLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendSequencerFutureLimit(
      _inboxIndex: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      _excessFeeRefundAddress: PromiseOrValue<string>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _maxFeePerGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sequencerDelayLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerDelayLimitDecreaseRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerFutureLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerFutureLimitDecreaseRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSequencerDelayLimit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateSequencerFutureLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    veaInboxGnosisToArb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veaOutboxGnosisToArb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
