// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Hearbeat extends ethereum.Event {
  get params(): Hearbeat__Params {
    return new Hearbeat__Params(this);
  }
}

export class Hearbeat__Params {
  _event: Hearbeat;

  constructor(event: Hearbeat) {
    this._event = event;
  }

  get ticketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class MessageSent extends ethereum.Event {
  get params(): MessageSent__Params {
    return new MessageSent__Params(this);
  }
}

export class MessageSent__Params {
  _event: MessageSent;

  constructor(event: MessageSent) {
    this._event = event;
  }

  get nodeData(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SnapshotSaved extends ethereum.Event {
  get params(): SnapshotSaved__Params {
    return new SnapshotSaved__Params(this);
  }
}

export class SnapshotSaved__Params {
  _event: SnapshotSaved;

  constructor(event: SnapshotSaved) {
    this._event = event;
  }

  get stateRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SnapshotSent extends ethereum.Event {
  get params(): SnapshotSent__Params {
    return new SnapshotSent__Params(this);
  }
}

export class SnapshotSent__Params {
  _event: SnapshotSent;

  constructor(event: SnapshotSent) {
    this._event = event;
  }

  get epochSent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ticketId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class VeaInbox extends ethereum.SmartContract {
  static bind(address: Address): VeaInbox {
    return new VeaInbox("VeaInbox", address);
  }

  ARB_SYS(): Address {
    let result = super.call("ARB_SYS", "ARB_SYS():(address)", []);

    return result[0].toAddress();
  }

  try_ARB_SYS(): ethereum.CallResult<Address> {
    let result = super.tryCall("ARB_SYS", "ARB_SYS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  count(): BigInt {
    let result = super.call("count", "count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("count", "count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochPeriod(): BigInt {
    let result = super.call("epochPeriod", "epochPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochPeriod", "epochPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inbox(param0: BigInt): Bytes {
    let result = super.call("inbox", "inbox(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBytes();
  }

  try_inbox(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("inbox", "inbox(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sendMessage(to: Address, fnSelector: Bytes, data: Bytes): BigInt {
    let result = super.call(
      "sendMessage",
      "sendMessage(address,bytes4,bytes):(uint64)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytes(fnSelector),
        ethereum.Value.fromBytes(data),
      ]
    );

    return result[0].toBigInt();
  }

  try_sendMessage(
    to: Address,
    fnSelector: Bytes,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sendMessage",
      "sendMessage(address,bytes4,bytes):(uint64)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytes(fnSelector),
        ethereum.Value.fromBytes(data),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  snapshots(param0: BigInt): Bytes {
    let result = super.call("snapshots", "snapshots(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBytes();
  }

  try_snapshots(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("snapshots", "snapshots(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  veaOutbox(): Address {
    let result = super.call("veaOutbox", "veaOutbox():(address)", []);

    return result[0].toAddress();
  }

  try_veaOutbox(): ethereum.CallResult<Address> {
    let result = super.tryCall("veaOutbox", "veaOutbox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _epochPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _veaOutbox(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SaveSnapshotCall extends ethereum.Call {
  get inputs(): SaveSnapshotCall__Inputs {
    return new SaveSnapshotCall__Inputs(this);
  }

  get outputs(): SaveSnapshotCall__Outputs {
    return new SaveSnapshotCall__Outputs(this);
  }
}

export class SaveSnapshotCall__Inputs {
  _call: SaveSnapshotCall;

  constructor(call: SaveSnapshotCall) {
    this._call = call;
  }
}

export class SaveSnapshotCall__Outputs {
  _call: SaveSnapshotCall;

  constructor(call: SaveSnapshotCall) {
    this._call = call;
  }
}

export class SendHeartbeatCall extends ethereum.Call {
  get inputs(): SendHeartbeatCall__Inputs {
    return new SendHeartbeatCall__Inputs(this);
  }

  get outputs(): SendHeartbeatCall__Outputs {
    return new SendHeartbeatCall__Outputs(this);
  }
}

export class SendHeartbeatCall__Inputs {
  _call: SendHeartbeatCall;

  constructor(call: SendHeartbeatCall) {
    this._call = call;
  }
}

export class SendHeartbeatCall__Outputs {
  _call: SendHeartbeatCall;

  constructor(call: SendHeartbeatCall) {
    this._call = call;
  }
}

export class SendMessageCall extends ethereum.Call {
  get inputs(): SendMessageCall__Inputs {
    return new SendMessageCall__Inputs(this);
  }

  get outputs(): SendMessageCall__Outputs {
    return new SendMessageCall__Outputs(this);
  }
}

export class SendMessageCall__Inputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fnSelector(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SendMessageCall__Outputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SendSnapshotCall extends ethereum.Call {
  get inputs(): SendSnapshotCall__Inputs {
    return new SendSnapshotCall__Inputs(this);
  }

  get outputs(): SendSnapshotCall__Outputs {
    return new SendSnapshotCall__Outputs(this);
  }
}

export class SendSnapshotCall__Inputs {
  _call: SendSnapshotCall;

  constructor(call: SendSnapshotCall) {
    this._call = call;
  }

  get epochSend(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SendSnapshotCall__Outputs {
  _call: SendSnapshotCall;

  constructor(call: SendSnapshotCall) {
    this._call = call;
  }
}
